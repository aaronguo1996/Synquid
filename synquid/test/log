ADD __goal__ : All {a,}. {1{List |  | a, |  | },}->Int
ADD Cons : All {A0,}. {2{List |  | A0, |  | },A0,}->{List |  | A0, |  | }
ADD Nil : All {A1,}. {List |  | A1, |  | }
ADD dec : {1Int,}->Int
ADD foldr : All {A2,A3,}. {3{List |  | A3, |  | },{3{List |  | A3, |  | },A3,A2,}->A2,A2,}->A2
ADD inc : {1Int,}->Int
ADD length : All {A4,}. {1{List |  | A4, |  | },}->Int
ADD zero : Int
Checking error in
error
Adding constraint length |- {Int|0 == 0} <: {Int|False} ()
Typing Constraints
length |- {Int|0 == 0} <: {Int|False} ()
Type assignment
Simple Constraints
length |- {Int|0 == 0} <: {Int|False} ()
Pred assignment
After process simple constraints
length |- {Int|0 == 0} <: {Int|False} ()
Constraints
  0 == 0 ==> False
QMap
Candidates (1)
  0: [] (0 1)
Chosen candidate: 0: [] (0 1)
Invalid Constraint: 0 == 0 ==> False
Strengthening: 0 == 0 ==> False
Instantiated axioms:
All assumptions:
0 == 0
RHS: False
assumption True
mustHave 0 == 0
qualsList []
Optimal valuations:
Pruned valuations:
Diffs: (0)
TYPE ERROR: Cannot find sufficiently strong refinements
when checking error in
error
ADD xs : All {a,}. {List |  | a, |  | }
Adding constraint length, xs |- C0
Looking for type {Int|_v == len xs}
Score for (?? :: {Int|_v == len xs}) is 103.0
Current queue size 0
Checking (?? :: {Int|_v == len xs}) in
\xs . ??
Typing Constraints
length, xs |- C0
Type assignment
Simple Constraints
length, xs |- C0
Pred assignment
After process simple constraints
Constraints
QMap
  C0 -> {}
Checking consistency
Candidates (1)
  0: [C0 -> {}] (0 0)
Remaining Candidates (1)
  0: [C0 -> {}] (0 0)
*******************Filling holes in (?? :: {Int|_v == len xs})
Looking for succinct type Int
INSTANTIATE x:Int -> {Int|_v == x - 1}
INTO x13:Int -> {Int|_v == x13 - 1}
Trying dec
Adding constraint length, xs C0 |- x13:Int -> {Int|_v == x13 - 1} <: X0:_ -> {Int|_v == len xs} ()
Adding constraint length, xs C0 |- x13:Int -> {Int|_v == x13 - 1} /\ X0:_ -> {Int|_v == len xs} ()
Adding constraint length, xs |- A5
Adding constraint length, xs |- A6
Adding constraint |- P1 :: List (A6) -> A5 -> Bool
INSTANTIATE <b> . <a> . <p :: List (a) -> b -> Bool> . f:(xs:List a -> x:a -> acc:{b|p xs _v} -> {b|p ((Cons x xs)) _v}) -> seed:{b|p (Nil) _v} -> ys:List a -> {b|p ys _v}
INTO x14:(x15:List A6 -> x16:A6 -> x17:{A5|P1 x15 _v} -> {A5|P1 ((Cons x16 x15)) _v}) -> x18:{A5|P1 (Nil) _v} -> x19:List A6 -> {A5|P1 x19 _v}
Trying foldr
Adding constraint length, xs C0 |- x14:(x15:List A6 -> x16:A6 -> x17:{A5|P1 x15 _v} -> {A5|P1 ((Cons x16 x15)) _v}) -> x18:{A5|P1 (Nil) _v} -> x19:List A6 -> {A5|P1 x19 _v} <: X3:_ -> X2:_ -> X1:_ -> {Int|_v == len xs} ()
Adding constraint length, xs C0 |- x14:(x15:List A6 -> x16:A6 -> x17:{A5|P1 x15 _v} -> {A5|P1 ((Cons x16 x15)) _v}) -> x18:{A5|P1 (Nil) _v} -> x19:List A6 -> {A5|P1 x19 _v} /\ X3:_ -> X2:_ -> X1:_ -> {Int|_v == len xs} ()
INSTANTIATE x:Int -> {Int|_v == x + 1}
INTO x20:Int -> {Int|_v == x20 + 1}
Trying inc
Adding constraint length, xs C0 |- x20:Int -> {Int|_v == x20 + 1} <: X4:_ -> {Int|_v == len xs} ()
Adding constraint length, xs C0 |- x20:Int -> {Int|_v == x20 + 1} /\ X4:_ -> {Int|_v == len xs} ()
Trying zero
Adding constraint length, xs C0 |- {Int|_v == zero} <: {Int|_v == len xs} ()
Adding constraint length, xs |- A7
INSTANTIATE <a> . x0:{List a|len _v >= 0 && len _v < len xs} -> {Int|_v == len x0}
INTO x21:{List A7|len _v >= 0 && len _v < len xs} -> {Int|_v == len x21}
Adding constraint length, xs C0 |- x21:List A7 -> {Int|False} <: xs:{List {a|False}|False} -> Int ()
Trying length
Adding constraint length, xs C0 |- x21:{List A7|len _v >= 0 && len _v < len xs} -> {Int|_v == len x21} <: X5:_ -> {Int|_v == len xs} ()
Adding constraint length, xs C0 |- x21:{List A7|len _v >= 0 && len _v < len xs} -> {Int|_v == len x21} /\ X5:_ -> {Int|_v == len xs} ()
Score for zero is 100100.0
Current queue size 4
Checking zero in
\xs . ??
Typing Constraints
length, xs C0 |- {Int|_v == zero} <: {Int|_v == len xs} ()
Type assignment
Simple Constraints
length, xs C0 |- {Int|_v == zero} <: {Int|_v == len xs} ()
Pred assignment
After process simple constraints
length, xs C0 |- {Int|_v == zero} <: {Int|_v == len xs} ()
Constraints
  C0 && (_v == zero && (zero == 0 && len xs >= 0)) ==> _v == len xs
QMap
  C0 -> {}
Candidates (1)
  0: [C0 -> {}] (0 1)
Chosen candidate: 0: [C0 -> {}] (0 1)
Invalid Constraint: C0 && (_v == zero && (zero == 0 && len xs >= 0)) ==> _v == len xs
Strengthening: C0 && (_v == zero && (zero == 0 && len xs >= 0)) ==> _v == len xs
Instantiated axioms:
All assumptions:
_v == zero, zero == 0, len xs >= 0
RHS: _v == len xs
assumption _v == zero && (zero == 0 && len xs >= 0)
mustHave !(_v == len xs)
qualsList []
Optimal valuations:
Pruned valuations:
Diffs: (0)
TYPE ERROR: Cannot find sufficiently strong refinements
Score for dec
            (?? :: Int) is 38.333333333333336
Current queue size 3
Checking dec (?? :: Int) in
\xs . ??
Typing Constraints
length, xs C0 |- x13:Int -> {Int|_v == x13 - 1} /\ X0:_ -> {Int|_v == len xs} ()
length, xs C0 |- x13:Int -> {Int|_v == x13 - 1} <: X0:_ -> {Int|_v == len xs} ()
Type assignment
Simple Constraints
X0, length, xs C0 |- {Int|_v == X0 - 1} <: {Int|_v == len xs} ()
length, x13, xs C0 |- {Int|_v == x13 - 1} /\ {Int|_v == len xs} ()
Pred assignment
After process simple constraints
length, x13, xs C0 |- {Int|_v == x13 - 1} /\ {Int|_v == len xs} ()
X0, length, xs C0 |- {Int|_v == X0 - 1} <: {Int|_v == len xs} ()
Constraints
  False ==> _v == len xs
QMap
  C0 -> {}
Checking consistency
  C0 && (_v == x13 - 1 && (_v == len xs && len xs >= 0))
Candidates (1)
  0: [C0 -> {}] (1 0)
Remaining Candidates (1)
  0: [C0 -> {}] (1 0)
*******************Filling holes in dec
                                      (?? :: Int)
Looking for succinct type Int
INSTANTIATE x:Int -> {Int|_v == x - 1}
INTO x22:Int -> {Int|_v == x22 - 1}
Trying dec
Adding constraint length, xs C0 |- x22:Int -> {Int|_v == x22 - 1} <: X6:_ -> Int ()
Adding constraint length, xs C0 |- x22:Int -> {Int|_v == x22 - 1} /\ X6:_ -> Int ()
Adding constraint length, xs |- A8
Adding constraint length, xs |- A9
Adding constraint |- P2 :: List (A9) -> A8 -> Bool
INSTANTIATE <b> . <a> . <p :: List (a) -> b -> Bool> . f:(xs:List a -> x:a -> acc:{b|p xs _v} -> {b|p ((Cons x xs)) _v}) -> seed:{b|p (Nil) _v} -> ys:List a -> {b|p ys _v}
INTO x23:(x24:List A9 -> x25:A9 -> x26:{A8|P2 x24 _v} -> {A8|P2 ((Cons x25 x24)) _v}) -> x27:{A8|P2 (Nil) _v} -> x28:List A9 -> {A8|P2 x28 _v}
Trying foldr
Adding constraint length, xs C0 |- x23:(x24:List A9 -> x25:A9 -> x26:{A8|P2 x24 _v} -> {A8|P2 ((Cons x25 x24)) _v}) -> x27:{A8|P2 (Nil) _v} -> x28:List A9 -> {A8|P2 x28 _v} <: X9:_ -> X8:_ -> X7:_ -> Int ()
Adding constraint length, xs C0 |- x23:(x24:List A9 -> x25:A9 -> x26:{A8|P2 x24 _v} -> {A8|P2 ((Cons x25 x24)) _v}) -> x27:{A8|P2 (Nil) _v} -> x28:List A9 -> {A8|P2 x28 _v} /\ X9:_ -> X8:_ -> X7:_ -> Int ()
INSTANTIATE x:Int -> {Int|_v == x + 1}
INTO x29:Int -> {Int|_v == x29 + 1}
Trying inc
Adding constraint length, xs C0 |- x29:Int -> {Int|_v == x29 + 1} <: X10:_ -> Int ()
Adding constraint length, xs C0 |- x29:Int -> {Int|_v == x29 + 1} /\ X10:_ -> Int ()
Trying zero
Adding constraint length, xs C0 |- {Int|_v == zero} <: Int ()
Adding constraint length, xs |- A10
INSTANTIATE <a> . x0:{List a|len _v >= 0 && len _v < len xs} -> {Int|_v == len x0}
INTO x30:{List A10|len _v >= 0 && len _v < len xs} -> {Int|_v == len x30}
Adding constraint length, xs C0 |- x30:List A10 -> {Int|False} <: xs:{List {a|False}|False} -> Int ()
Trying length
Adding constraint length, xs C0 |- x30:{List A10|len _v >= 0 && len _v < len xs} -> {Int|_v == len x30} <: X11:_ -> Int ()
Adding constraint length, xs C0 |- x30:{List A10|len _v >= 0 && len _v < len xs} -> {Int|_v == len x30} /\ X11:_ -> Int ()
Score for dec
            zero is 100035.33333333333
Current queue size 7
Checking dec zero in
\xs . ??
Typing Constraints
length, xs C0 |- {Int|_v == zero} <: Int ()
Type assignment
Simple Constraints
length, xs C0 |- {Int|_v == zero} <: Int ()
Pred assignment
After process simple constraints
Constraints
QMap
  C0 -> {}
Checking consistency
Candidates (1)
  0: [C0 -> {}] (1 0)
Remaining Candidates (1)
  0: [C0 -> {}] (1 0)
Checking program dec zero
Checking dec
           zero :: {Int|_v == len xs} in
\xs . ??
Adding constraint length, xs C0 |- {Int|_v == zero - 1} <: {Int|_v == len xs} ()
Typing Constraints
length, xs C0 |- {Int|_v == zero - 1} <: {Int|_v == len xs} ()
Type assignment
Simple Constraints
length, xs C0 |- {Int|_v == zero - 1} <: {Int|_v == len xs} ()
Pred assignment
After process simple constraints
length, xs C0 |- {Int|_v == zero - 1} <: {Int|_v == len xs} ()
Constraints
  C0 && (_v == zero - 1 && (zero == 0 && len xs >= 0)) ==> _v == len xs
QMap
  C0 -> {}
Candidates (1)
  0: [C0 -> {}] (1 1)
Chosen candidate: 0: [C0 -> {}] (1 1)
Invalid Constraint: C0 && (_v == zero - 1 && (zero == 0 && len xs >= 0)) ==> _v == len xs
Strengthening: C0 && (_v == zero - 1 && (zero == 0 && len xs >= 0)) ==> _v == len xs
Instantiated axioms:
All assumptions:
_v == zero - 1, zero == 0, len xs >= 0
RHS: _v == len xs
assumption _v == zero - 1 && (zero == 0 && len xs >= 0)
mustHave !(_v == len xs)
qualsList []
Optimal valuations:
Pruned valuations:
Diffs: (0)
TYPE ERROR: Cannot find sufficiently strong refinements
when checking dec zero ::
{Int|_v == len xs} in
\xs . dec zero
Score for inc
            (?? :: Int) is 38.333333333333336
Current queue size 6
Checking inc (?? :: Int) in
\xs . ??
Typing Constraints
length, xs C0 |- x20:Int -> {Int|_v == x20 + 1} /\ X4:_ -> {Int|_v == len xs} ()
length, xs C0 |- x20:Int -> {Int|_v == x20 + 1} <: X4:_ -> {Int|_v == len xs} ()
Type assignment
Simple Constraints
X4, length, xs C0 |- {Int|_v == X4 + 1} <: {Int|_v == len xs} ()
length, x20, xs C0 |- {Int|_v == x20 + 1} /\ {Int|_v == len xs} ()
Pred assignment
After process simple constraints
length, x20, xs C0 |- {Int|_v == x20 + 1} /\ {Int|_v == len xs} ()
X4, length, xs C0 |- {Int|_v == X4 + 1} <: {Int|_v == len xs} ()
Constraints
  False ==> _v == len xs
QMap
  C0 -> {}
Checking consistency
  C0 && (_v == x20 + 1 && (_v == len xs && len xs >= 0))
Candidates (1)
  0: [C0 -> {}] (1 0)
Remaining Candidates (1)
  0: [C0 -> {}] (1 0)
*******************Filling holes in inc
                                      (?? :: Int)
Looking for succinct type Int
INSTANTIATE x:Int -> {Int|_v == x - 1}
INTO x31:Int -> {Int|_v == x31 - 1}
Trying dec
Adding constraint length, xs C0 |- x31:Int -> {Int|_v == x31 - 1} <: X12:_ -> Int ()
Adding constraint length, xs C0 |- x31:Int -> {Int|_v == x31 - 1} /\ X12:_ -> Int ()
Adding constraint length, xs |- A11
Adding constraint length, xs |- A12
Adding constraint |- P3 :: List (A12) -> A11 -> Bool
INSTANTIATE <b> . <a> . <p :: List (a) -> b -> Bool> . f:(xs:List a -> x:a -> acc:{b|p xs _v} -> {b|p ((Cons x xs)) _v}) -> seed:{b|p (Nil) _v} -> ys:List a -> {b|p ys _v}
INTO x32:(x33:List A12 -> x34:A12 -> x35:{A11|P3 x33 _v} -> {A11|P3 ((Cons x34 x33)) _v}) -> x36:{A11|P3 (Nil) _v} -> x37:List A12 -> {A11|P3 x37 _v}
Trying foldr
Adding constraint length, xs C0 |- x32:(x33:List A12 -> x34:A12 -> x35:{A11|P3 x33 _v} -> {A11|P3 ((Cons x34 x33)) _v}) -> x36:{A11|P3 (Nil) _v} -> x37:List A12 -> {A11|P3 x37 _v} <: X15:_ -> X14:_ -> X13:_ -> Int ()
Adding constraint length, xs C0 |- x32:(x33:List A12 -> x34:A12 -> x35:{A11|P3 x33 _v} -> {A11|P3 ((Cons x34 x33)) _v}) -> x36:{A11|P3 (Nil) _v} -> x37:List A12 -> {A11|P3 x37 _v} /\ X15:_ -> X14:_ -> X13:_ -> Int ()
INSTANTIATE x:Int -> {Int|_v == x + 1}
INTO x38:Int -> {Int|_v == x38 + 1}
Trying inc
Adding constraint length, xs C0 |- x38:Int -> {Int|_v == x38 + 1} <: X16:_ -> Int ()
Adding constraint length, xs C0 |- x38:Int -> {Int|_v == x38 + 1} /\ X16:_ -> Int ()
Trying zero
Adding constraint length, xs C0 |- {Int|_v == zero} <: Int ()
Adding constraint length, xs |- A13
INSTANTIATE <a> . x0:{List a|len _v >= 0 && len _v < len xs} -> {Int|_v == len x0}
INTO x39:{List A13|len _v >= 0 && len _v < len xs} -> {Int|_v == len x39}
Adding constraint length, xs C0 |- x39:List A13 -> {Int|False} <: xs:{List {a|False}|False} -> Int ()
Trying length
Adding constraint length, xs C0 |- x39:{List A13|len _v >= 0 && len _v < len xs} -> {Int|_v == len x39} <: X17:_ -> Int ()
Adding constraint length, xs C0 |- x39:{List A13|len _v >= 0 && len _v < len xs} -> {Int|_v == len x39} /\ X17:_ -> Int ()
Score for inc
            zero is 100035.33333333333
Current queue size 10
Checking inc zero in
\xs . ??
Typing Constraints
length, xs C0 |- {Int|_v == zero} <: Int ()
Type assignment
Simple Constraints
length, xs C0 |- {Int|_v == zero} <: Int ()
Pred assignment
After process simple constraints
Constraints
QMap
  C0 -> {}
Checking consistency
Candidates (1)
  0: [C0 -> {}] (1 0)
Remaining Candidates (1)
  0: [C0 -> {}] (1 0)
Checking program inc zero
Checking inc
           zero :: {Int|_v == len xs} in
\xs . ??
Adding constraint length, xs C0 |- {Int|_v == zero + 1} <: {Int|_v == len xs} ()
Typing Constraints
length, xs C0 |- {Int|_v == zero + 1} <: {Int|_v == len xs} ()
Type assignment
Simple Constraints
length, xs C0 |- {Int|_v == zero + 1} <: {Int|_v == len xs} ()
Pred assignment
After process simple constraints
length, xs C0 |- {Int|_v == zero + 1} <: {Int|_v == len xs} ()
Constraints
  C0 && (_v == zero + 1 && (zero == 0 && len xs >= 0)) ==> _v == len xs
QMap
  C0 -> {}
Candidates (1)
  0: [C0 -> {}] (1 1)
Chosen candidate: 0: [C0 -> {}] (1 1)
Invalid Constraint: C0 && (_v == zero + 1 && (zero == 0 && len xs >= 0)) ==> _v == len xs
Strengthening: C0 && (_v == zero + 1 && (zero == 0 && len xs >= 0)) ==> _v == len xs
Instantiated axioms:
All assumptions:
_v == zero + 1, zero == 0, len xs >= 0
RHS: _v == len xs
assumption _v == zero + 1 && (zero == 0 && len xs >= 0)
mustHave !(_v == len xs)
qualsList []
Optimal valuations:
Pruned valuations:
Diffs: (0)
TYPE ERROR: Cannot find sufficiently strong refinements
when checking inc zero ::
{Int|_v == len xs} in
\xs . inc zero
Score for length
            (?? :: {List A7|len _v >= 0 && len _v < len xs}) is 37.333333333333336
Current queue size 9
Checking length
           (?? :: {List A7|len _v >= 0 && len _v < len xs}) in
\xs . ??
Typing Constraints
length, xs C0 |- x21:{List A7|len _v >= 0 && len _v < len xs} -> {Int|_v == len x21} /\ X5:_ -> {Int|_v == len xs} ()
length, xs C0 |- x21:{List A7|len _v >= 0 && len _v < len xs} -> {Int|_v == len x21} <: X5:_ -> {Int|_v == len xs} ()
length, xs C0 |- x21:List A7 -> {Int|False} <: xs:{List {a|False}|False} -> Int ()
length, xs |- A7
UNIFY A7 WITH {a|False} PRODUCING {a|U0}
Type assignment
A7 -> {a|U0}
Typing Constraints
Type assignment
A7 -> {a|U0}
Simple Constraints
length, xs |- {a|U0}
length, xs C0 |- {Int|False} <: Int ()
length, xs C0 |- {List|False} <: List ()
length, xs C0 |- {a|False} <: {a|U0} ()
X5, length, xs C0 |- {Int|_v == len X5} <: {Int|_v == len xs} ()
length, x21, xs C0 |- {Int|_v == len x21} /\ {Int|_v == len xs} ()
Pred assignment
After process simple constraints
length, x21, xs C0 |- {Int|_v == len x21} /\ {Int|_v == len xs} ()
X5, length, xs C0 |- {Int|_v == len X5} <: {Int|_v == len xs} ()
Constraints
  False ==> _v == len xs
QMap
  C0 -> {}
  U0 -> {}
Checking consistency
  C0 && (_v == len x21 && (_v == len xs && (len x21 >= 0 && (len xs >= 0 && (len x21 >= 0 && len x21 < len xs)))))
Candidates (1)
  0: [C0 -> {}, U0 -> {}] (1 0)
Remaining Candidates (0)
TYPE ERROR: Found inconsistent refinements
Score for dec (inc
                 (?? :: Int)) is 27.0
Current queue size 8
Checking dec (inc
                (?? :: Int)) in
\xs . ??
Typing Constraints
length, xs C0 |- x29:Int -> {Int|_v == x29 + 1} /\ X10:_ -> Int ()
length, xs C0 |- x29:Int -> {Int|_v == x29 + 1} <: X10:_ -> Int ()
Type assignment
Simple Constraints
X10, length, xs C0 |- {Int|_v == X10 + 1} <: Int ()
length, x29, xs C0 |- {Int|_v == x29 + 1} /\ Int ()
Pred assignment
After process simple constraints
Constraints
QMap
  C0 -> {}
Checking consistency
Candidates (1)
  0: [C0 -> {}] (1 0)
Remaining Candidates (1)
  0: [C0 -> {}] (1 0)
*******************Filling holes in dec
                                      (inc (?? :: Int))
Looking for succinct type Int
INSTANTIATE x:Int -> {Int|_v == x - 1}
INTO x40:Int -> {Int|_v == x40 - 1}
Trying dec
Adding constraint length, xs C0 |- x40:Int -> {Int|_v == x40 - 1} <: X18:_ -> Int ()
Adding constraint length, xs C0 |- x40:Int -> {Int|_v == x40 - 1} /\ X18:_ -> Int ()
Adding constraint length, xs |- A14
Adding constraint length, xs |- A15
Adding constraint |- P4 :: List (A15) -> A14 -> Bool
INSTANTIATE <b> . <a> . <p :: List (a) -> b -> Bool> . f:(xs:List a -> x:a -> acc:{b|p xs _v} -> {b|p ((Cons x xs)) _v}) -> seed:{b|p (Nil) _v} -> ys:List a -> {b|p ys _v}
INTO x41:(x42:List A15 -> x43:A15 -> x44:{A14|P4 x42 _v} -> {A14|P4 ((Cons x43 x42)) _v}) -> x45:{A14|P4 (Nil) _v} -> x46:List A15 -> {A14|P4 x46 _v}
Trying foldr
Adding constraint length, xs C0 |- x41:(x42:List A15 -> x43:A15 -> x44:{A14|P4 x42 _v} -> {A14|P4 ((Cons x43 x42)) _v}) -> x45:{A14|P4 (Nil) _v} -> x46:List A15 -> {A14|P4 x46 _v} <: X21:_ -> X20:_ -> X19:_ -> Int ()
Adding constraint length, xs C0 |- x41:(x42:List A15 -> x43:A15 -> x44:{A14|P4 x42 _v} -> {A14|P4 ((Cons x43 x42)) _v}) -> x45:{A14|P4 (Nil) _v} -> x46:List A15 -> {A14|P4 x46 _v} /\ X21:_ -> X20:_ -> X19:_ -> Int ()
INSTANTIATE x:Int -> {Int|_v == x + 1}
INTO x47:Int -> {Int|_v == x47 + 1}
Trying inc
Adding constraint length, xs C0 |- x47:Int -> {Int|_v == x47 + 1} <: X22:_ -> Int ()
Adding constraint length, xs C0 |- x47:Int -> {Int|_v == x47 + 1} /\ X22:_ -> Int ()
Trying zero
Adding constraint length, xs C0 |- {Int|_v == zero} <: Int ()
Adding constraint length, xs |- A16
INSTANTIATE <a> . x0:{List a|len _v >= 0 && len _v < len xs} -> {Int|_v == len x0}
INTO x48:{List A16|len _v >= 0 && len _v < len xs} -> {Int|_v == len x48}
Adding constraint length, xs C0 |- x48:List A16 -> {Int|False} <: xs:{List {a|False}|False} -> Int ()
Trying length
Adding constraint length, xs C0 |- x48:{List A16|len _v >= 0 && len _v < len xs} -> {Int|_v == len x48} <: X23:_ -> Int ()
Adding constraint length, xs C0 |- x48:{List A16|len _v >= 0 && len _v < len xs} -> {Int|_v == len x48} /\ X23:_ -> Int ()
Adding constraint length, xs C0 |- {Int|_v == zero + 1} <: Int ()
Score for dec (inc
                 zero) is 100024.0
Current queue size 12
Checking dec (inc zero) in
\xs . ??
Typing Constraints
length, xs C0 |- {Int|_v == zero + 1} <: Int ()
length, xs C0 |- {Int|_v == zero} <: Int ()
Type assignment
Simple Constraints
length, xs C0 |- {Int|_v == zero} <: Int ()
length, xs C0 |- {Int|_v == zero + 1} <: Int ()
Pred assignment
After process simple constraints
Constraints
QMap
  C0 -> {}
Checking consistency
Candidates (1)
  0: [C0 -> {}] (1 0)
Remaining Candidates (1)
  0: [C0 -> {}] (1 0)
Checking program dec (inc zero)
Checking dec (inc
                zero) :: {Int|_v == len xs} in
\xs . ??
Adding constraint length, xs C0 |- LET x13:({Int|_v == zero + 1}) IN {Int|_v == x13 - 1} <: {Int|_v == len xs} ()
Typing Constraints
length, xs C0 |- LET x13:({Int|_v == zero + 1}) IN {Int|_v == x13 - 1} <: {Int|_v == len xs} ()
Type assignment
Simple Constraints
length, x13, xs C0 |- {Int|_v == x13 - 1} <: {Int|_v == len xs} ()
Pred assignment
After process simple constraints
length, x13, xs C0 |- {Int|_v == x13 - 1} <: {Int|_v == len xs} ()
Constraints
  C0 && (_v == x13 - 1 && (x13 == zero + 1 && (zero == 0 && len xs >= 0))) ==> _v == len xs
QMap
  C0 -> {}
Candidates (1)
  0: [C0 -> {}] (1 1)
Chosen candidate: 0: [C0 -> {}] (1 1)
Invalid Constraint: C0 && (_v == x13 - 1 && (x13 == zero + 1 && (zero == 0 && len xs >= 0))) ==> _v == len xs
Strengthening: C0 && (_v == x13 - 1 && (x13 == zero + 1 && (zero == 0 && len xs >= 0))) ==> _v == len xs
Instantiated axioms:
All assumptions:
_v == x13 - 1, x13 == zero + 1, zero == 0, len xs >= 0
RHS: _v == len xs
assumption _v == x13 - 1 && (x13 == zero + 1 && (zero == 0 && len xs >= 0))
mustHave !(_v == len xs)
qualsList []
Optimal valuations:
Pruned valuations:
Diffs: (0)
TYPE ERROR: Cannot find sufficiently strong refinements
when checking dec (inc zero) ::
{Int|_v == len xs} in
\xs . dec (inc zero)
Score for inc (dec
                 (?? :: Int)) is 27.0
Current queue size 11
Checking inc (dec
                (?? :: Int)) in
\xs . ??
Typing Constraints
length, xs C0 |- x31:Int -> {Int|_v == x31 - 1} /\ X12:_ -> Int ()
length, xs C0 |- x31:Int -> {Int|_v == x31 - 1} <: X12:_ -> Int ()
Type assignment
Simple Constraints
X12, length, xs C0 |- {Int|_v == X12 - 1} <: Int ()
length, x31, xs C0 |- {Int|_v == x31 - 1} /\ Int ()
Pred assignment
After process simple constraints
Constraints
QMap
  C0 -> {}
Checking consistency
Candidates (1)
  0: [C0 -> {}] (1 0)
Remaining Candidates (1)
  0: [C0 -> {}] (1 0)
*******************Filling holes in inc
                                      (dec (?? :: Int))
Looking for succinct type Int
INSTANTIATE x:Int -> {Int|_v == x - 1}
INTO x49:Int -> {Int|_v == x49 - 1}
Trying dec
Adding constraint length, xs C0 |- x49:Int -> {Int|_v == x49 - 1} <: X24:_ -> Int ()
Adding constraint length, xs C0 |- x49:Int -> {Int|_v == x49 - 1} /\ X24:_ -> Int ()
Adding constraint length, xs |- A17
Adding constraint length, xs |- A18
Adding constraint |- P5 :: List (A18) -> A17 -> Bool
INSTANTIATE <b> . <a> . <p :: List (a) -> b -> Bool> . f:(xs:List a -> x:a -> acc:{b|p xs _v} -> {b|p ((Cons x xs)) _v}) -> seed:{b|p (Nil) _v} -> ys:List a -> {b|p ys _v}
INTO x50:(x51:List A18 -> x52:A18 -> x53:{A17|P5 x51 _v} -> {A17|P5 ((Cons x52 x51)) _v}) -> x54:{A17|P5 (Nil) _v} -> x55:List A18 -> {A17|P5 x55 _v}
Trying foldr
Adding constraint length, xs C0 |- x50:(x51:List A18 -> x52:A18 -> x53:{A17|P5 x51 _v} -> {A17|P5 ((Cons x52 x51)) _v}) -> x54:{A17|P5 (Nil) _v} -> x55:List A18 -> {A17|P5 x55 _v} <: X27:_ -> X26:_ -> X25:_ -> Int ()
Adding constraint length, xs C0 |- x50:(x51:List A18 -> x52:A18 -> x53:{A17|P5 x51 _v} -> {A17|P5 ((Cons x52 x51)) _v}) -> x54:{A17|P5 (Nil) _v} -> x55:List A18 -> {A17|P5 x55 _v} /\ X27:_ -> X26:_ -> X25:_ -> Int ()
INSTANTIATE x:Int -> {Int|_v == x + 1}
INTO x56:Int -> {Int|_v == x56 + 1}
Trying inc
Adding constraint length, xs C0 |- x56:Int -> {Int|_v == x56 + 1} <: X28:_ -> Int ()
Adding constraint length, xs C0 |- x56:Int -> {Int|_v == x56 + 1} /\ X28:_ -> Int ()
Trying zero
Adding constraint length, xs C0 |- {Int|_v == zero} <: Int ()
Adding constraint length, xs |- A19
INSTANTIATE <a> . x0:{List a|len _v >= 0 && len _v < len xs} -> {Int|_v == len x0}
INTO x57:{List A19|len _v >= 0 && len _v < len xs} -> {Int|_v == len x57}
Adding constraint length, xs C0 |- x57:List A19 -> {Int|False} <: xs:{List {a|False}|False} -> Int ()
Trying length
Adding constraint length, xs C0 |- x57:{List A19|len _v >= 0 && len _v < len xs} -> {Int|_v == len x57} <: X29:_ -> Int ()
Adding constraint length, xs C0 |- x57:{List A19|len _v >= 0 && len _v < len xs} -> {Int|_v == len x57} /\ X29:_ -> Int ()
Adding constraint length, xs C0 |- {Int|_v == zero - 1} <: Int ()
Score for inc (dec
                 zero) is 100024.0
Current queue size 15
Checking inc (dec zero) in
\xs . ??
Typing Constraints
length, xs C0 |- {Int|_v == zero - 1} <: Int ()
length, xs C0 |- {Int|_v == zero} <: Int ()
Type assignment
Simple Constraints
length, xs C0 |- {Int|_v == zero} <: Int ()
length, xs C0 |- {Int|_v == zero - 1} <: Int ()
Pred assignment
After process simple constraints
Constraints
QMap
  C0 -> {}
Checking consistency
Candidates (1)
  0: [C0 -> {}] (1 0)
Remaining Candidates (1)
  0: [C0 -> {}] (1 0)
Checking program inc (dec zero)
Checking inc (dec
                zero) :: {Int|_v == len xs} in
\xs . ??
Adding constraint length, xs C0 |- LET x20:({Int|_v == zero - 1}) IN {Int|_v == x20 + 1} <: {Int|_v == len xs} ()
Typing Constraints
length, xs C0 |- LET x20:({Int|_v == zero - 1}) IN {Int|_v == x20 + 1} <: {Int|_v == len xs} ()
Type assignment
Simple Constraints
length, x20, xs C0 |- {Int|_v == x20 + 1} <: {Int|_v == len xs} ()
Pred assignment
After process simple constraints
length, x20, xs C0 |- {Int|_v == x20 + 1} <: {Int|_v == len xs} ()
Constraints
  C0 && (_v == x20 + 1 && (x20 == zero - 1 && (zero == 0 && len xs >= 0))) ==> _v == len xs
QMap
  C0 -> {}
Candidates (1)
  0: [C0 -> {}] (1 1)
Chosen candidate: 0: [C0 -> {}] (1 1)
Invalid Constraint: C0 && (_v == x20 + 1 && (x20 == zero - 1 && (zero == 0 && len xs >= 0))) ==> _v == len xs
Strengthening: C0 && (_v == x20 + 1 && (x20 == zero - 1 && (zero == 0 && len xs >= 0))) ==> _v == len xs
Instantiated axioms:
All assumptions:
_v == x20 + 1, x20 == zero - 1, zero == 0, len xs >= 0
RHS: _v == len xs
assumption _v == x20 + 1 && (x20 == zero - 1 && (zero == 0 && len xs >= 0))
mustHave !(_v == len xs)
qualsList []
Optimal valuations:
Pruned valuations:
Diffs: (0)
TYPE ERROR: Cannot find sufficiently strong refinements
when checking inc (dec zero) ::
{Int|_v == len xs} in
\xs . inc (dec zero)
Score for dec (length
                 (?? :: {List A10|len _v >= 0 && len _v < len xs})) is 26.0
Current queue size 14
Checking dec (length
                (?? :: {List A10|len _v >= 0 && len _v < len xs})) in
\xs . ??
Typing Constraints
length, xs C0 |- x30:{List A10|len _v >= 0 && len _v < len xs} -> {Int|_v == len x30} /\ X11:_ -> Int ()
length, xs C0 |- x30:{List A10|len _v >= 0 && len _v < len xs} -> {Int|_v == len x30} <: X11:_ -> Int ()
length, xs C0 |- x30:List A10 -> {Int|False} <: xs:{List {a|False}|False} -> Int ()
length, xs |- A10
UNIFY A10 WITH {a|False} PRODUCING {a|U0}
Type assignment
A10 -> {a|U0}
Typing Constraints
Type assignment
A10 -> {a|U0}
Simple Constraints
length, xs |- {a|U0}
length, xs C0 |- {Int|False} <: Int ()
length, xs C0 |- {List|False} <: List ()
length, xs C0 |- {a|False} <: {a|U0} ()
X11, length, xs C0 |- {Int|_v == len X11} <: Int ()
length, x30, xs C0 |- {Int|_v == len x30} /\ Int ()
Pred assignment
After process simple constraints
Constraints
QMap
  C0 -> {}
  U0 -> {}
Checking consistency
Candidates (1)
  0: [C0 -> {}, U0 -> {}] (1 0)
Remaining Candidates (1)
  0: [C0 -> {}, U0 -> {}] (1 0)
*******************Filling holes in dec
                                      (length
                                         (?? :: {List A10|len _v >= 0 && len _v < len xs}))
Looking for succinct type {List |  | a, |  | }
Adding constraint length, xs |- A20
INSTANTIATE <a> . {List a|_v == (Nil)}
INTO {List {A20|False}|_v == (Nil)}
Trying Nil
Adding constraint length, xs C0 |- {List {A20|False}|_v == (Nil)} <: {List {a|U0}|len _v >= 0 && len _v < len xs} ()
Adding constraint length, xs |- A21
Adding constraint length, xs |- A22
Adding constraint |- P6 :: List (A22) -> A21 -> Bool
INSTANTIATE <b> . <a> . <p :: List (a) -> b -> Bool> . f:(xs:List a -> x:a -> acc:{b|p xs _v} -> {b|p ((Cons x xs)) _v}) -> seed:{b|p (Nil) _v} -> ys:List a -> {b|p ys _v}
INTO x58:(x59:List A22 -> x60:A22 -> x61:{A21|P6 x59 _v} -> {A21|P6 ((Cons x60 x59)) _v}) -> x62:{A21|P6 (Nil) _v} -> x63:List A22 -> {A21|P6 x63 _v}
Trying foldr
Adding constraint length, xs C0 |- x58:(x59:List A22 -> x60:A22 -> x61:{A21|P6 x59 _v} -> {A21|P6 ((Cons x60 x59)) _v}) -> x62:{A21|P6 (Nil) _v} -> x63:List A22 -> {A21|P6 x63 _v} <: X32:_ -> X31:_ -> X30:_ -> {List {a|U0}|len _v >= 0 && len _v < len xs} ()
Adding constraint length, xs C0 |- x58:(x59:List A22 -> x60:A22 -> x61:{A21|P6 x59 _v} -> {A21|P6 ((Cons x60 x59)) _v}) -> x62:{A21|P6 (Nil) _v} -> x63:List A22 -> {A21|P6 x63 _v} /\ X32:_ -> X31:_ -> X30:_ -> {List {a|U0}|len _v >= 0 && len _v < len xs} ()
Trying xs
Adding constraint length, xs C0 |- {List a|_v == xs} <: {List {a|U0}|len _v >= 0 && len _v < len xs} ()
Adding constraint length, xs C0 |- {Int|_v == len (Nil)} <: Int ()
Adding constraint length, xs C0 |- {Int|_v == len xs} <: Int ()
Score for dec (length
                 xs) is 100025.0
Current queue size 16
Checking dec (length xs) in
\xs . ??
Typing Constraints
length, xs C0 |- {Int|_v == len xs} <: Int ()
length, xs C0 |- {List a|_v == xs} <: {List {a|U0}|len _v >= 0 && len _v < len xs} ()
Type assignment
A10 -> {a|U0}
Simple Constraints
length, xs C0 |- {List|_v == xs} <: {List|len _v >= 0 && len _v < len xs} ()
length, xs C0 |- a <: {a|U0} ()
length, xs C0 |- {Int|_v == len xs} <: Int ()
Pred assignment
After process simple constraints
length, xs C0 |- a <: {a|U0} ()
length, xs C0 |- {List|_v == xs} <: {List|len _v >= 0 && len _v < len xs} ()
Constraints
  C0 && (_v == xs && len xs >= 0) ==> len _v >= 0 && len _v < len xs
  C0 ==> U0
QMap
  C0 -> {}
  U0 -> {}
Candidates (1)
  0: [C0 -> {}, U0 -> {}] (2 1)
Chosen candidate: 0: [C0 -> {}, U0 -> {}] (2 1)
Invalid Constraint: C0 && (_v == xs && len xs >= 0) ==> len _v >= 0 && len _v < len xs
Strengthening: C0 && (_v == xs && len xs >= 0) ==> len _v >= 0 && len _v < len xs
Instantiated axioms:
All assumptions:
_v == xs, len xs >= 0
RHS: len _v >= 0 && len _v < len xs
assumption _v == xs && len xs >= 0
mustHave !(len _v >= 0 && len _v < len xs)
qualsList []
Optimal valuations:
Pruned valuations:
Diffs: (0)
TYPE ERROR: Cannot find sufficiently strong refinements
Score for dec (length
                 Nil) is 100024.0
Current queue size 15
Checking dec (length Nil) in
\xs . ??
Typing Constraints
length, xs C0 |- {Int|_v == len (Nil)} <: Int ()
length, xs C0 |- {List {A20|False}|_v == (Nil)} <: {List {a|U0}|len _v >= 0 && len _v < len xs} ()
length, xs |- A20
UNIFY A20 WITH {a|U0} PRODUCING {a|U1}
Type assignment
A10 -> {a|U0}
A20 -> {a|U1}
Typing Constraints
Type assignment
A10 -> {a|U0}
A20 -> {a|U1}
Simple Constraints
length, xs |- {a|U1}
length, xs C0 |- {List|_v == (Nil)} <: {List|len _v >= 0 && len _v < len xs} ()
length, xs C0 |- {a|False} <: {a|U0} ()
length, xs C0 |- {Int|_v == len (Nil)} <: Int ()
Pred assignment
addSplitConstraint length, xs C0 |- {List|len _v == 0} <: {List|len _v < len xs && len _v >= 0} ()
After process simple constraints
length, xs C0 |- {List|len _v == 0} <: {List|len _v < len xs && len _v >= 0} ()
Constraints
  C0 && (len _v == 0 && len xs >= 0) ==> len _v < len xs && len _v >= 0
QMap
  C0 -> {}
  U0 -> {}
  U1 -> {}
Candidates (1)
  0: [C0 -> {}, U0 -> {}, U1 -> {}] (1 1)
Chosen candidate: 0: [C0 -> {}, U0 -> {}, U1 -> {}] (1 1)
Invalid Constraint: C0 && (len _v == 0 && len xs >= 0) ==> len _v < len xs && len _v >= 0
Strengthening: C0 && (len _v == 0 && len xs >= 0) ==> len _v < len xs && len _v >= 0
Instantiated axioms:
All assumptions:
len _v == 0, len xs >= 0
RHS: len _v < len xs && len _v >= 0
assumption len _v == 0 && len xs >= 0
mustHave !(len _v < len xs && len _v >= 0)
qualsList []
Optimal valuations:
Pruned valuations:
Diffs: (0)
TYPE ERROR: Cannot find sufficiently strong refinements
Score for inc (length
                 (?? :: {List A13|len _v >= 0 && len _v < len xs})) is 26.0
Current queue size 14
Checking inc (length
                (?? :: {List A13|len _v >= 0 && len _v < len xs})) in
\xs . ??
Typing Constraints
length, xs C0 |- x39:{List A13|len _v >= 0 && len _v < len xs} -> {Int|_v == len x39} /\ X17:_ -> Int ()
length, xs C0 |- x39:{List A13|len _v >= 0 && len _v < len xs} -> {Int|_v == len x39} <: X17:_ -> Int ()
length, xs C0 |- x39:List A13 -> {Int|False} <: xs:{List {a|False}|False} -> Int ()
length, xs |- A13
UNIFY A13 WITH {a|False} PRODUCING {a|U1}
Type assignment
A13 -> {a|U1}
Typing Constraints
Type assignment
A13 -> {a|U1}
Simple Constraints
length, xs |- {a|U1}
length, xs C0 |- {Int|False} <: Int ()
length, xs C0 |- {List|False} <: List ()
length, xs C0 |- {a|False} <: {a|U1} ()
X17, length, xs C0 |- {Int|_v == len X17} <: Int ()
length, x39, xs C0 |- {Int|_v == len x39} /\ Int ()
Pred assignment
After process simple constraints
Constraints
QMap
  C0 -> {}
  U1 -> {}
Checking consistency
Candidates (1)
  0: [C0 -> {}, U1 -> {}] (1 0)
Remaining Candidates (1)
  0: [C0 -> {}, U1 -> {}] (1 0)
*******************Filling holes in inc
                                      (length
                                         (?? :: {List A13|len _v >= 0 && len _v < len xs}))
Looking for succinct type {List |  | a, |  | }
Adding constraint length, xs |- A23
INSTANTIATE <a> . {List a|_v == (Nil)}
INTO {List {A23|False}|_v == (Nil)}
Trying Nil
Adding constraint length, xs C0 |- {List {A23|False}|_v == (Nil)} <: {List {a|U1}|len _v >= 0 && len _v < len xs} ()
Adding constraint length, xs |- A24
Adding constraint length, xs |- A25
Adding constraint |- P7 :: List (A25) -> A24 -> Bool
INSTANTIATE <b> . <a> . <p :: List (a) -> b -> Bool> . f:(xs:List a -> x:a -> acc:{b|p xs _v} -> {b|p ((Cons x xs)) _v}) -> seed:{b|p (Nil) _v} -> ys:List a -> {b|p ys _v}
INTO x64:(x65:List A25 -> x66:A25 -> x67:{A24|P7 x65 _v} -> {A24|P7 ((Cons x66 x65)) _v}) -> x68:{A24|P7 (Nil) _v} -> x69:List A25 -> {A24|P7 x69 _v}
Trying foldr
Adding constraint length, xs C0 |- x64:(x65:List A25 -> x66:A25 -> x67:{A24|P7 x65 _v} -> {A24|P7 ((Cons x66 x65)) _v}) -> x68:{A24|P7 (Nil) _v} -> x69:List A25 -> {A24|P7 x69 _v} <: X35:_ -> X34:_ -> X33:_ -> {List {a|U1}|len _v >= 0 && len _v < len xs} ()
Adding constraint length, xs C0 |- x64:(x65:List A25 -> x66:A25 -> x67:{A24|P7 x65 _v} -> {A24|P7 ((Cons x66 x65)) _v}) -> x68:{A24|P7 (Nil) _v} -> x69:List A25 -> {A24|P7 x69 _v} /\ X35:_ -> X34:_ -> X33:_ -> {List {a|U1}|len _v >= 0 && len _v < len xs} ()
Trying xs
Adding constraint length, xs C0 |- {List a|_v == xs} <: {List {a|U1}|len _v >= 0 && len _v < len xs} ()
Adding constraint length, xs C0 |- {Int|_v == len (Nil)} <: Int ()
Adding constraint length, xs C0 |- {Int|_v == len xs} <: Int ()
Score for inc (length
                 xs) is 100025.0
Current queue size 16
Checking inc (length xs) in
\xs . ??
Typing Constraints
length, xs C0 |- {Int|_v == len xs} <: Int ()
length, xs C0 |- {List a|_v == xs} <: {List {a|U1}|len _v >= 0 && len _v < len xs} ()
Type assignment
A13 -> {a|U1}
Simple Constraints
length, xs C0 |- {List|_v == xs} <: {List|len _v >= 0 && len _v < len xs} ()
length, xs C0 |- a <: {a|U1} ()
length, xs C0 |- {Int|_v == len xs} <: Int ()
Pred assignment
After process simple constraints
length, xs C0 |- a <: {a|U1} ()
length, xs C0 |- {List|_v == xs} <: {List|len _v >= 0 && len _v < len xs} ()
Constraints
  C0 && (_v == xs && len xs >= 0) ==> len _v >= 0 && len _v < len xs
  C0 ==> U1
QMap
  C0 -> {}
  U1 -> {}
Candidates (1)
  0: [C0 -> {}, U1 -> {}] (2 1)
Chosen candidate: 0: [C0 -> {}, U1 -> {}] (2 1)
Invalid Constraint: C0 && (_v == xs && len xs >= 0) ==> len _v >= 0 && len _v < len xs
Strengthening: C0 && (_v == xs && len xs >= 0) ==> len _v >= 0 && len _v < len xs
Instantiated axioms:
All assumptions:
_v == xs, len xs >= 0
RHS: len _v >= 0 && len _v < len xs
assumption _v == xs && len xs >= 0
mustHave !(len _v >= 0 && len _v < len xs)
qualsList []
Optimal valuations:
Pruned valuations:
Diffs: (0)
TYPE ERROR: Cannot find sufficiently strong refinements
Score for inc (length
                 Nil) is 100024.0
Current queue size 15
Checking inc (length Nil) in
\xs . ??
Typing Constraints
length, xs C0 |- {Int|_v == len (Nil)} <: Int ()
length, xs C0 |- {List {A23|False}|_v == (Nil)} <: {List {a|U1}|len _v >= 0 && len _v < len xs} ()
length, xs |- A23
UNIFY A23 WITH {a|U1} PRODUCING {a|U2}
Type assignment
A13 -> {a|U1}
A23 -> {a|U2}
Typing Constraints
Type assignment
A13 -> {a|U1}
A23 -> {a|U2}
Simple Constraints
length, xs |- {a|U2}
length, xs C0 |- {List|_v == (Nil)} <: {List|len _v >= 0 && len _v < len xs} ()
length, xs C0 |- {a|False} <: {a|U1} ()
length, xs C0 |- {Int|_v == len (Nil)} <: Int ()
Pred assignment
addSplitConstraint length, xs C0 |- {List|len _v == 0} <: {List|len _v < len xs && len _v >= 0} ()
After process simple constraints
length, xs C0 |- {List|len _v == 0} <: {List|len _v < len xs && len _v >= 0} ()
Constraints
  C0 && (len _v == 0 && len xs >= 0) ==> len _v < len xs && len _v >= 0
QMap
  C0 -> {}
  U1 -> {}
  U2 -> {}
Candidates (1)
  0: [C0 -> {}, U1 -> {}, U2 -> {}] (1 1)
Chosen candidate: 0: [C0 -> {}, U1 -> {}, U2 -> {}] (1 1)
Invalid Constraint: C0 && (len _v == 0 && len xs >= 0) ==> len _v < len xs && len _v >= 0
Strengthening: C0 && (len _v == 0 && len xs >= 0) ==> len _v < len xs && len _v >= 0
Instantiated axioms:
All assumptions:
len _v == 0, len xs >= 0
RHS: len _v < len xs && len _v >= 0
assumption len _v == 0 && len xs >= 0
mustHave !(len _v < len xs && len _v >= 0)
qualsList []
Optimal valuations:
Pruned valuations:
Diffs: (0)
TYPE ERROR: Cannot find sufficiently strong refinements
Score for dec (dec
                 (?? :: Int)) is 25.0
Current queue size 14
Checking dec (dec
                (?? :: Int)) in
\xs . ??
Typing Constraints
length, xs C0 |- x22:Int -> {Int|_v == x22 - 1} /\ X6:_ -> Int ()
length, xs C0 |- x22:Int -> {Int|_v == x22 - 1} <: X6:_ -> Int ()
Type assignment
Simple Constraints
X6, length, xs C0 |- {Int|_v == X6 - 1} <: Int ()
length, x22, xs C0 |- {Int|_v == x22 - 1} /\ Int ()
Pred assignment
After process simple constraints
Constraints
QMap
  C0 -> {}
Checking consistency
Candidates (1)
  0: [C0 -> {}] (1 0)
Remaining Candidates (1)
  0: [C0 -> {}] (1 0)
*******************Filling holes in dec
                                      (dec (?? :: Int))
Looking for succinct type Int
INSTANTIATE x:Int -> {Int|_v == x - 1}
INTO x70:Int -> {Int|_v == x70 - 1}
Trying dec
Adding constraint length, xs C0 |- x70:Int -> {Int|_v == x70 - 1} <: X36:_ -> Int ()
Adding constraint length, xs C0 |- x70:Int -> {Int|_v == x70 - 1} /\ X36:_ -> Int ()
INSTANTIATE x:Int -> {Int|_v == x + 1}
INTO x71:Int -> {Int|_v == x71 + 1}
Trying inc
Adding constraint length, xs C0 |- x71:Int -> {Int|_v == x71 + 1} <: X37:_ -> Int ()
Adding constraint length, xs C0 |- x71:Int -> {Int|_v == x71 + 1} /\ X37:_ -> Int ()
Trying zero
Adding constraint length, xs C0 |- {Int|_v == zero} <: Int ()
Adding constraint length, xs |- A26
Adding constraint length, xs |- A27
Adding constraint |- P8 :: List (A27) -> A26 -> Bool
INSTANTIATE <b> . <a> . <p :: List (a) -> b -> Bool> . f:(xs:List a -> x:a -> acc:{b|p xs _v} -> {b|p ((Cons x xs)) _v}) -> seed:{b|p (Nil) _v} -> ys:List a -> {b|p ys _v}
INTO x72:(x73:List A27 -> x74:A27 -> x75:{A26|P8 x73 _v} -> {A26|P8 ((Cons x74 x73)) _v}) -> x76:{A26|P8 (Nil) _v} -> x77:List A27 -> {A26|P8 x77 _v}
Trying foldr
Adding constraint length, xs C0 |- x72:(x73:List A27 -> x74:A27 -> x75:{A26|P8 x73 _v} -> {A26|P8 ((Cons x74 x73)) _v}) -> x76:{A26|P8 (Nil) _v} -> x77:List A27 -> {A26|P8 x77 _v} <: X40:_ -> X39:_ -> X38:_ -> Int ()
Adding constraint length, xs C0 |- x72:(x73:List A27 -> x74:A27 -> x75:{A26|P8 x73 _v} -> {A26|P8 ((Cons x74 x73)) _v}) -> x76:{A26|P8 (Nil) _v} -> x77:List A27 -> {A26|P8 x77 _v} /\ X40:_ -> X39:_ -> X38:_ -> Int ()
Adding constraint length, xs |- A28
INSTANTIATE <a> . x0:{List a|len _v >= 0 && len _v < len xs} -> {Int|_v == len x0}
INTO x78:{List A28|len _v >= 0 && len _v < len xs} -> {Int|_v == len x78}
Adding constraint length, xs C0 |- x78:List A28 -> {Int|False} <: xs:{List {a|False}|False} -> Int ()
Trying length
Adding constraint length, xs C0 |- x78:{List A28|len _v >= 0 && len _v < len xs} -> {Int|_v == len x78} <: X41:_ -> Int ()
Adding constraint length, xs C0 |- x78:{List A28|len _v >= 0 && len _v < len xs} -> {Int|_v == len x78} /\ X41:_ -> Int ()
Adding constraint length, xs C0 |- {Int|_v == zero - 1} <: Int ()
Score for dec (dec
                 zero) is 100022.0
Current queue size 18
Checking dec (dec zero) in
\xs . ??
Typing Constraints
length, xs C0 |- {Int|_v == zero - 1} <: Int ()
length, xs C0 |- {Int|_v == zero} <: Int ()
Type assignment
Simple Constraints
length, xs C0 |- {Int|_v == zero} <: Int ()
length, xs C0 |- {Int|_v == zero - 1} <: Int ()
Pred assignment
After process simple constraints
Constraints
QMap
  C0 -> {}
Checking consistency
Candidates (1)
  0: [C0 -> {}] (1 0)
Remaining Candidates (1)
  0: [C0 -> {}] (1 0)
Checking program dec (dec zero)
Checking dec (dec
                zero) :: {Int|_v == len xs} in
\xs . ??
Adding constraint length, xs C0 |- LET x13:({Int|_v == zero - 1}) IN {Int|_v == x13 - 1} <: {Int|_v == len xs} ()
Typing Constraints
length, xs C0 |- LET x13:({Int|_v == zero - 1}) IN {Int|_v == x13 - 1} <: {Int|_v == len xs} ()
Type assignment
Simple Constraints
length, x13, xs C0 |- {Int|_v == x13 - 1} <: {Int|_v == len xs} ()
Pred assignment
After process simple constraints
length, x13, xs C0 |- {Int|_v == x13 - 1} <: {Int|_v == len xs} ()
Constraints
  C0 && (_v == x13 - 1 && (x13 == zero - 1 && (zero == 0 && len xs >= 0))) ==> _v == len xs
QMap
  C0 -> {}
Candidates (1)
  0: [C0 -> {}] (1 1)
Chosen candidate: 0: [C0 -> {}] (1 1)
Invalid Constraint: C0 && (_v == x13 - 1 && (x13 == zero - 1 && (zero == 0 && len xs >= 0))) ==> _v == len xs
Strengthening: C0 && (_v == x13 - 1 && (x13 == zero - 1 && (zero == 0 && len xs >= 0))) ==> _v == len xs
Instantiated axioms:
All assumptions:
_v == x13 - 1, x13 == zero - 1, zero == 0, len xs >= 0
RHS: _v == len xs
assumption _v == x13 - 1 && (x13 == zero - 1 && (zero == 0 && len xs >= 0))
mustHave !(_v == len xs)
qualsList []
Optimal valuations:
Pruned valuations:
Diffs: (0)
TYPE ERROR: Cannot find sufficiently strong refinements
when checking dec (dec zero) ::
{Int|_v == len xs} in
\xs . dec (dec zero)
Score for inc (inc
                 (?? :: Int)) is 25.0
Current queue size 17
Checking inc (inc
                (?? :: Int)) in
\xs . ??
Typing Constraints
length, xs C0 |- x38:Int -> {Int|_v == x38 + 1} /\ X16:_ -> Int ()
length, xs C0 |- x38:Int -> {Int|_v == x38 + 1} <: X16:_ -> Int ()
Type assignment
Simple Constraints
X16, length, xs C0 |- {Int|_v == X16 + 1} <: Int ()
length, x38, xs C0 |- {Int|_v == x38 + 1} /\ Int ()
Pred assignment
After process simple constraints
Constraints
QMap
  C0 -> {}
Checking consistency
Candidates (1)
  0: [C0 -> {}] (1 0)
Remaining Candidates (1)
  0: [C0 -> {}] (1 0)
*******************Filling holes in inc
                                      (inc (?? :: Int))
Looking for succinct type Int
INSTANTIATE x:Int -> {Int|_v == x - 1}
INTO x79:Int -> {Int|_v == x79 - 1}
Trying dec
Adding constraint length, xs C0 |- x79:Int -> {Int|_v == x79 - 1} <: X42:_ -> Int ()
Adding constraint length, xs C0 |- x79:Int -> {Int|_v == x79 - 1} /\ X42:_ -> Int ()
INSTANTIATE x:Int -> {Int|_v == x + 1}
INTO x80:Int -> {Int|_v == x80 + 1}
Trying inc
Adding constraint length, xs C0 |- x80:Int -> {Int|_v == x80 + 1} <: X43:_ -> Int ()
Adding constraint length, xs C0 |- x80:Int -> {Int|_v == x80 + 1} /\ X43:_ -> Int ()
Trying zero
Adding constraint length, xs C0 |- {Int|_v == zero} <: Int ()
Adding constraint length, xs |- A29
Adding constraint length, xs |- A30
Adding constraint |- P9 :: List (A30) -> A29 -> Bool
INSTANTIATE <b> . <a> . <p :: List (a) -> b -> Bool> . f:(xs:List a -> x:a -> acc:{b|p xs _v} -> {b|p ((Cons x xs)) _v}) -> seed:{b|p (Nil) _v} -> ys:List a -> {b|p ys _v}
INTO x81:(x82:List A30 -> x83:A30 -> x84:{A29|P9 x82 _v} -> {A29|P9 ((Cons x83 x82)) _v}) -> x85:{A29|P9 (Nil) _v} -> x86:List A30 -> {A29|P9 x86 _v}
Trying foldr
Adding constraint length, xs C0 |- x81:(x82:List A30 -> x83:A30 -> x84:{A29|P9 x82 _v} -> {A29|P9 ((Cons x83 x82)) _v}) -> x85:{A29|P9 (Nil) _v} -> x86:List A30 -> {A29|P9 x86 _v} <: X46:_ -> X45:_ -> X44:_ -> Int ()
Adding constraint length, xs C0 |- x81:(x82:List A30 -> x83:A30 -> x84:{A29|P9 x82 _v} -> {A29|P9 ((Cons x83 x82)) _v}) -> x85:{A29|P9 (Nil) _v} -> x86:List A30 -> {A29|P9 x86 _v} /\ X46:_ -> X45:_ -> X44:_ -> Int ()
Adding constraint length, xs |- A31
INSTANTIATE <a> . x0:{List a|len _v >= 0 && len _v < len xs} -> {Int|_v == len x0}
INTO x87:{List A31|len _v >= 0 && len _v < len xs} -> {Int|_v == len x87}
Adding constraint length, xs C0 |- x87:List A31 -> {Int|False} <: xs:{List {a|False}|False} -> Int ()
Trying length
Adding constraint length, xs C0 |- x87:{List A31|len _v >= 0 && len _v < len xs} -> {Int|_v == len x87} <: X47:_ -> Int ()
Adding constraint length, xs C0 |- x87:{List A31|len _v >= 0 && len _v < len xs} -> {Int|_v == len x87} /\ X47:_ -> Int ()
Adding constraint length, xs C0 |- {Int|_v == zero + 1} <: Int ()
Score for inc (inc
                 zero) is 100022.0
Current queue size 21
Checking inc (inc zero) in
\xs . ??
Typing Constraints
length, xs C0 |- {Int|_v == zero + 1} <: Int ()
length, xs C0 |- {Int|_v == zero} <: Int ()
Type assignment
Simple Constraints
length, xs C0 |- {Int|_v == zero} <: Int ()
length, xs C0 |- {Int|_v == zero + 1} <: Int ()
Pred assignment
After process simple constraints
Constraints
QMap
  C0 -> {}
Checking consistency
Candidates (1)
  0: [C0 -> {}] (1 0)
Remaining Candidates (1)
  0: [C0 -> {}] (1 0)
Checking program inc (inc zero)
Checking inc (inc
                zero) :: {Int|_v == len xs} in
\xs . ??
Adding constraint length, xs C0 |- LET x20:({Int|_v == zero + 1}) IN {Int|_v == x20 + 1} <: {Int|_v == len xs} ()
Typing Constraints
length, xs C0 |- LET x20:({Int|_v == zero + 1}) IN {Int|_v == x20 + 1} <: {Int|_v == len xs} ()
Type assignment
Simple Constraints
length, x20, xs C0 |- {Int|_v == x20 + 1} <: {Int|_v == len xs} ()
Pred assignment
After process simple constraints
length, x20, xs C0 |- {Int|_v == x20 + 1} <: {Int|_v == len xs} ()
Constraints
  C0 && (_v == x20 + 1 && (x20 == zero + 1 && (zero == 0 && len xs >= 0))) ==> _v == len xs
QMap
  C0 -> {}
Candidates (1)
  0: [C0 -> {}] (1 1)
Chosen candidate: 0: [C0 -> {}] (1 1)
Invalid Constraint: C0 && (_v == x20 + 1 && (x20 == zero + 1 && (zero == 0 && len xs >= 0))) ==> _v == len xs
Strengthening: C0 && (_v == x20 + 1 && (x20 == zero + 1 && (zero == 0 && len xs >= 0))) ==> _v == len xs
Instantiated axioms:
All assumptions:
_v == x20 + 1, x20 == zero + 1, zero == 0, len xs >= 0
RHS: _v == len xs
assumption _v == x20 + 1 && (x20 == zero + 1 && (zero == 0 && len xs >= 0))
mustHave !(_v == len xs)
qualsList []
Optimal valuations:
Pruned valuations:
Diffs: (0)
TYPE ERROR: Cannot find sufficiently strong refinements
when checking inc (inc zero) ::
{Int|_v == len xs} in
\xs . inc (inc zero)
Score for dec (inc (length
                      (?? :: {List A16|len _v >= 0 && len _v < len xs}))) is 22.285714285714285
Current queue size 20
Checking dec (inc (length
                     (?? :: {List A16|len _v >= 0 && len _v < len xs}))) in
\xs . ??
Typing Constraints
length, xs C0 |- x48:{List A16|len _v >= 0 && len _v < len xs} -> {Int|_v == len x48} /\ X23:_ -> Int ()
length, xs C0 |- x48:{List A16|len _v >= 0 && len _v < len xs} -> {Int|_v == len x48} <: X23:_ -> Int ()
length, xs C0 |- x48:List A16 -> {Int|False} <: xs:{List {a|False}|False} -> Int ()
length, xs |- A16
UNIFY A16 WITH {a|False} PRODUCING {a|U2}
Type assignment
A16 -> {a|U2}
Typing Constraints
Type assignment
A16 -> {a|U2}
Simple Constraints
length, xs |- {a|U2}
length, xs C0 |- {Int|False} <: Int ()
length, xs C0 |- {List|False} <: List ()
length, xs C0 |- {a|False} <: {a|U2} ()
X23, length, xs C0 |- {Int|_v == len X23} <: Int ()
length, x48, xs C0 |- {Int|_v == len x48} /\ Int ()
Pred assignment
After process simple constraints
Constraints
QMap
  C0 -> {}
  U2 -> {}
Checking consistency
Candidates (1)
  0: [C0 -> {}, U2 -> {}] (1 0)
Remaining Candidates (1)
  0: [C0 -> {}, U2 -> {}] (1 0)
*******************Filling holes in dec
                                      (inc (length
                                              (?? :: {List A16|len _v >= 0 && len _v < len xs})))
Looking for succinct type {List |  | a, |  | }
Adding constraint length, xs |- A32
INSTANTIATE <a> . {List a|_v == (Nil)}
INTO {List {A32|False}|_v == (Nil)}
Trying Nil
Adding constraint length, xs C0 |- {List {A32|False}|_v == (Nil)} <: {List {a|U2}|len _v >= 0 && len _v < len xs} ()
Adding constraint length, xs |- A33
Adding constraint length, xs |- A34
Adding constraint |- P10 :: List (A34) -> A33 -> Bool
INSTANTIATE <b> . <a> . <p :: List (a) -> b -> Bool> . f:(xs:List a -> x:a -> acc:{b|p xs _v} -> {b|p ((Cons x xs)) _v}) -> seed:{b|p (Nil) _v} -> ys:List a -> {b|p ys _v}
INTO x88:(x89:List A34 -> x90:A34 -> x91:{A33|P10 x89 _v} -> {A33|P10 ((Cons x90 x89)) _v}) -> x92:{A33|P10 (Nil) _v} -> x93:List A34 -> {A33|P10 x93 _v}
Trying foldr
Adding constraint length, xs C0 |- x88:(x89:List A34 -> x90:A34 -> x91:{A33|P10 x89 _v} -> {A33|P10 ((Cons x90 x89)) _v}) -> x92:{A33|P10 (Nil) _v} -> x93:List A34 -> {A33|P10 x93 _v} <: X50:_ -> X49:_ -> X48:_ -> {List {a|U2}|len _v >= 0 && len _v < len xs} ()
Adding constraint length, xs C0 |- x88:(x89:List A34 -> x90:A34 -> x91:{A33|P10 x89 _v} -> {A33|P10 ((Cons x90 x89)) _v}) -> x92:{A33|P10 (Nil) _v} -> x93:List A34 -> {A33|P10 x93 _v} /\ X50:_ -> X49:_ -> X48:_ -> {List {a|U2}|len _v >= 0 && len _v < len xs} ()
Trying xs
Adding constraint length, xs C0 |- {List a|_v == xs} <: {List {a|U2}|len _v >= 0 && len _v < len xs} ()
Adding constraint length, xs C0 |- {Int|_v == len (Nil)} <: Int ()
Adding constraint length, xs C0 |- LET x29:({Int|_v == len (Nil)}) IN {Int|_v == x29 + 1} <: Int ()
Adding constraint length, xs C0 |- {Int|_v == len xs} <: Int ()
Adding constraint length, xs C0 |- LET x29:({Int|_v == len xs}) IN {Int|_v == x29 + 1} <: Int ()
Score for dec (inc (length
                      xs)) is 100021.28571428571
Current queue size 21
Checking dec (inc (length
                     xs)) in
\xs . ??
Typing Constraints
length, xs C0 |- LET x29:({Int|_v == len xs}) IN {Int|_v == x29 + 1} <: Int ()
length, xs C0 |- {Int|_v == len xs} <: Int ()
length, xs C0 |- {List a|_v == xs} <: {List {a|U2}|len _v >= 0 && len _v < len xs} ()
Type assignment
A16 -> {a|U2}
Simple Constraints
length, xs C0 |- {List|_v == xs} <: {List|len _v >= 0 && len _v < len xs} ()
length, xs C0 |- a <: {a|U2} ()
length, xs C0 |- {Int|_v == len xs} <: Int ()
length, x29, xs C0 |- {Int|_v == x29 + 1} <: Int ()
Pred assignment
After process simple constraints
length, xs C0 |- a <: {a|U2} ()
length, xs C0 |- {List|_v == xs} <: {List|len _v >= 0 && len _v < len xs} ()
Constraints
  C0 && (_v == xs && len xs >= 0) ==> len _v >= 0 && len _v < len xs
  C0 ==> U2
QMap
  C0 -> {}
  U2 -> {}
Candidates (1)
  0: [C0 -> {}, U2 -> {}] (2 1)
Chosen candidate: 0: [C0 -> {}, U2 -> {}] (2 1)
Invalid Constraint: C0 && (_v == xs && len xs >= 0) ==> len _v >= 0 && len _v < len xs
Strengthening: C0 && (_v == xs && len xs >= 0) ==> len _v >= 0 && len _v < len xs
Instantiated axioms:
All assumptions:
_v == xs, len xs >= 0
RHS: len _v >= 0 && len _v < len xs
assumption _v == xs && len xs >= 0
mustHave !(len _v >= 0 && len _v < len xs)
qualsList []
Optimal valuations:
Pruned valuations:
Diffs: (0)
TYPE ERROR: Cannot find sufficiently strong refinements
Score for dec (inc (length
                      Nil)) is 100020.28571428571
Current queue size 20
Checking dec (inc (length
                     Nil)) in
\xs . ??
Typing Constraints
length, xs C0 |- LET x29:({Int|_v == len (Nil)}) IN {Int|_v == x29 + 1} <: Int ()
length, xs C0 |- {Int|_v == len (Nil)} <: Int ()
length, xs C0 |- {List {A32|False}|_v == (Nil)} <: {List {a|U2}|len _v >= 0 && len _v < len xs} ()
length, xs |- A32
UNIFY A32 WITH {a|U2} PRODUCING {a|U3}
Type assignment
A16 -> {a|U2}
A32 -> {a|U3}
Typing Constraints
Type assignment
A16 -> {a|U2}
A32 -> {a|U3}
Simple Constraints
length, xs |- {a|U3}
length, xs C0 |- {List|_v == (Nil)} <: {List|len _v >= 0 && len _v < len xs} ()
length, xs C0 |- {a|False} <: {a|U2} ()
length, xs C0 |- {Int|_v == len (Nil)} <: Int ()
length, x29, xs C0 |- {Int|_v == x29 + 1} <: Int ()
Pred assignment
addSplitConstraint length, xs C0 |- {List|len _v == 0} <: {List|len _v < len xs && len _v >= 0} ()
After process simple constraints
length, xs C0 |- {List|len _v == 0} <: {List|len _v < len xs && len _v >= 0} ()
Constraints
  C0 && (len _v == 0 && len xs >= 0) ==> len _v < len xs && len _v >= 0
QMap
  C0 -> {}
  U2 -> {}
  U3 -> {}
Candidates (1)
  0: [C0 -> {}, U2 -> {}, U3 -> {}] (1 1)
Chosen candidate: 0: [C0 -> {}, U2 -> {}, U3 -> {}] (1 1)
Invalid Constraint: C0 && (len _v == 0 && len xs >= 0) ==> len _v < len xs && len _v >= 0
Strengthening: C0 && (len _v == 0 && len xs >= 0) ==> len _v < len xs && len _v >= 0
Instantiated axioms:
All assumptions:
len _v == 0, len xs >= 0
RHS: len _v < len xs && len _v >= 0
assumption len _v == 0 && len xs >= 0
mustHave !(len _v < len xs && len _v >= 0)
qualsList []
Optimal valuations:
Pruned valuations:
Diffs: (0)
TYPE ERROR: Cannot find sufficiently strong refinements
Score for inc (dec (length
                      (?? :: {List A19|len _v >= 0 && len _v < len xs}))) is 22.285714285714285
Current queue size 19
Checking inc (dec (length
                     (?? :: {List A19|len _v >= 0 && len _v < len xs}))) in
\xs . ??
Typing Constraints
length, xs C0 |- x57:{List A19|len _v >= 0 && len _v < len xs} -> {Int|_v == len x57} /\ X29:_ -> Int ()
length, xs C0 |- x57:{List A19|len _v >= 0 && len _v < len xs} -> {Int|_v == len x57} <: X29:_ -> Int ()
length, xs C0 |- x57:List A19 -> {Int|False} <: xs:{List {a|False}|False} -> Int ()
length, xs |- A19
UNIFY A19 WITH {a|False} PRODUCING {a|U3}
Type assignment
A19 -> {a|U3}
Typing Constraints
Type assignment
A19 -> {a|U3}
Simple Constraints
length, xs |- {a|U3}
length, xs C0 |- {Int|False} <: Int ()
length, xs C0 |- {List|False} <: List ()
length, xs C0 |- {a|False} <: {a|U3} ()
X29, length, xs C0 |- {Int|_v == len X29} <: Int ()
length, x57, xs C0 |- {Int|_v == len x57} /\ Int ()
Pred assignment
After process simple constraints
Constraints
QMap
  C0 -> {}
  U3 -> {}
Checking consistency
Candidates (1)
  0: [C0 -> {}, U3 -> {}] (1 0)
Remaining Candidates (1)
  0: [C0 -> {}, U3 -> {}] (1 0)
*******************Filling holes in inc
                                      (dec (length
                                              (?? :: {List A19|len _v >= 0 && len _v < len xs})))
Looking for succinct type {List |  | a, |  | }
Adding constraint length, xs |- A35
INSTANTIATE <a> . {List a|_v == (Nil)}
INTO {List {A35|False}|_v == (Nil)}
Trying Nil
Adding constraint length, xs C0 |- {List {A35|False}|_v == (Nil)} <: {List {a|U3}|len _v >= 0 && len _v < len xs} ()
Adding constraint length, xs |- A36
Adding constraint length, xs |- A37
Adding constraint |- P11 :: List (A37) -> A36 -> Bool
INSTANTIATE <b> . <a> . <p :: List (a) -> b -> Bool> . f:(xs:List a -> x:a -> acc:{b|p xs _v} -> {b|p ((Cons x xs)) _v}) -> seed:{b|p (Nil) _v} -> ys:List a -> {b|p ys _v}
INTO x94:(x95:List A37 -> x96:A37 -> x97:{A36|P11 x95 _v} -> {A36|P11 ((Cons x96 x95)) _v}) -> x98:{A36|P11 (Nil) _v} -> x99:List A37 -> {A36|P11 x99 _v}
Trying foldr
Adding constraint length, xs C0 |- x94:(x95:List A37 -> x96:A37 -> x97:{A36|P11 x95 _v} -> {A36|P11 ((Cons x96 x95)) _v}) -> x98:{A36|P11 (Nil) _v} -> x99:List A37 -> {A36|P11 x99 _v} <: X53:_ -> X52:_ -> X51:_ -> {List {a|U3}|len _v >= 0 && len _v < len xs} ()
Adding constraint length, xs C0 |- x94:(x95:List A37 -> x96:A37 -> x97:{A36|P11 x95 _v} -> {A36|P11 ((Cons x96 x95)) _v}) -> x98:{A36|P11 (Nil) _v} -> x99:List A37 -> {A36|P11 x99 _v} /\ X53:_ -> X52:_ -> X51:_ -> {List {a|U3}|len _v >= 0 && len _v < len xs} ()
Trying xs
Adding constraint length, xs C0 |- {List a|_v == xs} <: {List {a|U3}|len _v >= 0 && len _v < len xs} ()
Adding constraint length, xs C0 |- {Int|_v == len (Nil)} <: Int ()
Adding constraint length, xs C0 |- LET x31:({Int|_v == len (Nil)}) IN {Int|_v == x31 - 1} <: Int ()
Adding constraint length, xs C0 |- {Int|_v == len xs} <: Int ()
Adding constraint length, xs C0 |- LET x31:({Int|_v == len xs}) IN {Int|_v == x31 - 1} <: Int ()
Score for inc (dec (length
                      xs)) is 100021.28571428571
Current queue size 20
Checking inc (dec (length
                     xs)) in
\xs . ??
Typing Constraints
length, xs C0 |- LET x31:({Int|_v == len xs}) IN {Int|_v == x31 - 1} <: Int ()
length, xs C0 |- {Int|_v == len xs} <: Int ()
length, xs C0 |- {List a|_v == xs} <: {List {a|U3}|len _v >= 0 && len _v < len xs} ()
Type assignment
A19 -> {a|U3}
Simple Constraints
length, xs C0 |- {List|_v == xs} <: {List|len _v >= 0 && len _v < len xs} ()
length, xs C0 |- a <: {a|U3} ()
length, xs C0 |- {Int|_v == len xs} <: Int ()
length, x31, xs C0 |- {Int|_v == x31 - 1} <: Int ()
Pred assignment
After process simple constraints
length, xs C0 |- a <: {a|U3} ()
length, xs C0 |- {List|_v == xs} <: {List|len _v >= 0 && len _v < len xs} ()
Constraints
  C0 && (_v == xs && len xs >= 0) ==> len _v >= 0 && len _v < len xs
  C0 ==> U3
QMap
  C0 -> {}
  U3 -> {}
Candidates (1)
  0: [C0 -> {}, U3 -> {}] (2 1)
Chosen candidate: 0: [C0 -> {}, U3 -> {}] (2 1)
Invalid Constraint: C0 && (_v == xs && len xs >= 0) ==> len _v >= 0 && len _v < len xs
Strengthening: C0 && (_v == xs && len xs >= 0) ==> len _v >= 0 && len _v < len xs
Instantiated axioms:
All assumptions:
_v == xs, len xs >= 0
RHS: len _v >= 0 && len _v < len xs
assumption _v == xs && len xs >= 0
mustHave !(len _v >= 0 && len _v < len xs)
qualsList []
Optimal valuations:
Pruned valuations:
Diffs: (0)
TYPE ERROR: Cannot find sufficiently strong refinements
Score for inc (dec (length
                      Nil)) is 100020.28571428571
Current queue size 19
Checking inc (dec (length
                     Nil)) in
\xs . ??
Typing Constraints
length, xs C0 |- LET x31:({Int|_v == len (Nil)}) IN {Int|_v == x31 - 1} <: Int ()
length, xs C0 |- {Int|_v == len (Nil)} <: Int ()
length, xs C0 |- {List {A35|False}|_v == (Nil)} <: {List {a|U3}|len _v >= 0 && len _v < len xs} ()
length, xs |- A35
UNIFY A35 WITH {a|U3} PRODUCING {a|U4}
Type assignment
A19 -> {a|U3}
A35 -> {a|U4}
Typing Constraints
Type assignment
A19 -> {a|U3}
A35 -> {a|U4}
Simple Constraints
length, xs |- {a|U4}
length, xs C0 |- {List|_v == (Nil)} <: {List|len _v >= 0 && len _v < len xs} ()
length, xs C0 |- {a|False} <: {a|U3} ()
length, xs C0 |- {Int|_v == len (Nil)} <: Int ()
length, x31, xs C0 |- {Int|_v == x31 - 1} <: Int ()
Pred assignment
addSplitConstraint length, xs C0 |- {List|len _v == 0} <: {List|len _v < len xs && len _v >= 0} ()
After process simple constraints
length, xs C0 |- {List|len _v == 0} <: {List|len _v < len xs && len _v >= 0} ()
Constraints
  C0 && (len _v == 0 && len xs >= 0) ==> len _v < len xs && len _v >= 0
QMap
  C0 -> {}
  U3 -> {}
  U4 -> {}
Candidates (1)
  0: [C0 -> {}, U3 -> {}, U4 -> {}] (1 1)
Chosen candidate: 0: [C0 -> {}, U3 -> {}, U4 -> {}] (1 1)
Invalid Constraint: C0 && (len _v == 0 && len xs >= 0) ==> len _v < len xs && len _v >= 0
Strengthening: C0 && (len _v == 0 && len xs >= 0) ==> len _v < len xs && len _v >= 0
Instantiated axioms:
All assumptions:
len _v == 0, len xs >= 0
RHS: len _v < len xs && len _v >= 0
assumption len _v == 0 && len xs >= 0
mustHave !(len _v < len xs && len _v >= 0)
qualsList []
Optimal valuations:
Pruned valuations:
Diffs: (0)
TYPE ERROR: Cannot find sufficiently strong refinements
Score for dec (inc (dec
                      (?? :: Int))) is 21.285714285714285
Current queue size 18
Checking dec (inc (dec
                     (?? :: Int))) in
\xs . ??
Typing Constraints
length, xs C0 |- x40:Int -> {Int|_v == x40 - 1} /\ X18:_ -> Int ()
length, xs C0 |- x40:Int -> {Int|_v == x40 - 1} <: X18:_ -> Int ()
Type assignment
Simple Constraints
X18, length, xs C0 |- {Int|_v == X18 - 1} <: Int ()
length, x40, xs C0 |- {Int|_v == x40 - 1} /\ Int ()
Pred assignment
After process simple constraints
Constraints
QMap
  C0 -> {}
Checking consistency
Candidates (1)
  0: [C0 -> {}] (1 0)
Remaining Candidates (1)
  0: [C0 -> {}] (1 0)
*******************Filling holes in dec
                                      (inc (dec (?? :: Int)))
Looking for succinct type Int
INSTANTIATE x:Int -> {Int|_v == x - 1}
INTO x100:Int -> {Int|_v == x100 - 1}
Trying dec
Adding constraint length, xs C0 |- x100:Int -> {Int|_v == x100 - 1} <: X54:_ -> Int ()
Adding constraint length, xs C0 |- x100:Int -> {Int|_v == x100 - 1} /\ X54:_ -> Int ()
INSTANTIATE x:Int -> {Int|_v == x + 1}
INTO x101:Int -> {Int|_v == x101 + 1}
Trying inc
Adding constraint length, xs C0 |- x101:Int -> {Int|_v == x101 + 1} <: X55:_ -> Int ()
Adding constraint length, xs C0 |- x101:Int -> {Int|_v == x101 + 1} /\ X55:_ -> Int ()
Trying zero
Adding constraint length, xs C0 |- {Int|_v == zero} <: Int ()
Adding constraint length, xs |- A38
Adding constraint length, xs |- A39
Adding constraint |- P12 :: List (A39) -> A38 -> Bool
INSTANTIATE <b> . <a> . <p :: List (a) -> b -> Bool> . f:(xs:List a -> x:a -> acc:{b|p xs _v} -> {b|p ((Cons x xs)) _v}) -> seed:{b|p (Nil) _v} -> ys:List a -> {b|p ys _v}
INTO x102:(x103:List A39 -> x104:A39 -> x105:{A38|P12 x103 _v} -> {A38|P12 ((Cons x104 x103)) _v}) -> x106:{A38|P12 (Nil) _v} -> x107:List A39 -> {A38|P12 x107 _v}
Trying foldr
Adding constraint length, xs C0 |- x102:(x103:List A39 -> x104:A39 -> x105:{A38|P12 x103 _v} -> {A38|P12 ((Cons x104 x103)) _v}) -> x106:{A38|P12 (Nil) _v} -> x107:List A39 -> {A38|P12 x107 _v} <: X58:_ -> X57:_ -> X56:_ -> Int ()
Adding constraint length, xs C0 |- x102:(x103:List A39 -> x104:A39 -> x105:{A38|P12 x103 _v} -> {A38|P12 ((Cons x104 x103)) _v}) -> x106:{A38|P12 (Nil) _v} -> x107:List A39 -> {A38|P12 x107 _v} /\ X58:_ -> X57:_ -> X56:_ -> Int ()
Adding constraint length, xs |- A40
INSTANTIATE <a> . x0:{List a|len _v >= 0 && len _v < len xs} -> {Int|_v == len x0}
INTO x108:{List A40|len _v >= 0 && len _v < len xs} -> {Int|_v == len x108}
Adding constraint length, xs C0 |- x108:List A40 -> {Int|False} <: xs:{List {a|False}|False} -> Int ()
Trying length
Adding constraint length, xs C0 |- x108:{List A40|len _v >= 0 && len _v < len xs} -> {Int|_v == len x108} <: X59:_ -> Int ()
Adding constraint length, xs C0 |- x108:{List A40|len _v >= 0 && len _v < len xs} -> {Int|_v == len x108} /\ X59:_ -> Int ()
Adding constraint length, xs C0 |- {Int|_v == zero - 1} <: Int ()
Adding constraint length, xs C0 |- LET x29:({Int|_v == zero - 1}) IN {Int|_v == x29 + 1} <: Int ()
Score for dec (inc (dec
                      zero)) is 100018.28571428571
Current queue size 18
Checking dec (inc (dec zero)) in
\xs . ??
Typing Constraints
length, xs C0 |- LET x29:({Int|_v == zero - 1}) IN {Int|_v == x29 + 1} <: Int ()
length, xs C0 |- {Int|_v == zero - 1} <: Int ()
length, xs C0 |- {Int|_v == zero} <: Int ()
Type assignment
Simple Constraints
length, xs C0 |- {Int|_v == zero} <: Int ()
length, xs C0 |- {Int|_v == zero - 1} <: Int ()
length, x29, xs C0 |- {Int|_v == x29 + 1} <: Int ()
Pred assignment
After process simple constraints
Constraints
QMap
  C0 -> {}
Checking consistency
Candidates (1)
  0: [C0 -> {}] (1 0)
Remaining Candidates (1)
  0: [C0 -> {}] (1 0)
Checking program dec (inc (dec
                             zero))
Checking dec (inc (dec
                     zero)) :: {Int|_v == len xs} in
\xs . ??
Adding constraint length, xs C0 |- LET x13:(LET x29:({Int|_v == zero - 1}) IN {Int|_v == x29 + 1}) IN {Int|_v == x13 - 1} <: {Int|_v == len xs} ()
Typing Constraints
length, xs C0 |- LET x13:(LET x29:({Int|_v == zero - 1}) IN {Int|_v == x29 + 1}) IN {Int|_v == x13 - 1} <: {Int|_v == len xs} ()
Type assignment
Simple Constraints
length, x13, xs C0 |- {Int|_v == x13 - 1} <: {Int|_v == len xs} ()
Pred assignment
After process simple constraints
length, x13, xs C0 |- {Int|_v == x13 - 1} <: {Int|_v == len xs} ()
Constraints
  C0 && (_v == x13 - 1 && (x13 == x29 + 1 && (x29 == zero - 1 && (zero == 0 && len xs >= 0)))) ==> _v == len xs
QMap
  C0 -> {}
Candidates (1)
  0: [C0 -> {}] (1 1)
Chosen candidate: 0: [C0 -> {}] (1 1)
Invalid Constraint: C0 && (_v == x13 - 1 && (x13 == x29 + 1 && (x29 == zero - 1 && (zero == 0 && len xs >= 0)))) ==> _v == len xs
Strengthening: C0 && (_v == x13 - 1 && (x13 == x29 + 1 && (x29 == zero - 1 && (zero == 0 && len xs >= 0)))) ==> _v == len xs
Instantiated axioms:
All assumptions:
_v == x13 - 1, x13 == x29 + 1, x29 == zero - 1, zero == 0, len xs >= 0
RHS: _v == len xs
assumption _v == x13 - 1 && (x13 == x29 + 1 && (x29 == zero - 1 && (zero == 0 && len xs >= 0)))
mustHave !(_v == len xs)
qualsList []
Optimal valuations:
Pruned valuations:
Diffs: (0)
TYPE ERROR: Cannot find sufficiently strong refinements
when checking dec (inc (dec
                          zero)) :: {Int|_v == len xs} in
\xs . dec (inc (dec zero))
Score for dec (inc (inc
                      (?? :: Int))) is 21.285714285714285
Current queue size 17
Checking dec (inc (inc
                     (?? :: Int))) in
\xs . ??
Typing Constraints
length, xs C0 |- x47:Int -> {Int|_v == x47 + 1} /\ X22:_ -> Int ()
length, xs C0 |- x47:Int -> {Int|_v == x47 + 1} <: X22:_ -> Int ()
Type assignment
Simple Constraints
X22, length, xs C0 |- {Int|_v == X22 + 1} <: Int ()
length, x47, xs C0 |- {Int|_v == x47 + 1} /\ Int ()
Pred assignment
After process simple constraints
Constraints
QMap
  C0 -> {}
Checking consistency
Candidates (1)
  0: [C0 -> {}] (1 0)
Remaining Candidates (1)
  0: [C0 -> {}] (1 0)
*******************Filling holes in dec
                                      (inc (inc (?? :: Int)))
Looking for succinct type Int
INSTANTIATE x:Int -> {Int|_v == x - 1}
INTO x109:Int -> {Int|_v == x109 - 1}
Trying dec
Adding constraint length, xs C0 |- x109:Int -> {Int|_v == x109 - 1} <: X60:_ -> Int ()
Adding constraint length, xs C0 |- x109:Int -> {Int|_v == x109 - 1} /\ X60:_ -> Int ()
INSTANTIATE x:Int -> {Int|_v == x + 1}
INTO x110:Int -> {Int|_v == x110 + 1}
Trying inc
Adding constraint length, xs C0 |- x110:Int -> {Int|_v == x110 + 1} <: X61:_ -> Int ()
Adding constraint length, xs C0 |- x110:Int -> {Int|_v == x110 + 1} /\ X61:_ -> Int ()
Trying zero
Adding constraint length, xs C0 |- {Int|_v == zero} <: Int ()
Adding constraint length, xs |- A41
Adding constraint length, xs |- A42
Adding constraint |- P13 :: List (A42) -> A41 -> Bool
INSTANTIATE <b> . <a> . <p :: List (a) -> b -> Bool> . f:(xs:List a -> x:a -> acc:{b|p xs _v} -> {b|p ((Cons x xs)) _v}) -> seed:{b|p (Nil) _v} -> ys:List a -> {b|p ys _v}
INTO x111:(x112:List A42 -> x113:A42 -> x114:{A41|P13 x112 _v} -> {A41|P13 ((Cons x113 x112)) _v}) -> x115:{A41|P13 (Nil) _v} -> x116:List A42 -> {A41|P13 x116 _v}
Trying foldr
Adding constraint length, xs C0 |- x111:(x112:List A42 -> x113:A42 -> x114:{A41|P13 x112 _v} -> {A41|P13 ((Cons x113 x112)) _v}) -> x115:{A41|P13 (Nil) _v} -> x116:List A42 -> {A41|P13 x116 _v} <: X64:_ -> X63:_ -> X62:_ -> Int ()
Adding constraint length, xs C0 |- x111:(x112:List A42 -> x113:A42 -> x114:{A41|P13 x112 _v} -> {A41|P13 ((Cons x113 x112)) _v}) -> x115:{A41|P13 (Nil) _v} -> x116:List A42 -> {A41|P13 x116 _v} /\ X64:_ -> X63:_ -> X62:_ -> Int ()
Adding constraint length, xs |- A43
INSTANTIATE <a> . x0:{List a|len _v >= 0 && len _v < len xs} -> {Int|_v == len x0}
INTO x117:{List A43|len _v >= 0 && len _v < len xs} -> {Int|_v == len x117}
Adding constraint length, xs C0 |- x117:List A43 -> {Int|False} <: xs:{List {a|False}|False} -> Int ()
Trying length
Adding constraint length, xs C0 |- x117:{List A43|len _v >= 0 && len _v < len xs} -> {Int|_v == len x117} <: X65:_ -> Int ()
Adding constraint length, xs C0 |- x117:{List A43|len _v >= 0 && len _v < len xs} -> {Int|_v == len x117} /\ X65:_ -> Int ()
Adding constraint length, xs C0 |- {Int|_v == zero + 1} <: Int ()
Adding constraint length, xs C0 |- LET x29:({Int|_v == zero + 1}) IN {Int|_v == x29 + 1} <: Int ()
Score for dec (inc (inc
                      zero)) is 100018.28571428571
Current queue size 17
Checking dec (inc (inc zero)) in
\xs . ??
Typing Constraints
length, xs C0 |- LET x29:({Int|_v == zero + 1}) IN {Int|_v == x29 + 1} <: Int ()
length, xs C0 |- {Int|_v == zero + 1} <: Int ()
length, xs C0 |- {Int|_v == zero} <: Int ()
Type assignment
Simple Constraints
length, xs C0 |- {Int|_v == zero} <: Int ()
length, xs C0 |- {Int|_v == zero + 1} <: Int ()
length, x29, xs C0 |- {Int|_v == x29 + 1} <: Int ()
Pred assignment
After process simple constraints
Constraints
QMap
  C0 -> {}
Checking consistency
Candidates (1)
  0: [C0 -> {}] (1 0)
Remaining Candidates (1)
  0: [C0 -> {}] (1 0)
Checking program dec (inc (inc
                             zero))
Checking dec (inc (inc
                     zero)) :: {Int|_v == len xs} in
\xs . ??
Adding constraint length, xs C0 |- LET x13:(LET x29:({Int|_v == zero + 1}) IN {Int|_v == x29 + 1}) IN {Int|_v == x13 - 1} <: {Int|_v == len xs} ()
Typing Constraints
length, xs C0 |- LET x13:(LET x29:({Int|_v == zero + 1}) IN {Int|_v == x29 + 1}) IN {Int|_v == x13 - 1} <: {Int|_v == len xs} ()
Type assignment
Simple Constraints
length, x13, xs C0 |- {Int|_v == x13 - 1} <: {Int|_v == len xs} ()
Pred assignment
After process simple constraints
length, x13, xs C0 |- {Int|_v == x13 - 1} <: {Int|_v == len xs} ()
Constraints
  C0 && (_v == x13 - 1 && (x13 == x29 + 1 && (x29 == zero + 1 && (zero == 0 && len xs >= 0)))) ==> _v == len xs
QMap
  C0 -> {}
Candidates (1)
  0: [C0 -> {}] (1 1)
Chosen candidate: 0: [C0 -> {}] (1 1)
Invalid Constraint: C0 && (_v == x13 - 1 && (x13 == x29 + 1 && (x29 == zero + 1 && (zero == 0 && len xs >= 0)))) ==> _v == len xs
Strengthening: C0 && (_v == x13 - 1 && (x13 == x29 + 1 && (x29 == zero + 1 && (zero == 0 && len xs >= 0)))) ==> _v == len xs
Instantiated axioms:
All assumptions:
_v == x13 - 1, x13 == x29 + 1, x29 == zero + 1, zero == 0, len xs >= 0
RHS: _v == len xs
assumption _v == x13 - 1 && (x13 == x29 + 1 && (x29 == zero + 1 && (zero == 0 && len xs >= 0)))
mustHave !(_v == len xs)
qualsList []
Optimal valuations:
Pruned valuations:
Diffs: (0)
TYPE ERROR: Cannot find sufficiently strong refinements
when checking dec (inc (inc
                          zero)) :: {Int|_v == len xs} in
\xs . dec (inc (inc zero))
Score for inc (dec (dec
                      (?? :: Int))) is 21.285714285714285
Current queue size 16
Checking inc (dec (dec
                     (?? :: Int))) in
\xs . ??
Typing Constraints
length, xs C0 |- x49:Int -> {Int|_v == x49 - 1} /\ X24:_ -> Int ()
length, xs C0 |- x49:Int -> {Int|_v == x49 - 1} <: X24:_ -> Int ()
Type assignment
Simple Constraints
X24, length, xs C0 |- {Int|_v == X24 - 1} <: Int ()
length, x49, xs C0 |- {Int|_v == x49 - 1} /\ Int ()
Pred assignment
After process simple constraints
Constraints
QMap
  C0 -> {}
Checking consistency
Candidates (1)
  0: [C0 -> {}] (1 0)
Remaining Candidates (1)
  0: [C0 -> {}] (1 0)
*******************Filling holes in inc
                                      (dec (dec (?? :: Int)))
Looking for succinct type Int
INSTANTIATE x:Int -> {Int|_v == x - 1}
INTO x118:Int -> {Int|_v == x118 - 1}
Trying dec
Adding constraint length, xs C0 |- x118:Int -> {Int|_v == x118 - 1} <: X66:_ -> Int ()
Adding constraint length, xs C0 |- x118:Int -> {Int|_v == x118 - 1} /\ X66:_ -> Int ()
INSTANTIATE x:Int -> {Int|_v == x + 1}
INTO x119:Int -> {Int|_v == x119 + 1}
Trying inc
Adding constraint length, xs C0 |- x119:Int -> {Int|_v == x119 + 1} <: X67:_ -> Int ()
Adding constraint length, xs C0 |- x119:Int -> {Int|_v == x119 + 1} /\ X67:_ -> Int ()
Trying zero
Adding constraint length, xs C0 |- {Int|_v == zero} <: Int ()
Adding constraint length, xs |- A44
Adding constraint length, xs |- A45
Adding constraint |- P14 :: List (A45) -> A44 -> Bool
INSTANTIATE <b> . <a> . <p :: List (a) -> b -> Bool> . f:(xs:List a -> x:a -> acc:{b|p xs _v} -> {b|p ((Cons x xs)) _v}) -> seed:{b|p (Nil) _v} -> ys:List a -> {b|p ys _v}
INTO x120:(x121:List A45 -> x122:A45 -> x123:{A44|P14 x121 _v} -> {A44|P14 ((Cons x122 x121)) _v}) -> x124:{A44|P14 (Nil) _v} -> x125:List A45 -> {A44|P14 x125 _v}
Trying foldr
Adding constraint length, xs C0 |- x120:(x121:List A45 -> x122:A45 -> x123:{A44|P14 x121 _v} -> {A44|P14 ((Cons x122 x121)) _v}) -> x124:{A44|P14 (Nil) _v} -> x125:List A45 -> {A44|P14 x125 _v} <: X70:_ -> X69:_ -> X68:_ -> Int ()
Adding constraint length, xs C0 |- x120:(x121:List A45 -> x122:A45 -> x123:{A44|P14 x121 _v} -> {A44|P14 ((Cons x122 x121)) _v}) -> x124:{A44|P14 (Nil) _v} -> x125:List A45 -> {A44|P14 x125 _v} /\ X70:_ -> X69:_ -> X68:_ -> Int ()
Adding constraint length, xs |- A46
INSTANTIATE <a> . x0:{List a|len _v >= 0 && len _v < len xs} -> {Int|_v == len x0}
INTO x126:{List A46|len _v >= 0 && len _v < len xs} -> {Int|_v == len x126}
Adding constraint length, xs C0 |- x126:List A46 -> {Int|False} <: xs:{List {a|False}|False} -> Int ()
Trying length
Adding constraint length, xs C0 |- x126:{List A46|len _v >= 0 && len _v < len xs} -> {Int|_v == len x126} <: X71:_ -> Int ()
Adding constraint length, xs C0 |- x126:{List A46|len _v >= 0 && len _v < len xs} -> {Int|_v == len x126} /\ X71:_ -> Int ()
Adding constraint length, xs C0 |- {Int|_v == zero - 1} <: Int ()
Adding constraint length, xs C0 |- LET x31:({Int|_v == zero - 1}) IN {Int|_v == x31 - 1} <: Int ()
Score for inc (dec (dec
                      zero)) is 100018.28571428571
Current queue size 16
Checking inc (dec (dec zero)) in
\xs . ??
Typing Constraints
length, xs C0 |- LET x31:({Int|_v == zero - 1}) IN {Int|_v == x31 - 1} <: Int ()
length, xs C0 |- {Int|_v == zero - 1} <: Int ()
length, xs C0 |- {Int|_v == zero} <: Int ()
Type assignment
Simple Constraints
length, xs C0 |- {Int|_v == zero} <: Int ()
length, xs C0 |- {Int|_v == zero - 1} <: Int ()
length, x31, xs C0 |- {Int|_v == x31 - 1} <: Int ()
Pred assignment
After process simple constraints
Constraints
QMap
  C0 -> {}
Checking consistency
Candidates (1)
  0: [C0 -> {}] (1 0)
Remaining Candidates (1)
  0: [C0 -> {}] (1 0)
Checking program inc (dec (dec
                             zero))
Checking inc (dec (dec
                     zero)) :: {Int|_v == len xs} in
\xs . ??
Adding constraint length, xs C0 |- LET x20:(LET x31:({Int|_v == zero - 1}) IN {Int|_v == x31 - 1}) IN {Int|_v == x20 + 1} <: {Int|_v == len xs} ()
Typing Constraints
length, xs C0 |- LET x20:(LET x31:({Int|_v == zero - 1}) IN {Int|_v == x31 - 1}) IN {Int|_v == x20 + 1} <: {Int|_v == len xs} ()
Type assignment
Simple Constraints
length, x20, xs C0 |- {Int|_v == x20 + 1} <: {Int|_v == len xs} ()
Pred assignment
After process simple constraints
length, x20, xs C0 |- {Int|_v == x20 + 1} <: {Int|_v == len xs} ()
Constraints
  C0 && (_v == x20 + 1 && (x20 == x31 - 1 && (x31 == zero - 1 && (zero == 0 && len xs >= 0)))) ==> _v == len xs
QMap
  C0 -> {}
Candidates (1)
  0: [C0 -> {}] (1 1)
Chosen candidate: 0: [C0 -> {}] (1 1)
Invalid Constraint: C0 && (_v == x20 + 1 && (x20 == x31 - 1 && (x31 == zero - 1 && (zero == 0 && len xs >= 0)))) ==> _v == len xs
Strengthening: C0 && (_v == x20 + 1 && (x20 == x31 - 1 && (x31 == zero - 1 && (zero == 0 && len xs >= 0)))) ==> _v == len xs
Instantiated axioms:
All assumptions:
_v == x20 + 1, x20 == x31 - 1, x31 == zero - 1, zero == 0, len xs >= 0
RHS: _v == len xs
assumption _v == x20 + 1 && (x20 == x31 - 1 && (x31 == zero - 1 && (zero == 0 && len xs >= 0)))
mustHave !(_v == len xs)
qualsList []
Optimal valuations:
Pruned valuations:
Diffs: (0)
TYPE ERROR: Cannot find sufficiently strong refinements
when checking inc (dec (dec
                          zero)) :: {Int|_v == len xs} in
\xs . inc (dec (dec zero))
Score for inc (dec (inc
                      (?? :: Int))) is 21.285714285714285
Current queue size 15
Checking inc (dec (inc
                     (?? :: Int))) in
\xs . ??
Typing Constraints
length, xs C0 |- x56:Int -> {Int|_v == x56 + 1} /\ X28:_ -> Int ()
length, xs C0 |- x56:Int -> {Int|_v == x56 + 1} <: X28:_ -> Int ()
Type assignment
Simple Constraints
X28, length, xs C0 |- {Int|_v == X28 + 1} <: Int ()
length, x56, xs C0 |- {Int|_v == x56 + 1} /\ Int ()
Pred assignment
After process simple constraints
Constraints
QMap
  C0 -> {}
Checking consistency
Candidates (1)
  0: [C0 -> {}] (1 0)
Remaining Candidates (1)
  0: [C0 -> {}] (1 0)
*******************Filling holes in inc
                                      (dec (inc (?? :: Int)))
Looking for succinct type Int
INSTANTIATE x:Int -> {Int|_v == x - 1}
INTO x127:Int -> {Int|_v == x127 - 1}
Trying dec
Adding constraint length, xs C0 |- x127:Int -> {Int|_v == x127 - 1} <: X72:_ -> Int ()
Adding constraint length, xs C0 |- x127:Int -> {Int|_v == x127 - 1} /\ X72:_ -> Int ()
INSTANTIATE x:Int -> {Int|_v == x + 1}
INTO x128:Int -> {Int|_v == x128 + 1}
Trying inc
Adding constraint length, xs C0 |- x128:Int -> {Int|_v == x128 + 1} <: X73:_ -> Int ()
Adding constraint length, xs C0 |- x128:Int -> {Int|_v == x128 + 1} /\ X73:_ -> Int ()
Trying zero
Adding constraint length, xs C0 |- {Int|_v == zero} <: Int ()
Adding constraint length, xs |- A47
Adding constraint length, xs |- A48
Adding constraint |- P15 :: List (A48) -> A47 -> Bool
INSTANTIATE <b> . <a> . <p :: List (a) -> b -> Bool> . f:(xs:List a -> x:a -> acc:{b|p xs _v} -> {b|p ((Cons x xs)) _v}) -> seed:{b|p (Nil) _v} -> ys:List a -> {b|p ys _v}
INTO x129:(x130:List A48 -> x131:A48 -> x132:{A47|P15 x130 _v} -> {A47|P15 ((Cons x131 x130)) _v}) -> x133:{A47|P15 (Nil) _v} -> x134:List A48 -> {A47|P15 x134 _v}
Trying foldr
Adding constraint length, xs C0 |- x129:(x130:List A48 -> x131:A48 -> x132:{A47|P15 x130 _v} -> {A47|P15 ((Cons x131 x130)) _v}) -> x133:{A47|P15 (Nil) _v} -> x134:List A48 -> {A47|P15 x134 _v} <: X76:_ -> X75:_ -> X74:_ -> Int ()
Adding constraint length, xs C0 |- x129:(x130:List A48 -> x131:A48 -> x132:{A47|P15 x130 _v} -> {A47|P15 ((Cons x131 x130)) _v}) -> x133:{A47|P15 (Nil) _v} -> x134:List A48 -> {A47|P15 x134 _v} /\ X76:_ -> X75:_ -> X74:_ -> Int ()
Adding constraint length, xs |- A49
INSTANTIATE <a> . x0:{List a|len _v >= 0 && len _v < len xs} -> {Int|_v == len x0}
INTO x135:{List A49|len _v >= 0 && len _v < len xs} -> {Int|_v == len x135}
Adding constraint length, xs C0 |- x135:List A49 -> {Int|False} <: xs:{List {a|False}|False} -> Int ()
Trying length
Adding constraint length, xs C0 |- x135:{List A49|len _v >= 0 && len _v < len xs} -> {Int|_v == len x135} <: X77:_ -> Int ()
Adding constraint length, xs C0 |- x135:{List A49|len _v >= 0 && len _v < len xs} -> {Int|_v == len x135} /\ X77:_ -> Int ()
Adding constraint length, xs C0 |- {Int|_v == zero + 1} <: Int ()
Adding constraint length, xs C0 |- LET x31:({Int|_v == zero + 1}) IN {Int|_v == x31 - 1} <: Int ()
Score for inc (dec (inc
                      zero)) is 100018.28571428571
Current queue size 15
Checking inc (dec (inc zero)) in
\xs . ??
Typing Constraints
length, xs C0 |- LET x31:({Int|_v == zero + 1}) IN {Int|_v == x31 - 1} <: Int ()
length, xs C0 |- {Int|_v == zero + 1} <: Int ()
length, xs C0 |- {Int|_v == zero} <: Int ()
Type assignment
Simple Constraints
length, xs C0 |- {Int|_v == zero} <: Int ()
length, xs C0 |- {Int|_v == zero + 1} <: Int ()
length, x31, xs C0 |- {Int|_v == x31 - 1} <: Int ()
Pred assignment
After process simple constraints
Constraints
QMap
  C0 -> {}
Checking consistency
Candidates (1)
  0: [C0 -> {}] (1 0)
Remaining Candidates (1)
  0: [C0 -> {}] (1 0)
Checking program inc (dec (inc
                             zero))
Checking inc (dec (inc
                     zero)) :: {Int|_v == len xs} in
\xs . ??
Adding constraint length, xs C0 |- LET x20:(LET x31:({Int|_v == zero + 1}) IN {Int|_v == x31 - 1}) IN {Int|_v == x20 + 1} <: {Int|_v == len xs} ()
Typing Constraints
length, xs C0 |- LET x20:(LET x31:({Int|_v == zero + 1}) IN {Int|_v == x31 - 1}) IN {Int|_v == x20 + 1} <: {Int|_v == len xs} ()
Type assignment
Simple Constraints
length, x20, xs C0 |- {Int|_v == x20 + 1} <: {Int|_v == len xs} ()
Pred assignment
After process simple constraints
length, x20, xs C0 |- {Int|_v == x20 + 1} <: {Int|_v == len xs} ()
Constraints
  C0 && (_v == x20 + 1 && (x20 == x31 - 1 && (x31 == zero + 1 && (zero == 0 && len xs >= 0)))) ==> _v == len xs
QMap
  C0 -> {}
Candidates (1)
  0: [C0 -> {}] (1 1)
Chosen candidate: 0: [C0 -> {}] (1 1)
Invalid Constraint: C0 && (_v == x20 + 1 && (x20 == x31 - 1 && (x31 == zero + 1 && (zero == 0 && len xs >= 0)))) ==> _v == len xs
Strengthening: C0 && (_v == x20 + 1 && (x20 == x31 - 1 && (x31 == zero + 1 && (zero == 0 && len xs >= 0)))) ==> _v == len xs
Instantiated axioms:
All assumptions:
_v == x20 + 1, x20 == x31 - 1, x31 == zero + 1, zero == 0, len xs >= 0
RHS: _v == len xs
assumption _v == x20 + 1 && (x20 == x31 - 1 && (x31 == zero + 1 && (zero == 0 && len xs >= 0)))
mustHave !(_v == len xs)
qualsList []
Optimal valuations:
Pruned valuations:
Diffs: (0)
TYPE ERROR: Cannot find sufficiently strong refinements
when checking inc (dec (inc
                          zero)) :: {Int|_v == len xs} in
\xs . inc (dec (inc zero))
Score for dec (dec (inc
                      (?? :: Int))) is 21.285714285714285
Current queue size 14
Checking dec (dec (inc
                     (?? :: Int))) in
\xs . ??
Typing Constraints
length, xs C0 |- x71:Int -> {Int|_v == x71 + 1} /\ X37:_ -> Int ()
length, xs C0 |- x71:Int -> {Int|_v == x71 + 1} <: X37:_ -> Int ()
Type assignment
Simple Constraints
X37, length, xs C0 |- {Int|_v == X37 + 1} <: Int ()
length, x71, xs C0 |- {Int|_v == x71 + 1} /\ Int ()
Pred assignment
After process simple constraints
Constraints
QMap
  C0 -> {}
Checking consistency
Candidates (1)
  0: [C0 -> {}] (1 0)
Remaining Candidates (1)
  0: [C0 -> {}] (1 0)
*******************Filling holes in dec
                                      (dec (inc (?? :: Int)))
Looking for succinct type Int
INSTANTIATE x:Int -> {Int|_v == x - 1}
INTO x136:Int -> {Int|_v == x136 - 1}
Trying dec
Adding constraint length, xs C0 |- x136:Int -> {Int|_v == x136 - 1} <: X78:_ -> Int ()
Adding constraint length, xs C0 |- x136:Int -> {Int|_v == x136 - 1} /\ X78:_ -> Int ()
INSTANTIATE x:Int -> {Int|_v == x + 1}
INTO x137:Int -> {Int|_v == x137 + 1}
Trying inc
Adding constraint length, xs C0 |- x137:Int -> {Int|_v == x137 + 1} <: X79:_ -> Int ()
Adding constraint length, xs C0 |- x137:Int -> {Int|_v == x137 + 1} /\ X79:_ -> Int ()
Trying zero
Adding constraint length, xs C0 |- {Int|_v == zero} <: Int ()
Adding constraint length, xs |- A50
Adding constraint length, xs |- A51
Adding constraint |- P16 :: List (A51) -> A50 -> Bool
INSTANTIATE <b> . <a> . <p :: List (a) -> b -> Bool> . f:(xs:List a -> x:a -> acc:{b|p xs _v} -> {b|p ((Cons x xs)) _v}) -> seed:{b|p (Nil) _v} -> ys:List a -> {b|p ys _v}
INTO x138:(x139:List A51 -> x140:A51 -> x141:{A50|P16 x139 _v} -> {A50|P16 ((Cons x140 x139)) _v}) -> x142:{A50|P16 (Nil) _v} -> x143:List A51 -> {A50|P16 x143 _v}
Trying foldr
Adding constraint length, xs C0 |- x138:(x139:List A51 -> x140:A51 -> x141:{A50|P16 x139 _v} -> {A50|P16 ((Cons x140 x139)) _v}) -> x142:{A50|P16 (Nil) _v} -> x143:List A51 -> {A50|P16 x143 _v} <: X82:_ -> X81:_ -> X80:_ -> Int ()
Adding constraint length, xs C0 |- x138:(x139:List A51 -> x140:A51 -> x141:{A50|P16 x139 _v} -> {A50|P16 ((Cons x140 x139)) _v}) -> x142:{A50|P16 (Nil) _v} -> x143:List A51 -> {A50|P16 x143 _v} /\ X82:_ -> X81:_ -> X80:_ -> Int ()
Adding constraint length, xs |- A52
INSTANTIATE <a> . x0:{List a|len _v >= 0 && len _v < len xs} -> {Int|_v == len x0}
INTO x144:{List A52|len _v >= 0 && len _v < len xs} -> {Int|_v == len x144}
Adding constraint length, xs C0 |- x144:List A52 -> {Int|False} <: xs:{List {a|False}|False} -> Int ()
Trying length
Adding constraint length, xs C0 |- x144:{List A52|len _v >= 0 && len _v < len xs} -> {Int|_v == len x144} <: X83:_ -> Int ()
Adding constraint length, xs C0 |- x144:{List A52|len _v >= 0 && len _v < len xs} -> {Int|_v == len x144} /\ X83:_ -> Int ()
Adding constraint length, xs C0 |- {Int|_v == zero + 1} <: Int ()
Adding constraint length, xs C0 |- LET x22:({Int|_v == zero + 1}) IN {Int|_v == x22 - 1} <: Int ()
Score for dec (dec (inc
                      zero)) is 100018.28571428571
Current queue size 14
Checking dec (dec (inc zero)) in
\xs . ??
Typing Constraints
length, xs C0 |- LET x22:({Int|_v == zero + 1}) IN {Int|_v == x22 - 1} <: Int ()
length, xs C0 |- {Int|_v == zero + 1} <: Int ()
length, xs C0 |- {Int|_v == zero} <: Int ()
Type assignment
Simple Constraints
length, xs C0 |- {Int|_v == zero} <: Int ()
length, xs C0 |- {Int|_v == zero + 1} <: Int ()
length, x22, xs C0 |- {Int|_v == x22 - 1} <: Int ()
Pred assignment
After process simple constraints
Constraints
QMap
  C0 -> {}
Checking consistency
Candidates (1)
  0: [C0 -> {}] (1 0)
Remaining Candidates (1)
  0: [C0 -> {}] (1 0)
Checking program dec (dec (inc
                             zero))
Checking dec (dec (inc
                     zero)) :: {Int|_v == len xs} in
\xs . ??
Adding constraint length, xs C0 |- LET x13:(LET x22:({Int|_v == zero + 1}) IN {Int|_v == x22 - 1}) IN {Int|_v == x13 - 1} <: {Int|_v == len xs} ()
Typing Constraints
length, xs C0 |- LET x13:(LET x22:({Int|_v == zero + 1}) IN {Int|_v == x22 - 1}) IN {Int|_v == x13 - 1} <: {Int|_v == len xs} ()
Type assignment
Simple Constraints
length, x13, xs C0 |- {Int|_v == x13 - 1} <: {Int|_v == len xs} ()
Pred assignment
After process simple constraints
length, x13, xs C0 |- {Int|_v == x13 - 1} <: {Int|_v == len xs} ()
Constraints
  C0 && (_v == x13 - 1 && (x13 == x22 - 1 && (x22 == zero + 1 && (zero == 0 && len xs >= 0)))) ==> _v == len xs
QMap
  C0 -> {}
Candidates (1)
  0: [C0 -> {}] (1 1)
Chosen candidate: 0: [C0 -> {}] (1 1)
Invalid Constraint: C0 && (_v == x13 - 1 && (x13 == x22 - 1 && (x22 == zero + 1 && (zero == 0 && len xs >= 0)))) ==> _v == len xs
Strengthening: C0 && (_v == x13 - 1 && (x13 == x22 - 1 && (x22 == zero + 1 && (zero == 0 && len xs >= 0)))) ==> _v == len xs
Instantiated axioms:
All assumptions:
_v == x13 - 1, x13 == x22 - 1, x22 == zero + 1, zero == 0, len xs >= 0
RHS: _v == len xs
assumption _v == x13 - 1 && (x13 == x22 - 1 && (x22 == zero + 1 && (zero == 0 && len xs >= 0)))
mustHave !(_v == len xs)
qualsList []
Optimal valuations:
Pruned valuations:
Diffs: (0)
TYPE ERROR: Cannot find sufficiently strong refinements
when checking dec (dec (inc
                          zero)) :: {Int|_v == len xs} in
\xs . dec (dec (inc zero))
Score for inc (inc (dec
                      (?? :: Int))) is 21.285714285714285
Current queue size 13
Checking inc (inc (dec
                     (?? :: Int))) in
\xs . ??
Typing Constraints
length, xs C0 |- x79:Int -> {Int|_v == x79 - 1} /\ X42:_ -> Int ()
length, xs C0 |- x79:Int -> {Int|_v == x79 - 1} <: X42:_ -> Int ()
Type assignment
Simple Constraints
X42, length, xs C0 |- {Int|_v == X42 - 1} <: Int ()
length, x79, xs C0 |- {Int|_v == x79 - 1} /\ Int ()
Pred assignment
After process simple constraints
Constraints
QMap
  C0 -> {}
Checking consistency
Candidates (1)
  0: [C0 -> {}] (1 0)
Remaining Candidates (1)
  0: [C0 -> {}] (1 0)
*******************Filling holes in inc
                                      (inc (dec (?? :: Int)))
Looking for succinct type Int
INSTANTIATE x:Int -> {Int|_v == x - 1}
INTO x145:Int -> {Int|_v == x145 - 1}
Trying dec
Adding constraint length, xs C0 |- x145:Int -> {Int|_v == x145 - 1} <: X84:_ -> Int ()
Adding constraint length, xs C0 |- x145:Int -> {Int|_v == x145 - 1} /\ X84:_ -> Int ()
INSTANTIATE x:Int -> {Int|_v == x + 1}
INTO x146:Int -> {Int|_v == x146 + 1}
Trying inc
Adding constraint length, xs C0 |- x146:Int -> {Int|_v == x146 + 1} <: X85:_ -> Int ()
Adding constraint length, xs C0 |- x146:Int -> {Int|_v == x146 + 1} /\ X85:_ -> Int ()
Trying zero
Adding constraint length, xs C0 |- {Int|_v == zero} <: Int ()
Adding constraint length, xs |- A53
Adding constraint length, xs |- A54
Adding constraint |- P17 :: List (A54) -> A53 -> Bool
INSTANTIATE <b> . <a> . <p :: List (a) -> b -> Bool> . f:(xs:List a -> x:a -> acc:{b|p xs _v} -> {b|p ((Cons x xs)) _v}) -> seed:{b|p (Nil) _v} -> ys:List a -> {b|p ys _v}
INTO x147:(x148:List A54 -> x149:A54 -> x150:{A53|P17 x148 _v} -> {A53|P17 ((Cons x149 x148)) _v}) -> x151:{A53|P17 (Nil) _v} -> x152:List A54 -> {A53|P17 x152 _v}
Trying foldr
Adding constraint length, xs C0 |- x147:(x148:List A54 -> x149:A54 -> x150:{A53|P17 x148 _v} -> {A53|P17 ((Cons x149 x148)) _v}) -> x151:{A53|P17 (Nil) _v} -> x152:List A54 -> {A53|P17 x152 _v} <: X88:_ -> X87:_ -> X86:_ -> Int ()
Adding constraint length, xs C0 |- x147:(x148:List A54 -> x149:A54 -> x150:{A53|P17 x148 _v} -> {A53|P17 ((Cons x149 x148)) _v}) -> x151:{A53|P17 (Nil) _v} -> x152:List A54 -> {A53|P17 x152 _v} /\ X88:_ -> X87:_ -> X86:_ -> Int ()
Adding constraint length, xs |- A55
INSTANTIATE <a> . x0:{List a|len _v >= 0 && len _v < len xs} -> {Int|_v == len x0}
INTO x153:{List A55|len _v >= 0 && len _v < len xs} -> {Int|_v == len x153}
Adding constraint length, xs C0 |- x153:List A55 -> {Int|False} <: xs:{List {a|False}|False} -> Int ()
Trying length
Adding constraint length, xs C0 |- x153:{List A55|len _v >= 0 && len _v < len xs} -> {Int|_v == len x153} <: X89:_ -> Int ()
Adding constraint length, xs C0 |- x153:{List A55|len _v >= 0 && len _v < len xs} -> {Int|_v == len x153} /\ X89:_ -> Int ()
Adding constraint length, xs C0 |- {Int|_v == zero - 1} <: Int ()
Adding constraint length, xs C0 |- LET x38:({Int|_v == zero - 1}) IN {Int|_v == x38 + 1} <: Int ()
Score for inc (inc (dec
                      zero)) is 100018.28571428571
Current queue size 13
Checking inc (inc (dec zero)) in
\xs . ??
Typing Constraints
length, xs C0 |- LET x38:({Int|_v == zero - 1}) IN {Int|_v == x38 + 1} <: Int ()
length, xs C0 |- {Int|_v == zero - 1} <: Int ()
length, xs C0 |- {Int|_v == zero} <: Int ()
Type assignment
Simple Constraints
length, xs C0 |- {Int|_v == zero} <: Int ()
length, xs C0 |- {Int|_v == zero - 1} <: Int ()
length, x38, xs C0 |- {Int|_v == x38 + 1} <: Int ()
Pred assignment
After process simple constraints
Constraints
QMap
  C0 -> {}
Checking consistency
Candidates (1)
  0: [C0 -> {}] (1 0)
Remaining Candidates (1)
  0: [C0 -> {}] (1 0)
Checking program inc (inc (dec
                             zero))
Checking inc (inc (dec
                     zero)) :: {Int|_v == len xs} in
\xs . ??
Adding constraint length, xs C0 |- LET x20:(LET x38:({Int|_v == zero - 1}) IN {Int|_v == x38 + 1}) IN {Int|_v == x20 + 1} <: {Int|_v == len xs} ()
Typing Constraints
length, xs C0 |- LET x20:(LET x38:({Int|_v == zero - 1}) IN {Int|_v == x38 + 1}) IN {Int|_v == x20 + 1} <: {Int|_v == len xs} ()
Type assignment
Simple Constraints
length, x20, xs C0 |- {Int|_v == x20 + 1} <: {Int|_v == len xs} ()
Pred assignment
After process simple constraints
length, x20, xs C0 |- {Int|_v == x20 + 1} <: {Int|_v == len xs} ()
Constraints
  C0 && (_v == x20 + 1 && (x20 == x38 + 1 && (x38 == zero - 1 && (zero == 0 && len xs >= 0)))) ==> _v == len xs
QMap
  C0 -> {}
Candidates (1)
  0: [C0 -> {}] (1 1)
Chosen candidate: 0: [C0 -> {}] (1 1)
Invalid Constraint: C0 && (_v == x20 + 1 && (x20 == x38 + 1 && (x38 == zero - 1 && (zero == 0 && len xs >= 0)))) ==> _v == len xs
Strengthening: C0 && (_v == x20 + 1 && (x20 == x38 + 1 && (x38 == zero - 1 && (zero == 0 && len xs >= 0)))) ==> _v == len xs
Instantiated axioms:
All assumptions:
_v == x20 + 1, x20 == x38 + 1, x38 == zero - 1, zero == 0, len xs >= 0
RHS: _v == len xs
assumption _v == x20 + 1 && (x20 == x38 + 1 && (x38 == zero - 1 && (zero == 0 && len xs >= 0)))
mustHave !(_v == len xs)
qualsList []
Optimal valuations:
Pruned valuations:
Diffs: (0)
TYPE ERROR: Cannot find sufficiently strong refinements
when checking inc (inc (dec
                          zero)) :: {Int|_v == len xs} in
\xs . inc (inc (dec zero))
Score for dec (dec (length
                      (?? :: {List A28|len _v >= 0 && len _v < len xs}))) is 20.285714285714285
Current queue size 12
Checking dec (dec (length
                     (?? :: {List A28|len _v >= 0 && len _v < len xs}))) in
\xs . ??
Typing Constraints
length, xs C0 |- x78:{List A28|len _v >= 0 && len _v < len xs} -> {Int|_v == len x78} /\ X41:_ -> Int ()
length, xs C0 |- x78:{List A28|len _v >= 0 && len _v < len xs} -> {Int|_v == len x78} <: X41:_ -> Int ()
length, xs C0 |- x78:List A28 -> {Int|False} <: xs:{List {a|False}|False} -> Int ()
length, xs |- A28
UNIFY A28 WITH {a|False} PRODUCING {a|U4}
Type assignment
A28 -> {a|U4}
Typing Constraints
Type assignment
A28 -> {a|U4}
Simple Constraints
length, xs |- {a|U4}
length, xs C0 |- {Int|False} <: Int ()
length, xs C0 |- {List|False} <: List ()
length, xs C0 |- {a|False} <: {a|U4} ()
X41, length, xs C0 |- {Int|_v == len X41} <: Int ()
length, x78, xs C0 |- {Int|_v == len x78} /\ Int ()
Pred assignment
After process simple constraints
Constraints
QMap
  C0 -> {}
  U4 -> {}
Checking consistency
Candidates (1)
  0: [C0 -> {}, U4 -> {}] (1 0)
Remaining Candidates (1)
  0: [C0 -> {}, U4 -> {}] (1 0)
*******************Filling holes in dec
                                      (dec (length
                                              (?? :: {List A28|len _v >= 0 && len _v < len xs})))
Looking for succinct type {List |  | a, |  | }
Adding constraint length, xs |- A56
INSTANTIATE <a> . {List a|_v == (Nil)}
INTO {List {A56|False}|_v == (Nil)}
Trying Nil
Adding constraint length, xs C0 |- {List {A56|False}|_v == (Nil)} <: {List {a|U4}|len _v >= 0 && len _v < len xs} ()
Adding constraint length, xs |- A57
Adding constraint length, xs |- A58
Adding constraint |- P18 :: List (A58) -> A57 -> Bool
INSTANTIATE <b> . <a> . <p :: List (a) -> b -> Bool> . f:(xs:List a -> x:a -> acc:{b|p xs _v} -> {b|p ((Cons x xs)) _v}) -> seed:{b|p (Nil) _v} -> ys:List a -> {b|p ys _v}
INTO x154:(x155:List A58 -> x156:A58 -> x157:{A57|P18 x155 _v} -> {A57|P18 ((Cons x156 x155)) _v}) -> x158:{A57|P18 (Nil) _v} -> x159:List A58 -> {A57|P18 x159 _v}
Trying foldr
Adding constraint length, xs C0 |- x154:(x155:List A58 -> x156:A58 -> x157:{A57|P18 x155 _v} -> {A57|P18 ((Cons x156 x155)) _v}) -> x158:{A57|P18 (Nil) _v} -> x159:List A58 -> {A57|P18 x159 _v} <: X92:_ -> X91:_ -> X90:_ -> {List {a|U4}|len _v >= 0 && len _v < len xs} ()
Adding constraint length, xs C0 |- x154:(x155:List A58 -> x156:A58 -> x157:{A57|P18 x155 _v} -> {A57|P18 ((Cons x156 x155)) _v}) -> x158:{A57|P18 (Nil) _v} -> x159:List A58 -> {A57|P18 x159 _v} /\ X92:_ -> X91:_ -> X90:_ -> {List {a|U4}|len _v >= 0 && len _v < len xs} ()
Trying xs
Adding constraint length, xs C0 |- {List a|_v == xs} <: {List {a|U4}|len _v >= 0 && len _v < len xs} ()
Adding constraint length, xs C0 |- {Int|_v == len (Nil)} <: Int ()
Adding constraint length, xs C0 |- LET x22:({Int|_v == len (Nil)}) IN {Int|_v == x22 - 1} <: Int ()
Adding constraint length, xs C0 |- {Int|_v == len xs} <: Int ()
Adding constraint length, xs C0 |- LET x22:({Int|_v == len xs}) IN {Int|_v == x22 - 1} <: Int ()
Score for dec (dec (length
                      xs)) is 100019.28571428571
Current queue size 13
Checking dec (dec (length
                     xs)) in
\xs . ??
Typing Constraints
length, xs C0 |- LET x22:({Int|_v == len xs}) IN {Int|_v == x22 - 1} <: Int ()
length, xs C0 |- {Int|_v == len xs} <: Int ()
length, xs C0 |- {List a|_v == xs} <: {List {a|U4}|len _v >= 0 && len _v < len xs} ()
Type assignment
A28 -> {a|U4}
Simple Constraints
length, xs C0 |- {List|_v == xs} <: {List|len _v >= 0 && len _v < len xs} ()
length, xs C0 |- a <: {a|U4} ()
length, xs C0 |- {Int|_v == len xs} <: Int ()
length, x22, xs C0 |- {Int|_v == x22 - 1} <: Int ()
Pred assignment
After process simple constraints
length, xs C0 |- a <: {a|U4} ()
length, xs C0 |- {List|_v == xs} <: {List|len _v >= 0 && len _v < len xs} ()
Constraints
  C0 && (_v == xs && len xs >= 0) ==> len _v >= 0 && len _v < len xs
  C0 ==> U4
QMap
  C0 -> {}
  U4 -> {}
Candidates (1)
  0: [C0 -> {}, U4 -> {}] (2 1)
Chosen candidate: 0: [C0 -> {}, U4 -> {}] (2 1)
Invalid Constraint: C0 && (_v == xs && len xs >= 0) ==> len _v >= 0 && len _v < len xs
Strengthening: C0 && (_v == xs && len xs >= 0) ==> len _v >= 0 && len _v < len xs
Instantiated axioms:
All assumptions:
_v == xs, len xs >= 0
RHS: len _v >= 0 && len _v < len xs
assumption _v == xs && len xs >= 0
mustHave !(len _v >= 0 && len _v < len xs)
qualsList []
Optimal valuations:
Pruned valuations:
Diffs: (0)
TYPE ERROR: Cannot find sufficiently strong refinements
Score for dec (dec (length
                      Nil)) is 100018.28571428571
Current queue size 12
Checking dec (dec (length
                     Nil)) in
\xs . ??
Typing Constraints
length, xs C0 |- LET x22:({Int|_v == len (Nil)}) IN {Int|_v == x22 - 1} <: Int ()
length, xs C0 |- {Int|_v == len (Nil)} <: Int ()
length, xs C0 |- {List {A56|False}|_v == (Nil)} <: {List {a|U4}|len _v >= 0 && len _v < len xs} ()
length, xs |- A56
UNIFY A56 WITH {a|U4} PRODUCING {a|U5}
Type assignment
A28 -> {a|U4}
A56 -> {a|U5}
Typing Constraints
Type assignment
A28 -> {a|U4}
A56 -> {a|U5}
Simple Constraints
length, xs |- {a|U5}
length, xs C0 |- {List|_v == (Nil)} <: {List|len _v >= 0 && len _v < len xs} ()
length, xs C0 |- {a|False} <: {a|U4} ()
length, xs C0 |- {Int|_v == len (Nil)} <: Int ()
length, x22, xs C0 |- {Int|_v == x22 - 1} <: Int ()
Pred assignment
addSplitConstraint length, xs C0 |- {List|len _v == 0} <: {List|len _v < len xs && len _v >= 0} ()
After process simple constraints
length, xs C0 |- {List|len _v == 0} <: {List|len _v < len xs && len _v >= 0} ()
Constraints
  C0 && (len _v == 0 && len xs >= 0) ==> len _v < len xs && len _v >= 0
QMap
  C0 -> {}
  U4 -> {}
  U5 -> {}
Candidates (1)
  0: [C0 -> {}, U4 -> {}, U5 -> {}] (1 1)
Chosen candidate: 0: [C0 -> {}, U4 -> {}, U5 -> {}] (1 1)
Invalid Constraint: C0 && (len _v == 0 && len xs >= 0) ==> len _v < len xs && len _v >= 0
Strengthening: C0 && (len _v == 0 && len xs >= 0) ==> len _v < len xs && len _v >= 0
Instantiated axioms:
All assumptions:
len _v == 0, len xs >= 0
RHS: len _v < len xs && len _v >= 0
assumption len _v == 0 && len xs >= 0
mustHave !(len _v < len xs && len _v >= 0)
qualsList []
Optimal valuations:
Pruned valuations:
Diffs: (0)
TYPE ERROR: Cannot find sufficiently strong refinements
Score for inc (inc (length
                      (?? :: {List A31|len _v >= 0 && len _v < len xs}))) is 20.285714285714285
Current queue size 11
Checking inc (inc (length
                     (?? :: {List A31|len _v >= 0 && len _v < len xs}))) in
\xs . ??
Typing Constraints
length, xs C0 |- x87:{List A31|len _v >= 0 && len _v < len xs} -> {Int|_v == len x87} /\ X47:_ -> Int ()
length, xs C0 |- x87:{List A31|len _v >= 0 && len _v < len xs} -> {Int|_v == len x87} <: X47:_ -> Int ()
length, xs C0 |- x87:List A31 -> {Int|False} <: xs:{List {a|False}|False} -> Int ()
length, xs |- A31
UNIFY A31 WITH {a|False} PRODUCING {a|U5}
Type assignment
A31 -> {a|U5}
Typing Constraints
Type assignment
A31 -> {a|U5}
Simple Constraints
length, xs |- {a|U5}
length, xs C0 |- {Int|False} <: Int ()
length, xs C0 |- {List|False} <: List ()
length, xs C0 |- {a|False} <: {a|U5} ()
X47, length, xs C0 |- {Int|_v == len X47} <: Int ()
length, x87, xs C0 |- {Int|_v == len x87} /\ Int ()
Pred assignment
After process simple constraints
Constraints
QMap
  C0 -> {}
  U5 -> {}
Checking consistency
Candidates (1)
  0: [C0 -> {}, U5 -> {}] (1 0)
Remaining Candidates (1)
  0: [C0 -> {}, U5 -> {}] (1 0)
*******************Filling holes in inc
                                      (inc (length
                                              (?? :: {List A31|len _v >= 0 && len _v < len xs})))
Looking for succinct type {List |  | a, |  | }
Adding constraint length, xs |- A59
INSTANTIATE <a> . {List a|_v == (Nil)}
INTO {List {A59|False}|_v == (Nil)}
Trying Nil
Adding constraint length, xs C0 |- {List {A59|False}|_v == (Nil)} <: {List {a|U5}|len _v >= 0 && len _v < len xs} ()
Adding constraint length, xs |- A60
Adding constraint length, xs |- A61
Adding constraint |- P19 :: List (A61) -> A60 -> Bool
INSTANTIATE <b> . <a> . <p :: List (a) -> b -> Bool> . f:(xs:List a -> x:a -> acc:{b|p xs _v} -> {b|p ((Cons x xs)) _v}) -> seed:{b|p (Nil) _v} -> ys:List a -> {b|p ys _v}
INTO x160:(x161:List A61 -> x162:A61 -> x163:{A60|P19 x161 _v} -> {A60|P19 ((Cons x162 x161)) _v}) -> x164:{A60|P19 (Nil) _v} -> x165:List A61 -> {A60|P19 x165 _v}
Trying foldr
Adding constraint length, xs C0 |- x160:(x161:List A61 -> x162:A61 -> x163:{A60|P19 x161 _v} -> {A60|P19 ((Cons x162 x161)) _v}) -> x164:{A60|P19 (Nil) _v} -> x165:List A61 -> {A60|P19 x165 _v} <: X95:_ -> X94:_ -> X93:_ -> {List {a|U5}|len _v >= 0 && len _v < len xs} ()
Adding constraint length, xs C0 |- x160:(x161:List A61 -> x162:A61 -> x163:{A60|P19 x161 _v} -> {A60|P19 ((Cons x162 x161)) _v}) -> x164:{A60|P19 (Nil) _v} -> x165:List A61 -> {A60|P19 x165 _v} /\ X95:_ -> X94:_ -> X93:_ -> {List {a|U5}|len _v >= 0 && len _v < len xs} ()
Trying xs
Adding constraint length, xs C0 |- {List a|_v == xs} <: {List {a|U5}|len _v >= 0 && len _v < len xs} ()
Adding constraint length, xs C0 |- {Int|_v == len (Nil)} <: Int ()
Adding constraint length, xs C0 |- LET x38:({Int|_v == len (Nil)}) IN {Int|_v == x38 + 1} <: Int ()
Adding constraint length, xs C0 |- {Int|_v == len xs} <: Int ()
Adding constraint length, xs C0 |- LET x38:({Int|_v == len xs}) IN {Int|_v == x38 + 1} <: Int ()
Score for inc (inc (length
                      xs)) is 100019.28571428571
Current queue size 12
Checking inc (inc (length
                     xs)) in
\xs . ??
Typing Constraints
length, xs C0 |- LET x38:({Int|_v == len xs}) IN {Int|_v == x38 + 1} <: Int ()
length, xs C0 |- {Int|_v == len xs} <: Int ()
length, xs C0 |- {List a|_v == xs} <: {List {a|U5}|len _v >= 0 && len _v < len xs} ()
Type assignment
A31 -> {a|U5}
Simple Constraints
length, xs C0 |- {List|_v == xs} <: {List|len _v >= 0 && len _v < len xs} ()
length, xs C0 |- a <: {a|U5} ()
length, xs C0 |- {Int|_v == len xs} <: Int ()
length, x38, xs C0 |- {Int|_v == x38 + 1} <: Int ()
Pred assignment
After process simple constraints
length, xs C0 |- a <: {a|U5} ()
length, xs C0 |- {List|_v == xs} <: {List|len _v >= 0 && len _v < len xs} ()
Constraints
  C0 && (_v == xs && len xs >= 0) ==> len _v >= 0 && len _v < len xs
  C0 ==> U5
QMap
  C0 -> {}
  U5 -> {}
Candidates (1)
  0: [C0 -> {}, U5 -> {}] (2 1)
Chosen candidate: 0: [C0 -> {}, U5 -> {}] (2 1)
Invalid Constraint: C0 && (_v == xs && len xs >= 0) ==> len _v >= 0 && len _v < len xs
Strengthening: C0 && (_v == xs && len xs >= 0) ==> len _v >= 0 && len _v < len xs
Instantiated axioms:
All assumptions:
_v == xs, len xs >= 0
RHS: len _v >= 0 && len _v < len xs
assumption _v == xs && len xs >= 0
mustHave !(len _v >= 0 && len _v < len xs)
qualsList []
Optimal valuations:
Pruned valuations:
Diffs: (0)
TYPE ERROR: Cannot find sufficiently strong refinements
Score for inc (inc (length
                      Nil)) is 100018.28571428571
Current queue size 11
Checking inc (inc (length
                     Nil)) in
\xs . ??
Typing Constraints
length, xs C0 |- LET x38:({Int|_v == len (Nil)}) IN {Int|_v == x38 + 1} <: Int ()
length, xs C0 |- {Int|_v == len (Nil)} <: Int ()
length, xs C0 |- {List {A59|False}|_v == (Nil)} <: {List {a|U5}|len _v >= 0 && len _v < len xs} ()
length, xs |- A59
UNIFY A59 WITH {a|U5} PRODUCING {a|U6}
Type assignment
A31 -> {a|U5}
A59 -> {a|U6}
Typing Constraints
Type assignment
A31 -> {a|U5}
A59 -> {a|U6}
Simple Constraints
length, xs |- {a|U6}
length, xs C0 |- {List|_v == (Nil)} <: {List|len _v >= 0 && len _v < len xs} ()
length, xs C0 |- {a|False} <: {a|U5} ()
length, xs C0 |- {Int|_v == len (Nil)} <: Int ()
length, x38, xs C0 |- {Int|_v == x38 + 1} <: Int ()
Pred assignment
addSplitConstraint length, xs C0 |- {List|len _v == 0} <: {List|len _v < len xs && len _v >= 0} ()
After process simple constraints
length, xs C0 |- {List|len _v == 0} <: {List|len _v < len xs && len _v >= 0} ()
Constraints
  C0 && (len _v == 0 && len xs >= 0) ==> len _v < len xs && len _v >= 0
QMap
  C0 -> {}
  U5 -> {}
  U6 -> {}
Candidates (1)
  0: [C0 -> {}, U5 -> {}, U6 -> {}] (1 1)
Chosen candidate: 0: [C0 -> {}, U5 -> {}, U6 -> {}] (1 1)
Invalid Constraint: C0 && (len _v == 0 && len xs >= 0) ==> len _v < len xs && len _v >= 0
Strengthening: C0 && (len _v == 0 && len xs >= 0) ==> len _v < len xs && len _v >= 0
Instantiated axioms:
All assumptions:
len _v == 0, len xs >= 0
RHS: len _v < len xs && len _v >= 0
assumption len _v == 0 && len xs >= 0
mustHave !(len _v < len xs && len _v >= 0)
qualsList []
Optimal valuations:
Pruned valuations:
Diffs: (0)
TYPE ERROR: Cannot find sufficiently strong refinements
Score for dec (dec (dec
                      (?? :: Int))) is 19.285714285714285
Current queue size 10
Checking dec (dec (dec
                     (?? :: Int))) in
\xs . ??
Typing Constraints
length, xs C0 |- x70:Int -> {Int|_v == x70 - 1} /\ X36:_ -> Int ()
length, xs C0 |- x70:Int -> {Int|_v == x70 - 1} <: X36:_ -> Int ()
Type assignment
Simple Constraints
X36, length, xs C0 |- {Int|_v == X36 - 1} <: Int ()
length, x70, xs C0 |- {Int|_v == x70 - 1} /\ Int ()
Pred assignment
After process simple constraints
Constraints
QMap
  C0 -> {}
Checking consistency
Candidates (1)
  0: [C0 -> {}] (1 0)
Remaining Candidates (1)
  0: [C0 -> {}] (1 0)
*******************Filling holes in dec
                                      (dec (dec (?? :: Int)))
Looking for succinct type Int
INSTANTIATE x:Int -> {Int|_v == x - 1}
INTO x166:Int -> {Int|_v == x166 - 1}
Trying dec
Adding constraint length, xs C0 |- x166:Int -> {Int|_v == x166 - 1} <: X96:_ -> Int ()
Adding constraint length, xs C0 |- x166:Int -> {Int|_v == x166 - 1} /\ X96:_ -> Int ()
INSTANTIATE x:Int -> {Int|_v == x + 1}
INTO x167:Int -> {Int|_v == x167 + 1}
Trying inc
Adding constraint length, xs C0 |- x167:Int -> {Int|_v == x167 + 1} <: X97:_ -> Int ()
Adding constraint length, xs C0 |- x167:Int -> {Int|_v == x167 + 1} /\ X97:_ -> Int ()
Trying zero
Adding constraint length, xs C0 |- {Int|_v == zero} <: Int ()
Adding constraint length, xs |- A62
Adding constraint length, xs |- A63
Adding constraint |- P20 :: List (A63) -> A62 -> Bool
INSTANTIATE <b> . <a> . <p :: List (a) -> b -> Bool> . f:(xs:List a -> x:a -> acc:{b|p xs _v} -> {b|p ((Cons x xs)) _v}) -> seed:{b|p (Nil) _v} -> ys:List a -> {b|p ys _v}
INTO x168:(x169:List A63 -> x170:A63 -> x171:{A62|P20 x169 _v} -> {A62|P20 ((Cons x170 x169)) _v}) -> x172:{A62|P20 (Nil) _v} -> x173:List A63 -> {A62|P20 x173 _v}
Trying foldr
Adding constraint length, xs C0 |- x168:(x169:List A63 -> x170:A63 -> x171:{A62|P20 x169 _v} -> {A62|P20 ((Cons x170 x169)) _v}) -> x172:{A62|P20 (Nil) _v} -> x173:List A63 -> {A62|P20 x173 _v} <: X100:_ -> X99:_ -> X98:_ -> Int ()
Adding constraint length, xs C0 |- x168:(x169:List A63 -> x170:A63 -> x171:{A62|P20 x169 _v} -> {A62|P20 ((Cons x170 x169)) _v}) -> x172:{A62|P20 (Nil) _v} -> x173:List A63 -> {A62|P20 x173 _v} /\ X100:_ -> X99:_ -> X98:_ -> Int ()
Adding constraint length, xs |- A64
INSTANTIATE <a> . x0:{List a|len _v >= 0 && len _v < len xs} -> {Int|_v == len x0}
INTO x174:{List A64|len _v >= 0 && len _v < len xs} -> {Int|_v == len x174}
Adding constraint length, xs C0 |- x174:List A64 -> {Int|False} <: xs:{List {a|False}|False} -> Int ()
Trying length
Adding constraint length, xs C0 |- x174:{List A64|len _v >= 0 && len _v < len xs} -> {Int|_v == len x174} <: X101:_ -> Int ()
Adding constraint length, xs C0 |- x174:{List A64|len _v >= 0 && len _v < len xs} -> {Int|_v == len x174} /\ X101:_ -> Int ()
Adding constraint length, xs C0 |- {Int|_v == zero - 1} <: Int ()
Adding constraint length, xs C0 |- LET x22:({Int|_v == zero - 1}) IN {Int|_v == x22 - 1} <: Int ()
Score for dec (dec (dec
                      zero)) is 100016.28571428571
Current queue size 10
Checking dec (dec (dec zero)) in
\xs . ??
Typing Constraints
length, xs C0 |- LET x22:({Int|_v == zero - 1}) IN {Int|_v == x22 - 1} <: Int ()
length, xs C0 |- {Int|_v == zero - 1} <: Int ()
length, xs C0 |- {Int|_v == zero} <: Int ()
Type assignment
Simple Constraints
length, xs C0 |- {Int|_v == zero} <: Int ()
length, xs C0 |- {Int|_v == zero - 1} <: Int ()
length, x22, xs C0 |- {Int|_v == x22 - 1} <: Int ()
Pred assignment
After process simple constraints
Constraints
QMap
  C0 -> {}
Checking consistency
Candidates (1)
  0: [C0 -> {}] (1 0)
Remaining Candidates (1)
  0: [C0 -> {}] (1 0)
Checking program dec (dec (dec
                             zero))
Checking dec (dec (dec
                     zero)) :: {Int|_v == len xs} in
\xs . ??
Adding constraint length, xs C0 |- LET x13:(LET x22:({Int|_v == zero - 1}) IN {Int|_v == x22 - 1}) IN {Int|_v == x13 - 1} <: {Int|_v == len xs} ()
Typing Constraints
length, xs C0 |- LET x13:(LET x22:({Int|_v == zero - 1}) IN {Int|_v == x22 - 1}) IN {Int|_v == x13 - 1} <: {Int|_v == len xs} ()
Type assignment
Simple Constraints
length, x13, xs C0 |- {Int|_v == x13 - 1} <: {Int|_v == len xs} ()
Pred assignment
After process simple constraints
length, x13, xs C0 |- {Int|_v == x13 - 1} <: {Int|_v == len xs} ()
Constraints
  C0 && (_v == x13 - 1 && (x13 == x22 - 1 && (x22 == zero - 1 && (zero == 0 && len xs >= 0)))) ==> _v == len xs
QMap
  C0 -> {}
Candidates (1)
  0: [C0 -> {}] (1 1)
Chosen candidate: 0: [C0 -> {}] (1 1)
Invalid Constraint: C0 && (_v == x13 - 1 && (x13 == x22 - 1 && (x22 == zero - 1 && (zero == 0 && len xs >= 0)))) ==> _v == len xs
Strengthening: C0 && (_v == x13 - 1 && (x13 == x22 - 1 && (x22 == zero - 1 && (zero == 0 && len xs >= 0)))) ==> _v == len xs
Instantiated axioms:
All assumptions:
_v == x13 - 1, x13 == x22 - 1, x22 == zero - 1, zero == 0, len xs >= 0
RHS: _v == len xs
assumption _v == x13 - 1 && (x13 == x22 - 1 && (x22 == zero - 1 && (zero == 0 && len xs >= 0)))
mustHave !(_v == len xs)
qualsList []
Optimal valuations:
Pruned valuations:
Diffs: (0)
TYPE ERROR: Cannot find sufficiently strong refinements
when checking dec (dec (dec
                          zero)) :: {Int|_v == len xs} in
\xs . dec (dec (dec zero))
Score for inc (inc (inc
                      (?? :: Int))) is 19.285714285714285
Current queue size 9
Checking inc (inc (inc
                     (?? :: Int))) in
\xs . ??
Typing Constraints
length, xs C0 |- x80:Int -> {Int|_v == x80 + 1} /\ X43:_ -> Int ()
length, xs C0 |- x80:Int -> {Int|_v == x80 + 1} <: X43:_ -> Int ()
Type assignment
Simple Constraints
X43, length, xs C0 |- {Int|_v == X43 + 1} <: Int ()
length, x80, xs C0 |- {Int|_v == x80 + 1} /\ Int ()
Pred assignment
After process simple constraints
Constraints
QMap
  C0 -> {}
Checking consistency
Candidates (1)
  0: [C0 -> {}] (1 0)
Remaining Candidates (1)
  0: [C0 -> {}] (1 0)
*******************Filling holes in inc
                                      (inc (inc (?? :: Int)))
Looking for succinct type Int
INSTANTIATE x:Int -> {Int|_v == x - 1}
INTO x175:Int -> {Int|_v == x175 - 1}
Trying dec
Adding constraint length, xs C0 |- x175:Int -> {Int|_v == x175 - 1} <: X102:_ -> Int ()
Adding constraint length, xs C0 |- x175:Int -> {Int|_v == x175 - 1} /\ X102:_ -> Int ()
INSTANTIATE x:Int -> {Int|_v == x + 1}
INTO x176:Int -> {Int|_v == x176 + 1}
Trying inc
Adding constraint length, xs C0 |- x176:Int -> {Int|_v == x176 + 1} <: X103:_ -> Int ()
Adding constraint length, xs C0 |- x176:Int -> {Int|_v == x176 + 1} /\ X103:_ -> Int ()
Trying zero
Adding constraint length, xs C0 |- {Int|_v == zero} <: Int ()
Adding constraint length, xs |- A65
Adding constraint length, xs |- A66
Adding constraint |- P21 :: List (A66) -> A65 -> Bool
INSTANTIATE <b> . <a> . <p :: List (a) -> b -> Bool> . f:(xs:List a -> x:a -> acc:{b|p xs _v} -> {b|p ((Cons x xs)) _v}) -> seed:{b|p (Nil) _v} -> ys:List a -> {b|p ys _v}
INTO x177:(x178:List A66 -> x179:A66 -> x180:{A65|P21 x178 _v} -> {A65|P21 ((Cons x179 x178)) _v}) -> x181:{A65|P21 (Nil) _v} -> x182:List A66 -> {A65|P21 x182 _v}
Trying foldr
Adding constraint length, xs C0 |- x177:(x178:List A66 -> x179:A66 -> x180:{A65|P21 x178 _v} -> {A65|P21 ((Cons x179 x178)) _v}) -> x181:{A65|P21 (Nil) _v} -> x182:List A66 -> {A65|P21 x182 _v} <: X106:_ -> X105:_ -> X104:_ -> Int ()
Adding constraint length, xs C0 |- x177:(x178:List A66 -> x179:A66 -> x180:{A65|P21 x178 _v} -> {A65|P21 ((Cons x179 x178)) _v}) -> x181:{A65|P21 (Nil) _v} -> x182:List A66 -> {A65|P21 x182 _v} /\ X106:_ -> X105:_ -> X104:_ -> Int ()
Adding constraint length, xs |- A67
INSTANTIATE <a> . x0:{List a|len _v >= 0 && len _v < len xs} -> {Int|_v == len x0}
INTO x183:{List A67|len _v >= 0 && len _v < len xs} -> {Int|_v == len x183}
Adding constraint length, xs C0 |- x183:List A67 -> {Int|False} <: xs:{List {a|False}|False} -> Int ()
Trying length
Adding constraint length, xs C0 |- x183:{List A67|len _v >= 0 && len _v < len xs} -> {Int|_v == len x183} <: X107:_ -> Int ()
Adding constraint length, xs C0 |- x183:{List A67|len _v >= 0 && len _v < len xs} -> {Int|_v == len x183} /\ X107:_ -> Int ()
Adding constraint length, xs C0 |- {Int|_v == zero + 1} <: Int ()
Adding constraint length, xs C0 |- LET x38:({Int|_v == zero + 1}) IN {Int|_v == x38 + 1} <: Int ()
Score for inc (inc (inc
                      zero)) is 100016.28571428571
Current queue size 9
Checking inc (inc (inc zero)) in
\xs . ??
Typing Constraints
length, xs C0 |- LET x38:({Int|_v == zero + 1}) IN {Int|_v == x38 + 1} <: Int ()
length, xs C0 |- {Int|_v == zero + 1} <: Int ()
length, xs C0 |- {Int|_v == zero} <: Int ()
Type assignment
Simple Constraints
length, xs C0 |- {Int|_v == zero} <: Int ()
length, xs C0 |- {Int|_v == zero + 1} <: Int ()
length, x38, xs C0 |- {Int|_v == x38 + 1} <: Int ()
Pred assignment
After process simple constraints
Constraints
QMap
  C0 -> {}
Checking consistency
Candidates (1)
  0: [C0 -> {}] (1 0)
Remaining Candidates (1)
  0: [C0 -> {}] (1 0)
Checking program inc (inc (inc
                             zero))
Checking inc (inc (inc
                     zero)) :: {Int|_v == len xs} in
\xs . ??
Adding constraint length, xs C0 |- LET x20:(LET x38:({Int|_v == zero + 1}) IN {Int|_v == x38 + 1}) IN {Int|_v == x20 + 1} <: {Int|_v == len xs} ()
Typing Constraints
length, xs C0 |- LET x20:(LET x38:({Int|_v == zero + 1}) IN {Int|_v == x38 + 1}) IN {Int|_v == x20 + 1} <: {Int|_v == len xs} ()
Type assignment
Simple Constraints
length, x20, xs C0 |- {Int|_v == x20 + 1} <: {Int|_v == len xs} ()
Pred assignment
After process simple constraints
length, x20, xs C0 |- {Int|_v == x20 + 1} <: {Int|_v == len xs} ()
Constraints
  C0 && (_v == x20 + 1 && (x20 == x38 + 1 && (x38 == zero + 1 && (zero == 0 && len xs >= 0)))) ==> _v == len xs
QMap
  C0 -> {}
Candidates (1)
  0: [C0 -> {}] (1 1)
Chosen candidate: 0: [C0 -> {}] (1 1)
Invalid Constraint: C0 && (_v == x20 + 1 && (x20 == x38 + 1 && (x38 == zero + 1 && (zero == 0 && len xs >= 0)))) ==> _v == len xs
Strengthening: C0 && (_v == x20 + 1 && (x20 == x38 + 1 && (x38 == zero + 1 && (zero == 0 && len xs >= 0)))) ==> _v == len xs
Instantiated axioms:
All assumptions:
_v == x20 + 1, x20 == x38 + 1, x38 == zero + 1, zero == 0, len xs >= 0
RHS: _v == len xs
assumption _v == x20 + 1 && (x20 == x38 + 1 && (x38 == zero + 1 && (zero == 0 && len xs >= 0)))
mustHave !(_v == len xs)
qualsList []
Optimal valuations:
Pruned valuations:
Diffs: (0)
TYPE ERROR: Cannot find sufficiently strong refinements
when checking inc (inc (inc
                          zero)) :: {Int|_v == len xs} in
\xs . inc (inc (inc zero))
Score for foldr
            (?? :: x15:List A6 -> x16:A6 -> x17:{A5|P1 x15 _v} -> {A5|P1 ((Cons x16 x15)) _v})
            (?? :: {A5|P1 (Nil) _v})
            (?? :: List A6) is 17.011904761904763
Current queue size 8
Checking foldr
           (?? :: x15:List A6 -> x16:A6 -> x17:{A5|P1 x15 _v} -> {A5|P1 ((Cons x16 x15)) _v})
           (?? :: {A5|P1 (Nil) _v})
           (?? :: List A6) in
\xs . ??
Typing Constraints
length, xs C0 |- x14:(x15:List A6 -> x16:A6 -> x17:{A5|P1 x15 _v} -> {A5|P1 ((Cons x16 x15)) _v}) -> x18:{A5|P1 (Nil) _v} -> x19:List A6 -> {A5|P1 x19 _v} /\ X3:_ -> X2:_ -> X1:_ -> {Int|_v == len xs} ()
length, xs C0 |- x14:(x15:List A6 -> x16:A6 -> x17:{A5|P1 x15 _v} -> {A5|P1 ((Cons x16 x15)) _v}) -> x18:{A5|P1 (Nil) _v} -> x19:List A6 -> {A5|P1 x19 _v} <: X3:_ -> X2:_ -> X1:_ -> {Int|_v == len xs} ()
|- P1 :: List (A6) -> A5 -> Bool
length, xs |- A6
length, xs |- A5
UNIFY A5 WITH {Int|_v == len xs} PRODUCING {Int|U6}
Type assignment
A5 -> {Int|U6}
Typing Constraints
length, xs |- A6
|- P1 :: List (A6) -> A5 -> Bool
Type assignment
A5 -> {Int|U6}
Simple Constraints
length, xs |- {Int|U6}
X1, X2, length, xs C0 |- {Int|U6 && P1 X1 _v} <: {Int|_v == len xs} ()
length, x18, x19, xs C0 |- {Int|U6 && P1 x19 _v} /\ {Int|_v == len xs} ()
WARNING: free vars in predicate |- P1 :: List (A6) -> A5 -> Bool
Pred assignment
After process simple constraints
length, x18, x19, xs C0 |- {Int|U6 && P1 x19 _v} /\ {Int|_v == len xs} ()
Constraints
QMap
  C0 -> {}
  U6 -> {_v == len xs}
Checking consistency
  C0 && (_v == len xs && (len x19 >= 0 && (len xs >= 0 && (U6 && P1 x19 _v))))
Candidates (1)
  0: [C0 -> {}, U6 -> {}] (0 0)
Remaining Candidates (1)
  0: [C0 -> {}, U6 -> {}] (0 0)
*******************Filling holes in foldr
                                      (?? :: x15:List A6 -> x16:A6 -> x17:{A5|P1 x15 _v} -> {A5|P1 ((Cons x16 x15)) _v})
                                      (?? :: {A5|P1 (Nil) _v})
                                      (?? :: List A6)
Score for foldr f0
            (?? :: {A5|P1 (Nil) _v})
            (?? :: LET x18:({A5|P1 (Nil) _v}) IN List A6) is 19.61904761904762
Current queue size 8
Checking foldr f0
           (?? :: {A5|P1 (Nil) _v})
           (?? :: LET x18:({A5|P1 (Nil) _v}) IN List A6) in
\xs . ??
Typing Constraints
X1, X2, length, xs C0 |- {Int|U6 && P1 X1 _v} <: {Int|_v == len xs} ()
length, xs |- A6
|- P1 :: List (A6) -> A5 -> Bool
Type assignment
A5 -> {Int|U6}
Simple Constraints
X1, X2, length, xs C0 |- {Int|U6 && P1 X1 _v} <: {Int|_v == len xs} ()
WARNING: free vars in predicate |- P1 :: List (A6) -> A5 -> Bool
Pred assignment
After process simple constraints
Constraints
QMap
  C0 -> {}
  U6 -> {_v == len xs}
Checking consistency
Candidates (1)
  0: [C0 -> {}, U6 -> {}] (0 0)
Remaining Candidates (1)
  0: [C0 -> {}, U6 -> {}] (0 0)
Adding constraint length, xs C0 |- x18:{A5|P1 (Nil) _v} -> x19:List A6 -> {A5|P1 x19 _v} /\ X2:_ -> X1:_ -> {Int|_v == len xs} ()
Adding constraint length, xs C0 |- x18:{A5|P1 (Nil) _v} -> x19:List A6 -> {A5|P1 x19 _v} <: X2:_ -> X1:_ -> {Int|_v == len xs} ()
Typing Constraints
length, xs C0 |- x18:{A5|P1 (Nil) _v} -> x19:List A6 -> {A5|P1 x19 _v} <: X2:_ -> X1:_ -> {Int|_v == len xs} ()
length, xs C0 |- x18:{A5|P1 (Nil) _v} -> x19:List A6 -> {A5|P1 x19 _v} /\ X2:_ -> X1:_ -> {Int|_v == len xs} ()
X1, X2, length, xs C0 |- {Int|U6 && P1 X1 _v} <: {Int|_v == len xs} ()
length, xs |- A6
|- P1 :: List (A6) -> A5 -> Bool
Type assignment
A5 -> {Int|U6}
Simple Constraints
X1, X2, length, xs C0 |- {Int|U6 && P1 X1 _v} <: {Int|_v == len xs} ()
length, x18, x19, xs C0 |- {Int|U6 && P1 x19 _v} /\ {Int|_v == len xs} ()
X1, X2, length, xs C0 |- {Int|U6 && P1 X1 _v} <: {Int|_v == len xs} ()
WARNING: free vars in predicate |- P1 :: List (A6) -> A5 -> Bool
Pred assignment
After process simple constraints
length, x18, x19, xs C0 |- {Int|U6 && P1 x19 _v} /\ {Int|_v == len xs} ()
Constraints
QMap
  C0 -> {}
  U6 -> {_v == len xs}
Checking consistency
  C0 && (_v == len xs && (len x19 >= 0 && (len xs >= 0 && (U6 && P1 x19 _v))))
Candidates (1)
  0: [C0 -> {}, U6 -> {}] (0 0)
Remaining Candidates (1)
  0: [C0 -> {}, U6 -> {}] (0 0)
*******************Filling holes in foldr
                                      f0 (?? :: {A5|P1 (Nil) _v})
                                      (?? :: LET x18:({A5|P1 (Nil) _v}) IN List A6)
Looking for succinct type Int
INSTANTIATE x:Int -> {Int|_v == x - 1}
INTO x184:Int -> {Int|_v == x184 - 1}
Trying dec
Adding constraint length, xs C0 |- x184:Int -> {Int|_v == x184 - 1} <: X108:_ -> {Int|U6 && P1 (Nil) _v} ()
Adding constraint length, xs C0 |- x184:Int -> {Int|_v == x184 - 1} /\ X108:_ -> {Int|U6 && P1 (Nil) _v} ()
INSTANTIATE x:Int -> {Int|_v == x + 1}
INTO x185:Int -> {Int|_v == x185 + 1}
Trying inc
Adding constraint length, xs C0 |- x185:Int -> {Int|_v == x185 + 1} <: X109:_ -> {Int|U6 && P1 (Nil) _v} ()
Adding constraint length, xs C0 |- x185:Int -> {Int|_v == x185 + 1} /\ X109:_ -> {Int|U6 && P1 (Nil) _v} ()
Trying zero
Adding constraint length, xs C0 |- {Int|_v == zero} <: {Int|U6 && P1 (Nil) _v} ()
Adding constraint length, xs |- A68
Adding constraint length, xs |- A69
Adding constraint |- P22 :: List (A69) -> A68 -> Bool
INSTANTIATE <b> . <a> . <p :: List (a) -> b -> Bool> . f:(xs:List a -> x:a -> acc:{b|p xs _v} -> {b|p ((Cons x xs)) _v}) -> seed:{b|p (Nil) _v} -> ys:List a -> {b|p ys _v}
INTO x186:(x187:List A69 -> x188:A69 -> x189:{A68|P22 x187 _v} -> {A68|P22 ((Cons x188 x187)) _v}) -> x190:{A68|P22 (Nil) _v} -> x191:List A69 -> {A68|P22 x191 _v}
Trying foldr
Adding constraint length, xs C0 |- x186:(x187:List A69 -> x188:A69 -> x189:{A68|P22 x187 _v} -> {A68|P22 ((Cons x188 x187)) _v}) -> x190:{A68|P22 (Nil) _v} -> x191:List A69 -> {A68|P22 x191 _v} <: X112:_ -> X111:_ -> X110:_ -> {Int|U6 && P1 (Nil) _v} ()
Adding constraint length, xs C0 |- x186:(x187:List A69 -> x188:A69 -> x189:{A68|P22 x187 _v} -> {A68|P22 ((Cons x188 x187)) _v}) -> x190:{A68|P22 (Nil) _v} -> x191:List A69 -> {A68|P22 x191 _v} /\ X112:_ -> X111:_ -> X110:_ -> {Int|U6 && P1 (Nil) _v} ()
Adding constraint length, xs |- A70
INSTANTIATE <a> . x0:{List a|len _v >= 0 && len _v < len xs} -> {Int|_v == len x0}
INTO x192:{List A70|len _v >= 0 && len _v < len xs} -> {Int|_v == len x192}
Adding constraint length, xs C0 |- x192:List A70 -> {Int|False} <: xs:{List {a|False}|False} -> Int ()
Trying length
Adding constraint length, xs C0 |- x192:{List A70|len _v >= 0 && len _v < len xs} -> {Int|_v == len x192} <: X113:_ -> {Int|U6 && P1 (Nil) _v} ()
Adding constraint length, xs C0 |- x192:{List A70|len _v >= 0 && len _v < len xs} -> {Int|_v == len x192} /\ X113:_ -> {Int|U6 && P1 (Nil) _v} ()
Score for foldr f0 zero
            (?? :: List A6) is 21.285714285714285
Current queue size 12
Checking foldr f0 zero
           (?? :: List A6) in
\xs . ??
Typing Constraints
length, xs C0 |- {Int|_v == zero} <: {Int|U6 && P1 (Nil) _v} ()
X1, X2, length, xs C0 |- {Int|U6 && P1 X1 _v} <: {Int|_v == len xs} ()
length, xs |- A6
|- P1 :: List (A6) -> A5 -> Bool
Type assignment
A5 -> {Int|U6}
Simple Constraints
X1, X2, length, xs C0 |- {Int|U6 && P1 X1 _v} <: {Int|_v == len xs} ()
length, xs C0 |- {Int|_v == zero} <: {Int|U6 && P1 (Nil) _v} ()
WARNING: free vars in predicate |- P1 :: List (A6) -> A5 -> Bool
Pred assignment
After process simple constraints
Constraints
QMap
  C0 -> {}
  U6 -> {_v == len xs}
Checking consistency
Candidates (1)
  0: [C0 -> {}, U6 -> {}] (0 0)
Remaining Candidates (1)
  0: [C0 -> {}, U6 -> {}] (0 0)
Adding constraint length, xs C0 |- x19:List A6 -> {A5|P1 x19 _v} /\ X1:_ -> {Int|_v == len xs} ()
Adding constraint length, xs C0 |- x19:List A6 -> {A5|P1 x19 _v} <: X1:_ -> {Int|_v == len xs} ()
Typing Constraints
length, xs C0 |- x19:List A6 -> {A5|P1 x19 _v} <: X1:_ -> {Int|_v == len xs} ()
length, xs C0 |- x19:List A6 -> {A5|P1 x19 _v} /\ X1:_ -> {Int|_v == len xs} ()
length, xs C0 |- {Int|_v == zero} <: {Int|U6 && P1 (Nil) _v} ()
X1, X2, length, xs C0 |- {Int|U6 && P1 X1 _v} <: {Int|_v == len xs} ()
length, xs |- A6
|- P1 :: List (A6) -> A5 -> Bool
Type assignment
A5 -> {Int|U6}
Simple Constraints
X1, X2, length, xs C0 |- {Int|U6 && P1 X1 _v} <: {Int|_v == len xs} ()
length, xs C0 |- {Int|_v == zero} <: {Int|U6 && P1 (Nil) _v} ()
length, x19, xs C0 |- {Int|U6 && P1 x19 _v} /\ {Int|_v == len xs} ()
X1, length, xs C0 |- {Int|U6 && P1 X1 _v} <: {Int|_v == len xs} ()
WARNING: free vars in predicate |- P1 :: List (A6) -> A5 -> Bool
Pred assignment
After process simple constraints
length, x19, xs C0 |- {Int|U6 && P1 x19 _v} /\ {Int|_v == len xs} ()
Constraints
QMap
  C0 -> {}
  U6 -> {_v == len xs}
Checking consistency
  C0 && (_v == len xs && (len x19 >= 0 && (len xs >= 0 && (U6 && P1 x19 _v))))
Candidates (1)
  0: [C0 -> {}, U6 -> {}] (0 0)
Remaining Candidates (1)
  0: [C0 -> {}, U6 -> {}] (0 0)
*******************Filling holes in foldr
                                      f0 zero (?? :: List A6)
Looking for succinct type {List |  | any, |  | }
Adding constraint length, xs |- A71
INSTANTIATE <a> . {List a|_v == (Nil)}
INTO {List {A71|False}|_v == (Nil)}
Trying Nil
Adding constraint length, xs C0 |- {List {A71|False}|_v == (Nil)} <: List A6 ()
Adding constraint length, xs |- A72
Adding constraint length, xs |- A73
Adding constraint |- P23 :: List (A73) -> A72 -> Bool
INSTANTIATE <b> . <a> . <p :: List (a) -> b -> Bool> . f:(xs:List a -> x:a -> acc:{b|p xs _v} -> {b|p ((Cons x xs)) _v}) -> seed:{b|p (Nil) _v} -> ys:List a -> {b|p ys _v}
INTO x193:(x194:List A73 -> x195:A73 -> x196:{A72|P23 x194 _v} -> {A72|P23 ((Cons x195 x194)) _v}) -> x197:{A72|P23 (Nil) _v} -> x198:List A73 -> {A72|P23 x198 _v}
Trying foldr
Adding constraint length, xs C0 |- x193:(x194:List A73 -> x195:A73 -> x196:{A72|P23 x194 _v} -> {A72|P23 ((Cons x195 x194)) _v}) -> x197:{A72|P23 (Nil) _v} -> x198:List A73 -> {A72|P23 x198 _v} <: X116:_ -> X115:_ -> X114:_ -> List A6 ()
Adding constraint length, xs C0 |- x193:(x194:List A73 -> x195:A73 -> x196:{A72|P23 x194 _v} -> {A72|P23 ((Cons x195 x194)) _v}) -> x197:{A72|P23 (Nil) _v} -> x198:List A73 -> {A72|P23 x198 _v} /\ X116:_ -> X115:_ -> X114:_ -> List A6 ()
Trying xs
Adding constraint length, xs C0 |- {List a|_v == xs} <: List A6 ()
Score for foldr f0 zero
            xs is 100020.28571428571
Current queue size 14
Checking foldr f0 zero xs in
\xs . ??
Typing Constraints
length, xs C0 |- {List a|_v == xs} <: List A6 ()
X1, length, xs C0 |- {Int|U6 && P1 X1 _v} <: {Int|_v == len xs} ()
length, xs C0 |- {Int|_v == zero} <: {Int|U6 && P1 (Nil) _v} ()
X1, X2, length, xs C0 |- {Int|U6 && P1 X1 _v} <: {Int|_v == len xs} ()
length, xs |- A6
|- P1 :: List (A6) -> A5 -> Bool
UNIFY A6 WITH a PRODUCING {a|U7}
Type assignment
A5 -> {Int|U6}
A6 -> {a|U7}
Typing Constraints
|- P1 :: List (A6) -> A5 -> Bool
Type assignment
A5 -> {Int|U6}
A6 -> {a|U7}
Simple Constraints
length, xs |- {a|U7}
X1, X2, length, xs C0 |- {Int|U6 && P1 X1 _v} <: {Int|_v == len xs} ()
length, xs C0 |- {Int|_v == zero} <: {Int|U6 && P1 (Nil) _v} ()
X1, length, xs C0 |- {Int|U6 && P1 X1 _v} <: {Int|_v == len xs} ()
length, xs C0 |- {List|_v == xs} <: List ()
length, xs C0 |- a <: {a|U7} ()
Pred assignment
P1 -> P1
After process simple constraints
length, xs C0 |- a <: {a|U7} ()
X1, length, xs C0 |- {Int|U6 && [_0 -> X1, _1 -> _v]P1} <: {Int|_v == len xs} ()
length, xs C0 |- {Int|_v == zero} <: {Int|U6 && [_0 -> (Nil), _1 -> _v]P1} ()
X1, X2, length, xs C0 |- {Int|U6 && [_0 -> X1, _1 -> _v]P1} <: {Int|_v == len xs} ()
Constraints
  False ==> _v == len xs
  C0 && (_v == zero && (zero == 0 && len xs >= 0)) ==> U6 && [_0 -> (Nil), _1 -> _v]P1
  False ==> _v == len xs
  C0 ==> U7
QMap
  C0 -> {}
  P1 -> {_1 == len _0}
  U6 -> {_v == len xs}
  U7 -> {}
Checking consistency
Candidates (1)
  0: [C0 -> {}, P1 -> {}, U6 -> {}, U7 -> {}] (3 0)
Remaining Candidates (1)
  0: [C0 -> {}, P1 -> {}, U6 -> {}, U7 -> {}] (3 0)
Checking program foldr f0 zero
                   xs
Checking foldr f0 zero
           xs :: {Int|_v == len xs} in
\xs . ??
Adding constraint length, xs C0 |- {A5|P1 xs _v} <: {Int|_v == len xs} ()
Typing Constraints
length, xs C0 |- {A5|P1 xs _v} <: {Int|_v == len xs} ()
Type assignment
A5 -> {Int|U6}
A6 -> {a|U7}
Simple Constraints
length, xs C0 |- {Int|U6 && P1 xs _v} <: {Int|_v == len xs} ()
Pred assignment
P1 -> P1
After process simple constraints
length, xs C0 |- {Int|U6 && [_0 -> xs, _1 -> _v]P1} <: {Int|_v == len xs} ()
Constraints
  C0 && (len xs >= 0 && (U6 && [_0 -> xs, _1 -> _v]P1)) ==> _v == len xs
QMap
  C0 -> {}
  P1 -> {_1 == len _0}
  U6 -> {_v == len xs}
  U7 -> {}
Candidates (1)
  0: [C0 -> {}, P1 -> {}, U6 -> {}, U7 -> {}] (3 1)
Chosen candidate: 0: [C0 -> {}, P1 -> {}, U6 -> {}, U7 -> {}] (3 1)
Invalid Constraint: C0 && (len xs >= 0 && (U6 && [_0 -> xs, _1 -> _v]P1)) ==> _v == len xs
Strengthening: C0 && (len xs >= 0 && (U6 && [_0 -> xs, _1 -> _v]P1)) ==> _v == len xs
Instantiated axioms:
All assumptions:
len xs >= 0
RHS: _v == len xs
assumption len xs >= 0
mustHave !(_v == len xs)
qualsList [_v == len xs]
Optimal valuations:
{_v == len xs}
Pruned valuations:
{_v == len xs}
Diffs: (2)
[C0 -> {}, P1 -> {_1 == len _0}, U6 -> {}]
[C0 -> {}, P1 -> {}, U6 -> {_v == len xs}]
Checking consistency
Candidates (2)
  0.0: [C0 -> {}, P1 -> {_1 == len _0}, U6 -> {}, U7 -> {}] (4 0)
  0.1: [C0 -> {}, P1 -> {}, U6 -> {_v == len xs}, U7 -> {}] (3 1)
Remaining Candidates (2)
  0.0: [C0 -> {}, P1 -> {_1 == len _0}, U6 -> {}, U7 -> {}] (4 0)
  0.1: [C0 -> {}, P1 -> {}, U6 -> {_v == len xs}, U7 -> {}] (3 1)
Typing Constraints
Type assignment
A5 -> {Int|U6}
A6 -> {a|U7}
Simple Constraints
Pred assignment
P1 -> P1
After process simple constraints
Constraints
QMap
  C0 -> {}
  P1 -> {_1 == len _0}
  U6 -> {_v == len xs}
  U7 -> {}
Checking consistency
Candidates (2)
  0.0: [C0 -> {}, P1 -> {_1 == len _0}, U6 -> {}, U7 -> {}] (4 0)
  0.1: [C0 -> {}, P1 -> {}, U6 -> {_v == len xs}, U7 -> {}] (3 1)
Remaining Candidates (2)
  0.0: [C0 -> {}, P1 -> {_1 == len _0}, U6 -> {}, U7 -> {}] (4 0)
  0.1: [C0 -> {}, P1 -> {}, U6 -> {_v == len xs}, U7 -> {}] (3 1)
Auxiliary goals are:
length, xs C0 |- f0 :: x15:List A6 -> x16:A6 -> x17:{Int|U6 && P1 x15 _v} -> {Int|U6 && P1 ((Cons x16 x15)) _v}
f0 = ??
(depth: 0)
PICK AUXILIARY GOAL length, xs C0 |- f0 :: x15:List A6 -> x16:A6 -> x17:{Int|U6 && P1 x15 _v} -> {Int|U6 && P1 ((Cons x16 x15)) _v}
f0 = ??
(depth: 0)
ADD __goal__ : All {a,}. {3{List |  | a, |  | },a,Int,}->Int
ADD Cons : All {A74,}. {2{List |  | A74, |  | },A74,}->{List |  | A74, |  | }
ADD Nil : All {A75,}. {List |  | A75, |  | }
ADD dec : {1Int,}->Int
ADD f0 : All {A76,}. {3{List |  | A76, |  | },A76,Int,}->Int
ADD foldr : All {A77,A78,}. {3{List |  | A78, |  | },{3{List |  | A78, |  | },A78,A77,}->A77,A77,}->A77
ADD inc : {1Int,}->Int
ADD length : All {A79,}. {1{List |  | A79, |  | },}->Int
ADD xs : All {a,}. {List |  | a, |  | }
ADD zero : Int
Checking error in
\xs . error
Adding constraint f0, length, xs C0 |- {Int|0 == 0 && xs == xs} <: {Int|False} ()
Typing Constraints
f0, length, xs C0 |- {Int|0 == 0 && xs == xs} <: {Int|False} ()
Type assignment
A5 -> {Int|U6}
A6 -> {a|U7}
Simple Constraints
f0, length, xs C0 |- {Int|0 == 0 && xs == xs} <: {Int|False} ()
Pred assignment
P1 -> P1
After process simple constraints
f0, length, xs C0 |- {Int|0 == 0 && xs == xs} <: {Int|False} ()
Constraints
  C0 && (len xs >= 0 && (0 == 0 && xs == xs)) ==> False
QMap
  C0 -> {}
  P1 -> {_1 == len _0}
  U6 -> {_v == len xs}
  U7 -> {}
Candidates (2)
  0.0: [C0 -> {}, P1 -> {_1 == len _0}, U6 -> {}, U7 -> {}] (4 1)
  0.1: [C0 -> {}, P1 -> {}, U6 -> {_v == len xs}, U7 -> {}] (3 2)
Chosen candidate: 0.1: [C0 -> {}, P1 -> {}, U6 -> {_v == len xs}, U7 -> {}] (3 2)
Invalid Constraint: C0 && (_v == zero && (zero == 0 && len xs >= 0)) ==> U6 && [_0 -> (Nil), _1 -> _v]P1
Strengthening: C0 && (_v == zero && (zero == 0 && len xs >= 0)) ==> _v == len xs && True
Instantiated axioms:
All assumptions:
_v == zero, zero == 0, len xs >= 0
RHS: _v == len xs && True
assumption _v == zero && (zero == 0 && len xs >= 0)
mustHave !(_v == len xs && True)
qualsList []
Optimal valuations:
Pruned valuations:
Diffs: (0)
Candidates (1)
  0.0: [C0 -> {}, P1 -> {_1 == len _0}, U6 -> {}, U7 -> {}] (4 1)
Chosen candidate: 0.0: [C0 -> {}, P1 -> {_1 == len _0}, U6 -> {}, U7 -> {}] (4 1)
Invalid Constraint: C0 && (len xs >= 0 && (0 == 0 && xs == xs)) ==> False
Strengthening: C0 && (len xs >= 0 && (0 == 0 && xs == xs)) ==> False
Instantiated axioms:
All assumptions:
0 == 0, xs == xs, len xs >= 0
RHS: False
assumption True
mustHave 0 == 0 && (xs == xs && len xs >= 0)
qualsList []
Optimal valuations:
Pruned valuations:
Diffs: (0)
TYPE ERROR: Cannot find sufficiently strong refinements
when checking error in
\xs . error
ADD x15 : All {a,}. {List |  | a, |  | }
ADD x16 : All {a,}. a
ADD x17 : Int
Adding constraint f0, length, x15, x16, x17, xs |- C1
Looking for type {Int|U6 && P1 ((Cons x16 x15)) _v}
Score for (?? :: {Int|U6 && P1 ((Cons x16 x15)) _v}) is 103.0
Current queue size 0
Checking (?? :: {Int|U6 && P1 ((Cons x16 x15)) _v}) in
\xs . \x15 . \x16 . \x17 . ??
Typing Constraints
f0, length, x15, x16, x17, xs |- C1
Type assignment
A5 -> {Int|U6}
A6 -> {a|U7}
Simple Constraints
f0, length, x15, x16, x17, xs |- C1
Pred assignment
P1 -> P1
After process simple constraints
Constraints
QMap
  C0 -> {}
  C1 -> {}
  P1 -> {_1 == len _0}
  U6 -> {_v == len xs}
  U7 -> {}
Checking consistency
Candidates (2)
  0.0: [C0 -> {}, C1 -> {}, P1 -> {_1 == len _0}, U6 -> {}, U7 -> {}] (4 0)
  0.1: [C0 -> {}, C1 -> {}, P1 -> {}, U6 -> {_v == len xs}, U7 -> {}] (3 1)
Remaining Candidates (2)
  0.0: [C0 -> {}, C1 -> {}, P1 -> {_1 == len _0}, U6 -> {}, U7 -> {}] (4 0)
  0.1: [C0 -> {}, C1 -> {}, P1 -> {}, U6 -> {_v == len xs}, U7 -> {}] (3 1)
*******************Filling holes in (?? :: {Int|U6 && P1 ((Cons x16 x15)) _v})
Looking for succinct type Int
INSTANTIATE x:Int -> {Int|_v == x - 1}
INTO x217:Int -> {Int|_v == x217 - 1}
Trying dec
Adding constraint f0, length, x15, x16, x17, xs C0, C1 |- x217:Int -> {Int|_v == x217 - 1} <: X117:_ -> {Int|U6 && P1 ((Cons x16 x15)) _v} ()
Adding constraint f0, length, x15, x16, x17, xs C0, C1 |- x217:Int -> {Int|_v == x217 - 1} /\ X117:_ -> {Int|U6 && P1 ((Cons x16 x15)) _v} ()
INSTANTIATE x:Int -> {Int|_v == x + 1}
INTO x218:Int -> {Int|_v == x218 + 1}
Trying inc
Adding constraint f0, length, x15, x16, x17, xs C0, C1 |- x218:Int -> {Int|_v == x218 + 1} <: X118:_ -> {Int|U6 && P1 ((Cons x16 x15)) _v} ()
Adding constraint f0, length, x15, x16, x17, xs C0, C1 |- x218:Int -> {Int|_v == x218 + 1} /\ X118:_ -> {Int|U6 && P1 ((Cons x16 x15)) _v} ()
Trying zero
Adding constraint f0, length, x15, x16, x17, xs C0, C1 |- {Int|_v == zero} <: {Int|U6 && P1 ((Cons x16 x15)) _v} ()
Adding constraint f0, length, x15, x16, x17, xs |- A80
Adding constraint f0, length, x15, x16, x17, xs |- A81
Adding constraint |- P25 :: List (A81) -> A80 -> Bool
INSTANTIATE <b> . <a> . <p :: List (a) -> b -> Bool> . f:(xs:List a -> x:a -> acc:{b|p xs _v} -> {b|p ((Cons x xs)) _v}) -> seed:{b|p (Nil) _v} -> ys:List a -> {b|p ys _v}
INTO x219:(x220:List A81 -> x221:A81 -> x222:{A80|P25 x220 _v} -> {A80|P25 ((Cons x221 x220)) _v}) -> x223:{A80|P25 (Nil) _v} -> x224:List A81 -> {A80|P25 x224 _v}
Trying foldr
Adding constraint f0, length, x15, x16, x17, xs C0, C1 |- x219:(x220:List A81 -> x221:A81 -> x222:{A80|P25 x220 _v} -> {A80|P25 ((Cons x221 x220)) _v}) -> x223:{A80|P25 (Nil) _v} -> x224:List A81 -> {A80|P25 x224 _v} <: X121:_ -> X120:_ -> X119:_ -> {Int|U6 && P1 ((Cons x16 x15)) _v} ()
Adding constraint f0, length, x15, x16, x17, xs C0, C1 |- x219:(x220:List A81 -> x221:A81 -> x222:{A80|P25 x220 _v} -> {A80|P25 ((Cons x221 x220)) _v}) -> x223:{A80|P25 (Nil) _v} -> x224:List A81 -> {A80|P25 x224 _v} /\ X121:_ -> X120:_ -> X119:_ -> {Int|U6 && P1 ((Cons x16 x15)) _v} ()
Adding constraint f0, length, x15, x16, x17, xs |- A82
INSTANTIATE <a> . x199:{List {a|U7}|len _v >= 0 && len _v < len x15} -> x16:{a|[x15 -> x199]U7} -> x17:{Int|[x15 -> x199]U6 && P1 x199 _v} -> {Int|[x15 -> x199]U6 && P1 ((Cons x16 x199)) _v}
INTO x225:{List {A82|U7}|len _v >= 0 && len _v < len x15} -> x226:{A82|[x15 -> x225, x199 -> x225]U7} -> x227:{Int|[x15 -> x225, x16 -> x226, x199 -> x225]U6 && P1 x225 _v} -> {Int|[x15 -> x225, x16 -> x226, x17 -> x227, x199 -> x225]U6 && P1 ((Cons x226 x225)) _v}
Adding constraint f0, length, x15, x16, x17, xs C0, C1 |- x225:List A82 -> x226:A82 -> x227:Int -> {Int|False} <: x15:{List {A6|False}|False} -> x16:{A6|False} -> x17:{Int|False} -> Int ()
Trying f0
Adding constraint f0, length, x15, x16, x17, xs C0, C1 |- x225:{List {A82|U7}|len _v >= 0 && len _v < len x15} -> x226:{A82|[x15 -> x225, x199 -> x225]U7} -> x227:{Int|[x15 -> x225, x16 -> x226, x199 -> x225]U6 && P1 x225 _v} -> {Int|[x15 -> x225, x16 -> x226, x17 -> x227, x199 -> x225]U6 && P1 ((Cons x226 x225)) _v} <: X124:_ -> X123:_ -> X122:_ -> {Int|U6 && P1 ((Cons x16 x15)) _v} ()
Adding constraint f0, length, x15, x16, x17, xs C0, C1 |- x225:{List {A82|U7}|len _v >= 0 && len _v < len x15} -> x226:{A82|[x15 -> x225, x199 -> x225]U7} -> x227:{Int|[x15 -> x225, x16 -> x226, x199 -> x225]U6 && P1 x225 _v} -> {Int|[x15 -> x225, x16 -> x226, x17 -> x227, x199 -> x225]U6 && P1 ((Cons x226 x225)) _v} /\ X124:_ -> X123:_ -> X122:_ -> {Int|U6 && P1 ((Cons x16 x15)) _v} ()
Trying x17
Adding constraint f0, length, x15, x16, x17, xs C0, C1 |- {Int|_v == x17} <: {Int|U6 && P1 ((Cons x16 x15)) _v} ()
Adding constraint f0, length, x15, x16, x17, xs |- A83
INSTANTIATE <a> . x0:{List a|len _v >= 0 && len _v < len xs} -> {Int|_v == len x0}
INTO x228:{List A83|len _v >= 0 && len _v < len xs} -> {Int|_v == len x228}
Adding constraint f0, length, x15, x16, x17, xs C0, C1 |- x228:List A83 -> {Int|False} <: xs:{List {a|False}|False} -> Int ()
Trying length
Adding constraint f0, length, x15, x16, x17, xs C0, C1 |- x228:{List A83|len _v >= 0 && len _v < len xs} -> {Int|_v == len x228} <: X125:_ -> {Int|U6 && P1 ((Cons x16 x15)) _v} ()
Adding constraint f0, length, x15, x16, x17, xs C0, C1 |- x228:{List A83|len _v >= 0 && len _v < len xs} -> {Int|_v == len x228} /\ X125:_ -> {Int|U6 && P1 ((Cons x16 x15)) _v} ()
Score for x17 is 100101.0
Current queue size 6
Checking x17 in
\xs . \x15 . \x16 . \x17 . ??
Typing Constraints
f0, length, x15, x16, x17, xs C0, C1 |- {Int|_v == x17} <: {Int|U6 && P1 ((Cons x16 x15)) _v} ()
Type assignment
A5 -> {Int|U6}
A6 -> {a|U7}
Simple Constraints
f0, length, x15, x16, x17, xs C0, C1 |- {Int|_v == x17} <: {Int|U6 && P1 ((Cons x16 x15)) _v} ()
Pred assignment
P1 -> P1
After process simple constraints
f0, length, x15, x16, x17, xs C0, C1 |- {Int|_v == x17} <: {Int|U6 && [_0 -> (Cons x16 x15), _1 -> _v]P1} ()
Constraints
  C0 && (C1 && ([_v -> x16]U7 && (_v == x17 && (len x15 >= 0 && (len xs >= 0 && ([_v -> x17]U6 && [_0 -> x15, _1 -> x17, _v -> x17]P1)))))) ==> U6 && [_0 -> (Cons x16 x15), _1 -> _v]P1
QMap
  C0 -> {}
  C1 -> {}
  P1 -> {_1 == len _0}
  U6 -> {_v == len xs}
  U7 -> {}
Candidates (2)
  0.0: [C0 -> {}, C1 -> {}, P1 -> {_1 == len _0}, U6 -> {}, U7 -> {}] (4 1)
  0.1: [C0 -> {}, C1 -> {}, P1 -> {}, U6 -> {_v == len xs}, U7 -> {}] (4 1)
Chosen candidate: 0.1: [C0 -> {}, C1 -> {}, P1 -> {}, U6 -> {_v == len xs}, U7 -> {}] (4 1)
Invalid Constraint: C0 && (_v == zero && (zero == 0 && len xs >= 0)) ==> U6 && [_0 -> (Nil), _1 -> _v]P1
Strengthening: C0 && (_v == zero && (zero == 0 && len xs >= 0)) ==> _v == len xs && True
Instantiated axioms:
All assumptions:
_v == zero, zero == 0, len xs >= 0
RHS: _v == len xs && True
assumption _v == zero && (zero == 0 && len xs >= 0)
mustHave !(_v == len xs && True)
qualsList []
Optimal valuations:
Pruned valuations:
Diffs: (0)
Candidates (1)
  0.0: [C0 -> {}, C1 -> {}, P1 -> {_1 == len _0}, U6 -> {}, U7 -> {}] (4 1)
Chosen candidate: 0.0: [C0 -> {}, C1 -> {}, P1 -> {_1 == len _0}, U6 -> {}, U7 -> {}] (4 1)
Invalid Constraint: C0 && (C1 && ([_v -> x16]U7 && (_v == x17 && (len x15 >= 0 && (len xs >= 0 && ([_v -> x17]U6 && [_0 -> x15, _1 -> x17, _v -> x17]P1)))))) ==> U6 && [_0 -> (Cons x16 x15), _1 -> _v]P1
Strengthening: C0 && (C1 && ([_v -> x16]U7 && (_v == x17 && (len x15 >= 0 && (len xs >= 0 && ([_v -> x17]U6 && [_0 -> x15, _1 -> x17, _v -> x17]P1)))))) ==> True && _v == len ((Cons x16 x15))
Instantiated axioms:
len ((Cons x16 x15)) == 1 + len x15, elems ((Cons x16 x15)) == [x16] + elems x15
All assumptions:
_v == x17, x17 == len x15, len ((Cons x16 x15)) == 1 + len x15, elems ((Cons x16 x15)) == [x16] + elems x15, len x15 >= 0, len xs >= 0
RHS: True && _v == len ((Cons x16 x15))
assumption _v == x17 && (x17 == len x15 && (len ((Cons x16 x15)) == 1 + len x15 && (elems ((Cons x16 x15)) == [x16] + elems x15 && (len x15 >= 0 && len xs >= 0))))
mustHave !(True && _v == len ((Cons x16 x15)))
qualsList [x17 == len xs]
Optimal valuations:
Pruned valuations:
Diffs: (0)
TYPE ERROR: Cannot find sufficiently strong refinements
Score for zero is 100100.0
Current queue size 5
Checking zero in
\xs . \x15 . \x16 . \x17 . ??
Typing Constraints
f0, length, x15, x16, x17, xs C0, C1 |- {Int|_v == zero} <: {Int|U6 && P1 ((Cons x16 x15)) _v} ()
Type assignment
A5 -> {Int|U6}
A6 -> {a|U7}
Simple Constraints
f0, length, x15, x16, x17, xs C0, C1 |- {Int|_v == zero} <: {Int|U6 && P1 ((Cons x16 x15)) _v} ()
Pred assignment
P1 -> P1
After process simple constraints
f0, length, x15, x16, x17, xs C0, C1 |- {Int|_v == zero} <: {Int|U6 && [_0 -> (Cons x16 x15), _1 -> _v]P1} ()
Constraints
  C0 && (C1 && ([_v -> x16]U7 && (_v == zero && (zero == 0 && (len x15 >= 0 && len xs >= 0))))) ==> U6 && [_0 -> (Cons x16 x15), _1 -> _v]P1
QMap
  C0 -> {}
  C1 -> {}
  P1 -> {_1 == len _0}
  U6 -> {_v == len xs}
  U7 -> {}
Candidates (2)
  0.0: [C0 -> {}, C1 -> {}, P1 -> {_1 == len _0}, U6 -> {}, U7 -> {}] (4 1)
  0.1: [C0 -> {}, C1 -> {}, P1 -> {}, U6 -> {_v == len xs}, U7 -> {}] (3 2)
Chosen candidate: 0.1: [C0 -> {}, C1 -> {}, P1 -> {}, U6 -> {_v == len xs}, U7 -> {}] (3 2)
Invalid Constraint: C0 && (C1 && ([_v -> x16]U7 && (_v == zero && (zero == 0 && (len x15 >= 0 && len xs >= 0))))) ==> U6 && [_0 -> (Cons x16 x15), _1 -> _v]P1
Strengthening: C0 && (C1 && ([_v -> x16]U7 && (_v == zero && (zero == 0 && (len x15 >= 0 && len xs >= 0))))) ==> _v == len xs && True
Instantiated axioms:
All assumptions:
_v == zero, zero == 0, len x15 >= 0, len xs >= 0
RHS: _v == len xs && True
assumption _v == zero && (zero == 0 && (len x15 >= 0 && len xs >= 0))
mustHave !(_v == len xs && True)
qualsList []
Optimal valuations:
Pruned valuations:
Diffs: (0)
Candidates (1)
  0.0: [C0 -> {}, C1 -> {}, P1 -> {_1 == len _0}, U6 -> {}, U7 -> {}] (4 1)
Chosen candidate: 0.0: [C0 -> {}, C1 -> {}, P1 -> {_1 == len _0}, U6 -> {}, U7 -> {}] (4 1)
Invalid Constraint: C0 && (C1 && ([_v -> x16]U7 && (_v == zero && (zero == 0 && (len x15 >= 0 && len xs >= 0))))) ==> U6 && [_0 -> (Cons x16 x15), _1 -> _v]P1
Strengthening: C0 && (C1 && ([_v -> x16]U7 && (_v == zero && (zero == 0 && (len x15 >= 0 && len xs >= 0))))) ==> True && _v == len ((Cons x16 x15))
Instantiated axioms:
len ((Cons x16 x15)) == 1 + len x15, elems ((Cons x16 x15)) == [x16] + elems x15
All assumptions:
_v == zero, zero == 0, len ((Cons x16 x15)) == 1 + len x15, elems ((Cons x16 x15)) == [x16] + elems x15, len x15 >= 0, len xs >= 0
RHS: True && _v == len ((Cons x16 x15))
assumption _v == zero && (zero == 0 && (len ((Cons x16 x15)) == 1 + len x15 && (elems ((Cons x16 x15)) == [x16] + elems x15 && (len x15 >= 0 && len xs >= 0))))
mustHave !(True && _v == len ((Cons x16 x15)))
qualsList []
Optimal valuations:
Pruned valuations:
Diffs: (0)
TYPE ERROR: Cannot find sufficiently strong refinements
Score for dec
            (?? :: Int) is 38.333333333333336
Current queue size 4
Checking dec (?? :: Int) in
\xs . \x15 . \x16 . \x17 . ??
Typing Constraints
f0, length, x15, x16, x17, xs C0, C1 |- x217:Int -> {Int|_v == x217 - 1} /\ X117:_ -> {Int|U6 && P1 ((Cons x16 x15)) _v} ()
f0, length, x15, x16, x17, xs C0, C1 |- x217:Int -> {Int|_v == x217 - 1} <: X117:_ -> {Int|U6 && P1 ((Cons x16 x15)) _v} ()
Type assignment
A5 -> {Int|U6}
A6 -> {a|U7}
Simple Constraints
X117, f0, length, x15, x16, x17, xs C0, C1 |- {Int|_v == X117 - 1} <: {Int|U6 && P1 ((Cons x16 x15)) _v} ()
f0, length, x15, x16, x17, x217, xs C0, C1 |- {Int|_v == x217 - 1} /\ {Int|U6 && P1 ((Cons x16 x15)) _v} ()
Pred assignment
P1 -> P1
After process simple constraints
f0, length, x15, x16, x17, x217, xs C0, C1 |- {Int|_v == x217 - 1} /\ {Int|U6 && [_0 -> (Cons x16 x15), _1 -> _v]P1} ()
X117, f0, length, x15, x16, x17, xs C0, C1 |- {Int|_v == X117 - 1} <: {Int|U6 && [_0 -> (Cons x16 x15), _1 -> _v]P1} ()
Constraints
  False ==> U6 && [_0 -> (Cons x16 x15), _1 -> _v]P1
QMap
  C0 -> {}
  C1 -> {}
  P1 -> {_1 == len _0}
  U6 -> {_v == len xs}
  U7 -> {}
Checking consistency
  C0 && (C1 && ([_v -> x16]U7 && (_v == x217 - 1 && (len x15 >= 0 && (len xs >= 0 && (U6 && [_0 -> (Cons x16 x15), _1 -> _v]P1))))))
Candidates (2)
  0.0: [C0 -> {}, C1 -> {}, P1 -> {_1 == len _0}, U6 -> {}, U7 -> {}] (5 0)
  0.1: [C0 -> {}, C1 -> {}, P1 -> {}, U6 -> {_v == len xs}, U7 -> {}] (4 1)
Remaining Candidates (2)
  0.0: [C0 -> {}, C1 -> {}, P1 -> {_1 == len _0}, U6 -> {}, U7 -> {}] (5 0)
  0.1: [C0 -> {}, C1 -> {}, P1 -> {}, U6 -> {_v == len xs}, U7 -> {}] (4 1)
*******************Filling holes in dec
                                      (?? :: Int)
Looking for succinct type Int
INSTANTIATE x:Int -> {Int|_v == x - 1}
INTO x229:Int -> {Int|_v == x229 - 1}
Trying dec
Adding constraint f0, length, x15, x16, x17, xs C0, C1 |- x229:Int -> {Int|_v == x229 - 1} <: X126:_ -> Int ()
Adding constraint f0, length, x15, x16, x17, xs C0, C1 |- x229:Int -> {Int|_v == x229 - 1} /\ X126:_ -> Int ()
INSTANTIATE x:Int -> {Int|_v == x + 1}
INTO x230:Int -> {Int|_v == x230 + 1}
Trying inc
Adding constraint f0, length, x15, x16, x17, xs C0, C1 |- x230:Int -> {Int|_v == x230 + 1} <: X127:_ -> Int ()
Adding constraint f0, length, x15, x16, x17, xs C0, C1 |- x230:Int -> {Int|_v == x230 + 1} /\ X127:_ -> Int ()
Trying zero
Adding constraint f0, length, x15, x16, x17, xs C0, C1 |- {Int|_v == zero} <: Int ()
Adding constraint f0, length, x15, x16, x17, xs |- A84
Adding constraint f0, length, x15, x16, x17, xs |- A85
Adding constraint |- P26 :: List (A85) -> A84 -> Bool
INSTANTIATE <b> . <a> . <p :: List (a) -> b -> Bool> . f:(xs:List a -> x:a -> acc:{b|p xs _v} -> {b|p ((Cons x xs)) _v}) -> seed:{b|p (Nil) _v} -> ys:List a -> {b|p ys _v}
INTO x231:(x232:List A85 -> x233:A85 -> x234:{A84|P26 x232 _v} -> {A84|P26 ((Cons x233 x232)) _v}) -> x235:{A84|P26 (Nil) _v} -> x236:List A85 -> {A84|P26 x236 _v}
Trying foldr
Adding constraint f0, length, x15, x16, x17, xs C0, C1 |- x231:(x232:List A85 -> x233:A85 -> x234:{A84|P26 x232 _v} -> {A84|P26 ((Cons x233 x232)) _v}) -> x235:{A84|P26 (Nil) _v} -> x236:List A85 -> {A84|P26 x236 _v} <: X130:_ -> X129:_ -> X128:_ -> Int ()
Adding constraint f0, length, x15, x16, x17, xs C0, C1 |- x231:(x232:List A85 -> x233:A85 -> x234:{A84|P26 x232 _v} -> {A84|P26 ((Cons x233 x232)) _v}) -> x235:{A84|P26 (Nil) _v} -> x236:List A85 -> {A84|P26 x236 _v} /\ X130:_ -> X129:_ -> X128:_ -> Int ()
Adding constraint f0, length, x15, x16, x17, xs |- A86
INSTANTIATE <a> . x199:{List {a|U7}|len _v >= 0 && len _v < len x15} -> x16:{a|[x15 -> x199]U7} -> x17:{Int|[x15 -> x199]U6 && P1 x199 _v} -> {Int|[x15 -> x199]U6 && P1 ((Cons x16 x199)) _v}
INTO x237:{List {A86|U7}|len _v >= 0 && len _v < len x15} -> x238:{A86|[x15 -> x237, x199 -> x237]U7} -> x239:{Int|[x15 -> x237, x16 -> x238, x199 -> x237]U6 && P1 x237 _v} -> {Int|[x15 -> x237, x16 -> x238, x17 -> x239, x199 -> x237]U6 && P1 ((Cons x238 x237)) _v}
Adding constraint f0, length, x15, x16, x17, xs C0, C1 |- x237:List A86 -> x238:A86 -> x239:Int -> {Int|False} <: x15:{List {A6|False}|False} -> x16:{A6|False} -> x17:{Int|False} -> Int ()
Trying f0
Adding constraint f0, length, x15, x16, x17, xs C0, C1 |- x237:{List {A86|U7}|len _v >= 0 && len _v < len x15} -> x238:{A86|[x15 -> x237, x199 -> x237]U7} -> x239:{Int|[x15 -> x237, x16 -> x238, x199 -> x237]U6 && P1 x237 _v} -> {Int|[x15 -> x237, x16 -> x238, x17 -> x239, x199 -> x237]U6 && P1 ((Cons x238 x237)) _v} <: X133:_ -> X132:_ -> X131:_ -> Int ()
Adding constraint f0, length, x15, x16, x17, xs C0, C1 |- x237:{List {A86|U7}|len _v >= 0 && len _v < len x15} -> x238:{A86|[x15 -> x237, x199 -> x237]U7} -> x239:{Int|[x15 -> x237, x16 -> x238, x199 -> x237]U6 && P1 x237 _v} -> {Int|[x15 -> x237, x16 -> x238, x17 -> x239, x199 -> x237]U6 && P1 ((Cons x238 x237)) _v} /\ X133:_ -> X132:_ -> X131:_ -> Int ()
Trying x17
Adding constraint f0, length, x15, x16, x17, xs C0, C1 |- {Int|_v == x17} <: Int ()
Adding constraint f0, length, x15, x16, x17, xs |- A87
INSTANTIATE <a> . x0:{List a|len _v >= 0 && len _v < len xs} -> {Int|_v == len x0}
INTO x240:{List A87|len _v >= 0 && len _v < len xs} -> {Int|_v == len x240}
Adding constraint f0, length, x15, x16, x17, xs C0, C1 |- x240:List A87 -> {Int|False} <: xs:{List {a|False}|False} -> Int ()
Trying length
Adding constraint f0, length, x15, x16, x17, xs C0, C1 |- x240:{List A87|len _v >= 0 && len _v < len xs} -> {Int|_v == len x240} <: X134:_ -> Int ()
Adding constraint f0, length, x15, x16, x17, xs C0, C1 |- x240:{List A87|len _v >= 0 && len _v < len xs} -> {Int|_v == len x240} /\ X134:_ -> Int ()
Score for dec
            x17 is 100036.33333333333
Current queue size 10
Checking dec x17 in
\xs . \x15 . \x16 . \x17 . ??
Typing Constraints
f0, length, x15, x16, x17, xs C0, C1 |- {Int|_v == x17} <: Int ()
Type assignment
A5 -> {Int|U6}
A6 -> {a|U7}
Simple Constraints
f0, length, x15, x16, x17, xs C0, C1 |- {Int|_v == x17} <: Int ()
Pred assignment
P1 -> P1
After process simple constraints
Constraints
QMap
  C0 -> {}
  C1 -> {}
  P1 -> {_1 == len _0}
  U6 -> {_v == len xs}
  U7 -> {}
Checking consistency
Candidates (2)
  0.0: [C0 -> {}, C1 -> {}, P1 -> {_1 == len _0}, U6 -> {}, U7 -> {}] (5 0)
  0.1: [C0 -> {}, C1 -> {}, P1 -> {}, U6 -> {_v == len xs}, U7 -> {}] (4 1)
Remaining Candidates (2)
  0.0: [C0 -> {}, C1 -> {}, P1 -> {_1 == len _0}, U6 -> {}, U7 -> {}] (5 0)
  0.1: [C0 -> {}, C1 -> {}, P1 -> {}, U6 -> {_v == len xs}, U7 -> {}] (4 1)
Checking program dec x17
Checking dec
           x17 :: {Int|U6 && P1 ((Cons x16 x15)) _v} in
\xs . \x15 . \x16 . \x17 . ??
Adding constraint f0, length, x15, x16, x17, xs C0, C1 |- {Int|_v == x17 - 1} <: {Int|U6 && P1 ((Cons x16 x15)) _v} ()
Typing Constraints
f0, length, x15, x16, x17, xs C0, C1 |- {Int|_v == x17 - 1} <: {Int|U6 && P1 ((Cons x16 x15)) _v} ()
Type assignment
A5 -> {Int|U6}
A6 -> {a|U7}
Simple Constraints
f0, length, x15, x16, x17, xs C0, C1 |- {Int|_v == x17 - 1} <: {Int|U6 && P1 ((Cons x16 x15)) _v} ()
Pred assignment
P1 -> P1
After process simple constraints
f0, length, x15, x16, x17, xs C0, C1 |- {Int|_v == x17 - 1} <: {Int|U6 && [_0 -> (Cons x16 x15), _1 -> _v]P1} ()
Constraints
  C0 && (C1 && ([_v -> x16]U7 && (_v == x17 - 1 && (len x15 >= 0 && (len xs >= 0 && ([_v -> x17]U6 && [_0 -> x15, _1 -> x17, _v -> x17]P1)))))) ==> U6 && [_0 -> (Cons x16 x15), _1 -> _v]P1
QMap
  C0 -> {}
  C1 -> {}
  P1 -> {_1 == len _0}
  U6 -> {_v == len xs}
  U7 -> {}
Candidates (2)
  0.0: [C0 -> {}, C1 -> {}, P1 -> {_1 == len _0}, U6 -> {}, U7 -> {}] (5 1)
  0.1: [C0 -> {}, C1 -> {}, P1 -> {}, U6 -> {_v == len xs}, U7 -> {}] (4 2)
Chosen candidate: 0.1: [C0 -> {}, C1 -> {}, P1 -> {}, U6 -> {_v == len xs}, U7 -> {}] (4 2)
Invalid Constraint: C0 && (_v == zero && (zero == 0 && len xs >= 0)) ==> U6 && [_0 -> (Nil), _1 -> _v]P1
Strengthening: C0 && (_v == zero && (zero == 0 && len xs >= 0)) ==> _v == len xs && True
Instantiated axioms:
All assumptions:
_v == zero, zero == 0, len xs >= 0
RHS: _v == len xs && True
assumption _v == zero && (zero == 0 && len xs >= 0)
mustHave !(_v == len xs && True)
qualsList []
Optimal valuations:
Pruned valuations:
Diffs: (0)
Candidates (1)
  0.0: [C0 -> {}, C1 -> {}, P1 -> {_1 == len _0}, U6 -> {}, U7 -> {}] (5 1)
Chosen candidate: 0.0: [C0 -> {}, C1 -> {}, P1 -> {_1 == len _0}, U6 -> {}, U7 -> {}] (5 1)
Invalid Constraint: C0 && (C1 && ([_v -> x16]U7 && (_v == x17 - 1 && (len x15 >= 0 && (len xs >= 0 && ([_v -> x17]U6 && [_0 -> x15, _1 -> x17, _v -> x17]P1)))))) ==> U6 && [_0 -> (Cons x16 x15), _1 -> _v]P1
Strengthening: C0 && (C1 && ([_v -> x16]U7 && (_v == x17 - 1 && (len x15 >= 0 && (len xs >= 0 && ([_v -> x17]U6 && [_0 -> x15, _1 -> x17, _v -> x17]P1)))))) ==> True && _v == len ((Cons x16 x15))
Instantiated axioms:
len ((Cons x16 x15)) == 1 + len x15, elems ((Cons x16 x15)) == [x16] + elems x15
All assumptions:
_v == x17 - 1, x17 == len x15, len ((Cons x16 x15)) == 1 + len x15, elems ((Cons x16 x15)) == [x16] + elems x15, len x15 >= 0, len xs >= 0
RHS: True && _v == len ((Cons x16 x15))
assumption _v == x17 - 1 && (x17 == len x15 && (len ((Cons x16 x15)) == 1 + len x15 && (elems ((Cons x16 x15)) == [x16] + elems x15 && (len x15 >= 0 && len xs >= 0))))
mustHave !(True && _v == len ((Cons x16 x15)))
qualsList [x17 == len xs]
Optimal valuations:
Pruned valuations:
Diffs: (0)
TYPE ERROR: Cannot find sufficiently strong refinements
when checking dec x17 ::
{Int|True && _v == len ((Cons x16 x15))}
in
\xs . \x15 . \x16 . \x17 . dec
                             x17
Score for dec
            zero is 100035.33333333333
Current queue size 9
Checking dec zero in
\xs . \x15 . \x16 . \x17 . ??
Typing Constraints
f0, length, x15, x16, x17, xs C0, C1 |- {Int|_v == zero} <: Int ()
Type assignment
A5 -> {Int|U6}
A6 -> {a|U7}
Simple Constraints
f0, length, x15, x16, x17, xs C0, C1 |- {Int|_v == zero} <: Int ()
Pred assignment
P1 -> P1
After process simple constraints
Constraints
QMap
  C0 -> {}
  C1 -> {}
  P1 -> {_1 == len _0}
  U6 -> {_v == len xs}
  U7 -> {}
Checking consistency
Candidates (2)
  0.0: [C0 -> {}, C1 -> {}, P1 -> {_1 == len _0}, U6 -> {}, U7 -> {}] (5 0)
  0.1: [C0 -> {}, C1 -> {}, P1 -> {}, U6 -> {_v == len xs}, U7 -> {}] (4 1)
Remaining Candidates (2)
  0.0: [C0 -> {}, C1 -> {}, P1 -> {_1 == len _0}, U6 -> {}, U7 -> {}] (5 0)
  0.1: [C0 -> {}, C1 -> {}, P1 -> {}, U6 -> {_v == len xs}, U7 -> {}] (4 1)
Checking program dec zero
Checking dec
           zero :: {Int|U6 && P1 ((Cons x16 x15)) _v} in
\xs . \x15 . \x16 . \x17 . ??
Adding constraint f0, length, x15, x16, x17, xs C0, C1 |- {Int|_v == zero - 1} <: {Int|U6 && P1 ((Cons x16 x15)) _v} ()
Typing Constraints
f0, length, x15, x16, x17, xs C0, C1 |- {Int|_v == zero - 1} <: {Int|U6 && P1 ((Cons x16 x15)) _v} ()
Type assignment
A5 -> {Int|U6}
A6 -> {a|U7}
Simple Constraints
f0, length, x15, x16, x17, xs C0, C1 |- {Int|_v == zero - 1} <: {Int|U6 && P1 ((Cons x16 x15)) _v} ()
Pred assignment
P1 -> P1
After process simple constraints
f0, length, x15, x16, x17, xs C0, C1 |- {Int|_v == zero - 1} <: {Int|U6 && [_0 -> (Cons x16 x15), _1 -> _v]P1} ()
Constraints
  C0 && (C1 && ([_v -> x16]U7 && (_v == zero - 1 && (zero == 0 && (len x15 >= 0 && len xs >= 0))))) ==> U6 && [_0 -> (Cons x16 x15), _1 -> _v]P1
QMap
  C0 -> {}
  C1 -> {}
  P1 -> {_1 == len _0}
  U6 -> {_v == len xs}
  U7 -> {}
Candidates (2)
  0.0: [C0 -> {}, C1 -> {}, P1 -> {_1 == len _0}, U6 -> {}, U7 -> {}] (5 1)
  0.1: [C0 -> {}, C1 -> {}, P1 -> {}, U6 -> {_v == len xs}, U7 -> {}] (4 2)
Chosen candidate: 0.1: [C0 -> {}, C1 -> {}, P1 -> {}, U6 -> {_v == len xs}, U7 -> {}] (4 2)
Invalid Constraint: C0 && (C1 && ([_v -> x16]U7 && (_v == zero - 1 && (zero == 0 && (len x15 >= 0 && len xs >= 0))))) ==> U6 && [_0 -> (Cons x16 x15), _1 -> _v]P1
Strengthening: C0 && (C1 && ([_v -> x16]U7 && (_v == zero - 1 && (zero == 0 && (len x15 >= 0 && len xs >= 0))))) ==> _v == len xs && True
Instantiated axioms:
All assumptions:
_v == zero - 1, zero == 0, len x15 >= 0, len xs >= 0
RHS: _v == len xs && True
assumption _v == zero - 1 && (zero == 0 && (len x15 >= 0 && len xs >= 0))
mustHave !(_v == len xs && True)
qualsList []
Optimal valuations:
Pruned valuations:
Diffs: (0)
Candidates (1)
  0.0: [C0 -> {}, C1 -> {}, P1 -> {_1 == len _0}, U6 -> {}, U7 -> {}] (5 1)
Chosen candidate: 0.0: [C0 -> {}, C1 -> {}, P1 -> {_1 == len _0}, U6 -> {}, U7 -> {}] (5 1)
Invalid Constraint: C0 && (C1 && ([_v -> x16]U7 && (_v == zero - 1 && (zero == 0 && (len x15 >= 0 && len xs >= 0))))) ==> U6 && [_0 -> (Cons x16 x15), _1 -> _v]P1
Strengthening: C0 && (C1 && ([_v -> x16]U7 && (_v == zero - 1 && (zero == 0 && (len x15 >= 0 && len xs >= 0))))) ==> True && _v == len ((Cons x16 x15))
Instantiated axioms:
len ((Cons x16 x15)) == 1 + len x15, elems ((Cons x16 x15)) == [x16] + elems x15
All assumptions:
_v == zero - 1, zero == 0, len ((Cons x16 x15)) == 1 + len x15, elems ((Cons x16 x15)) == [x16] + elems x15, len x15 >= 0, len xs >= 0
RHS: True && _v == len ((Cons x16 x15))
assumption _v == zero - 1 && (zero == 0 && (len ((Cons x16 x15)) == 1 + len x15 && (elems ((Cons x16 x15)) == [x16] + elems x15 && (len x15 >= 0 && len xs >= 0))))
mustHave !(True && _v == len ((Cons x16 x15)))
qualsList []
Optimal valuations:
Pruned valuations:
Diffs: (0)
TYPE ERROR: Cannot find sufficiently strong refinements
when checking dec zero ::
{Int|True && _v == len ((Cons x16 x15))}
in
\xs . \x15 . \x16 . \x17 . dec
                             zero
Score for inc
            (?? :: Int) is 38.333333333333336
Current queue size 8
Checking inc (?? :: Int) in
\xs . \x15 . \x16 . \x17 . ??
Typing Constraints
f0, length, x15, x16, x17, xs C0, C1 |- x218:Int -> {Int|_v == x218 + 1} /\ X118:_ -> {Int|U6 && P1 ((Cons x16 x15)) _v} ()
f0, length, x15, x16, x17, xs C0, C1 |- x218:Int -> {Int|_v == x218 + 1} <: X118:_ -> {Int|U6 && P1 ((Cons x16 x15)) _v} ()
Type assignment
A5 -> {Int|U6}
A6 -> {a|U7}
Simple Constraints
X118, f0, length, x15, x16, x17, xs C0, C1 |- {Int|_v == X118 + 1} <: {Int|U6 && P1 ((Cons x16 x15)) _v} ()
f0, length, x15, x16, x17, x218, xs C0, C1 |- {Int|_v == x218 + 1} /\ {Int|U6 && P1 ((Cons x16 x15)) _v} ()
Pred assignment
P1 -> P1
After process simple constraints
f0, length, x15, x16, x17, x218, xs C0, C1 |- {Int|_v == x218 + 1} /\ {Int|U6 && [_0 -> (Cons x16 x15), _1 -> _v]P1} ()
X118, f0, length, x15, x16, x17, xs C0, C1 |- {Int|_v == X118 + 1} <: {Int|U6 && [_0 -> (Cons x16 x15), _1 -> _v]P1} ()
Constraints
  False ==> U6 && [_0 -> (Cons x16 x15), _1 -> _v]P1
QMap
  C0 -> {}
  C1 -> {}
  P1 -> {_1 == len _0}
  U6 -> {_v == len xs}
  U7 -> {}
Checking consistency
  C0 && (C1 && ([_v -> x16]U7 && (_v == x218 + 1 && (len x15 >= 0 && (len xs >= 0 && (U6 && [_0 -> (Cons x16 x15), _1 -> _v]P1))))))
Candidates (2)
  0.0: [C0 -> {}, C1 -> {}, P1 -> {_1 == len _0}, U6 -> {}, U7 -> {}] (5 0)
  0.1: [C0 -> {}, C1 -> {}, P1 -> {}, U6 -> {_v == len xs}, U7 -> {}] (4 1)
Remaining Candidates (2)
  0.0: [C0 -> {}, C1 -> {}, P1 -> {_1 == len _0}, U6 -> {}, U7 -> {}] (5 0)
  0.1: [C0 -> {}, C1 -> {}, P1 -> {}, U6 -> {_v == len xs}, U7 -> {}] (4 1)
*******************Filling holes in inc
                                      (?? :: Int)
Looking for succinct type Int
INSTANTIATE x:Int -> {Int|_v == x - 1}
INTO x241:Int -> {Int|_v == x241 - 1}
Trying dec
Adding constraint f0, length, x15, x16, x17, xs C0, C1 |- x241:Int -> {Int|_v == x241 - 1} <: X135:_ -> Int ()
Adding constraint f0, length, x15, x16, x17, xs C0, C1 |- x241:Int -> {Int|_v == x241 - 1} /\ X135:_ -> Int ()
INSTANTIATE x:Int -> {Int|_v == x + 1}
INTO x242:Int -> {Int|_v == x242 + 1}
Trying inc
Adding constraint f0, length, x15, x16, x17, xs C0, C1 |- x242:Int -> {Int|_v == x242 + 1} <: X136:_ -> Int ()
Adding constraint f0, length, x15, x16, x17, xs C0, C1 |- x242:Int -> {Int|_v == x242 + 1} /\ X136:_ -> Int ()
Trying zero
Adding constraint f0, length, x15, x16, x17, xs C0, C1 |- {Int|_v == zero} <: Int ()
Adding constraint f0, length, x15, x16, x17, xs |- A88
Adding constraint f0, length, x15, x16, x17, xs |- A89
Adding constraint |- P27 :: List (A89) -> A88 -> Bool
INSTANTIATE <b> . <a> . <p :: List (a) -> b -> Bool> . f:(xs:List a -> x:a -> acc:{b|p xs _v} -> {b|p ((Cons x xs)) _v}) -> seed:{b|p (Nil) _v} -> ys:List a -> {b|p ys _v}
INTO x243:(x244:List A89 -> x245:A89 -> x246:{A88|P27 x244 _v} -> {A88|P27 ((Cons x245 x244)) _v}) -> x247:{A88|P27 (Nil) _v} -> x248:List A89 -> {A88|P27 x248 _v}
Trying foldr
Adding constraint f0, length, x15, x16, x17, xs C0, C1 |- x243:(x244:List A89 -> x245:A89 -> x246:{A88|P27 x244 _v} -> {A88|P27 ((Cons x245 x244)) _v}) -> x247:{A88|P27 (Nil) _v} -> x248:List A89 -> {A88|P27 x248 _v} <: X139:_ -> X138:_ -> X137:_ -> Int ()
Adding constraint f0, length, x15, x16, x17, xs C0, C1 |- x243:(x244:List A89 -> x245:A89 -> x246:{A88|P27 x244 _v} -> {A88|P27 ((Cons x245 x244)) _v}) -> x247:{A88|P27 (Nil) _v} -> x248:List A89 -> {A88|P27 x248 _v} /\ X139:_ -> X138:_ -> X137:_ -> Int ()
Adding constraint f0, length, x15, x16, x17, xs |- A90
INSTANTIATE <a> . x199:{List {a|U7}|len _v >= 0 && len _v < len x15} -> x16:{a|[x15 -> x199]U7} -> x17:{Int|[x15 -> x199]U6 && P1 x199 _v} -> {Int|[x15 -> x199]U6 && P1 ((Cons x16 x199)) _v}
INTO x249:{List {A90|U7}|len _v >= 0 && len _v < len x15} -> x250:{A90|[x15 -> x249, x199 -> x249]U7} -> x251:{Int|[x15 -> x249, x16 -> x250, x199 -> x249]U6 && P1 x249 _v} -> {Int|[x15 -> x249, x16 -> x250, x17 -> x251, x199 -> x249]U6 && P1 ((Cons x250 x249)) _v}
Adding constraint f0, length, x15, x16, x17, xs C0, C1 |- x249:List A90 -> x250:A90 -> x251:Int -> {Int|False} <: x15:{List {A6|False}|False} -> x16:{A6|False} -> x17:{Int|False} -> Int ()
Trying f0
Adding constraint f0, length, x15, x16, x17, xs C0, C1 |- x249:{List {A90|U7}|len _v >= 0 && len _v < len x15} -> x250:{A90|[x15 -> x249, x199 -> x249]U7} -> x251:{Int|[x15 -> x249, x16 -> x250, x199 -> x249]U6 && P1 x249 _v} -> {Int|[x15 -> x249, x16 -> x250, x17 -> x251, x199 -> x249]U6 && P1 ((Cons x250 x249)) _v} <: X142:_ -> X141:_ -> X140:_ -> Int ()
Adding constraint f0, length, x15, x16, x17, xs C0, C1 |- x249:{List {A90|U7}|len _v >= 0 && len _v < len x15} -> x250:{A90|[x15 -> x249, x199 -> x249]U7} -> x251:{Int|[x15 -> x249, x16 -> x250, x199 -> x249]U6 && P1 x249 _v} -> {Int|[x15 -> x249, x16 -> x250, x17 -> x251, x199 -> x249]U6 && P1 ((Cons x250 x249)) _v} /\ X142:_ -> X141:_ -> X140:_ -> Int ()
Trying x17
Adding constraint f0, length, x15, x16, x17, xs C0, C1 |- {Int|_v == x17} <: Int ()
Adding constraint f0, length, x15, x16, x17, xs |- A91
INSTANTIATE <a> . x0:{List a|len _v >= 0 && len _v < len xs} -> {Int|_v == len x0}
INTO x252:{List A91|len _v >= 0 && len _v < len xs} -> {Int|_v == len x252}
Adding constraint f0, length, x15, x16, x17, xs C0, C1 |- x252:List A91 -> {Int|False} <: xs:{List {a|False}|False} -> Int ()
Trying length
Adding constraint f0, length, x15, x16, x17, xs C0, C1 |- x252:{List A91|len _v >= 0 && len _v < len xs} -> {Int|_v == len x252} <: X143:_ -> Int ()
Adding constraint f0, length, x15, x16, x17, xs C0, C1 |- x252:{List A91|len _v >= 0 && len _v < len xs} -> {Int|_v == len x252} /\ X143:_ -> Int ()
Score for inc
            x17 is 100036.33333333333
Current queue size 14
Checking inc x17 in
\xs . \x15 . \x16 . \x17 . ??
Typing Constraints
f0, length, x15, x16, x17, xs C0, C1 |- {Int|_v == x17} <: Int ()
Type assignment
A5 -> {Int|U6}
A6 -> {a|U7}
Simple Constraints
f0, length, x15, x16, x17, xs C0, C1 |- {Int|_v == x17} <: Int ()
Pred assignment
P1 -> P1
After process simple constraints
Constraints
QMap
  C0 -> {}
  C1 -> {}
  P1 -> {_1 == len _0}
  U6 -> {_v == len xs}
  U7 -> {}
Checking consistency
Candidates (2)
  0.0: [C0 -> {}, C1 -> {}, P1 -> {_1 == len _0}, U6 -> {}, U7 -> {}] (5 0)
  0.1: [C0 -> {}, C1 -> {}, P1 -> {}, U6 -> {_v == len xs}, U7 -> {}] (4 1)
Remaining Candidates (2)
  0.0: [C0 -> {}, C1 -> {}, P1 -> {_1 == len _0}, U6 -> {}, U7 -> {}] (5 0)
  0.1: [C0 -> {}, C1 -> {}, P1 -> {}, U6 -> {_v == len xs}, U7 -> {}] (4 1)
Checking program inc x17
Checking inc
           x17 :: {Int|U6 && P1 ((Cons x16 x15)) _v} in
\xs . \x15 . \x16 . \x17 . ??
Adding constraint f0, length, x15, x16, x17, xs C0, C1 |- {Int|_v == x17 + 1} <: {Int|U6 && P1 ((Cons x16 x15)) _v} ()
Typing Constraints
f0, length, x15, x16, x17, xs C0, C1 |- {Int|_v == x17 + 1} <: {Int|U6 && P1 ((Cons x16 x15)) _v} ()
Type assignment
A5 -> {Int|U6}
A6 -> {a|U7}
Simple Constraints
f0, length, x15, x16, x17, xs C0, C1 |- {Int|_v == x17 + 1} <: {Int|U6 && P1 ((Cons x16 x15)) _v} ()
Pred assignment
P1 -> P1
After process simple constraints
f0, length, x15, x16, x17, xs C0, C1 |- {Int|_v == x17 + 1} <: {Int|U6 && [_0 -> (Cons x16 x15), _1 -> _v]P1} ()
Constraints
  C0 && (C1 && ([_v -> x16]U7 && (_v == x17 + 1 && (len x15 >= 0 && (len xs >= 0 && ([_v -> x17]U6 && [_0 -> x15, _1 -> x17, _v -> x17]P1)))))) ==> U6 && [_0 -> (Cons x16 x15), _1 -> _v]P1
QMap
  C0 -> {}
  C1 -> {}
  P1 -> {_1 == len _0}
  U6 -> {_v == len xs}
  U7 -> {}
Checking consistency
Candidates (2)
  0.0: [C0 -> {}, C1 -> {}, P1 -> {_1 == len _0}, U6 -> {}, U7 -> {}] (6 0)
  0.1: [C0 -> {}, C1 -> {}, P1 -> {}, U6 -> {_v == len xs}, U7 -> {}] (4 2)
Remaining Candidates (2)
  0.0: [C0 -> {}, C1 -> {}, P1 -> {_1 == len _0}, U6 -> {}, U7 -> {}] (6 0)
  0.1: [C0 -> {}, C1 -> {}, P1 -> {}, U6 -> {_v == len xs}, U7 -> {}] (4 2)
Typing Constraints
Type assignment
A5 -> {Int|U6}
A6 -> {a|U7}
Simple Constraints
Pred assignment
P1 -> P1
After process simple constraints
Constraints
QMap
  C0 -> {}
  C1 -> {}
  P1 -> {_1 == len _0}
  U6 -> {_v == len xs}
  U7 -> {}
Checking consistency
Candidates (2)
  0.0: [C0 -> {}, C1 -> {}, P1 -> {_1 == len _0}, U6 -> {}, U7 -> {}] (6 0)
  0.1: [C0 -> {}, C1 -> {}, P1 -> {}, U6 -> {_v == len xs}, U7 -> {}] (4 2)
Remaining Candidates (2)
  0.0: [C0 -> {}, C1 -> {}, P1 -> {_1 == len _0}, U6 -> {}, U7 -> {}] (6 0)
  0.1: [C0 -> {}, C1 -> {}, P1 -> {}, U6 -> {_v == len xs}, U7 -> {}] (4 2)
Auxiliary goals are:
Constraints
QMap
  C0 -> {}
  C1 -> {}
  P1 -> {_1 == len _0}
  U6 -> {_v == len xs}
  U7 -> {}
Candidates (1)
  0.1: [C0 -> {}, C1 -> {}, P1 -> {}, U6 -> {_v == len xs}, U7 -> {}] (4 2)
Chosen candidate: 0.1: [C0 -> {}, C1 -> {}, P1 -> {}, U6 -> {_v == len xs}, U7 -> {}] (4 2)
Invalid Constraint: C0 && (_v == zero && (zero == 0 && len xs >= 0)) ==> U6 && [_0 -> (Nil), _1 -> _v]P1
Strengthening: C0 && (_v == zero && (zero == 0 && len xs >= 0)) ==> _v == len xs && True
Instantiated axioms:
All assumptions:
_v == zero, zero == 0, len xs >= 0
RHS: _v == len xs && True
assumption _v == zero && (zero == 0 && len xs >= 0)
mustHave !(_v == len xs && True)
qualsList []
Optimal valuations:
Pruned valuations:
Diffs: (0)
Auxiliary goals are:
