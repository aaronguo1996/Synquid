Checking error in
error
Adding constraint add |- {Int|0 == 0} <: {Int|False} ()
Typing Constraints
add |- {Int|0 == 0} <: {Int|False} ()
Type assignment
Simple Constraints
add |- {Int|0 == 0} <: {Int|False} ()
Pred assignment
After process simple constraints
add |- {Int|0 == 0} <: {Int|False} ()
Constraints
  0 == 0 ==> False
QMap
Candidates (1)
  0: [] (0 1)
Chosen candidate: 0: [] (0 1)
Invalid Constraint: 0 == 0 ==> False
Strengthening: 0 == 0 ==> False
Instantiated axioms:
All assumptions:
0 == 0
RHS: False
assumption True
mustHave 0 == 0
qualsList []
Optimal valuations:
Pruned valuations:
Diffs: (0)
TYPE ERROR: Cannot find sufficiently strong refinements
when checking error in
error
Adding constraint add, x, y |- C0
Looking for type {Int|_v == x + y}
Trying x
Checking x :: {Int|_v == x + y} in
\x . \y . ??
Adding constraint add, x, y C0 |- {Int|_v == x} <: {Int|_v == x + y} ()
Typing Constraints
add, x, y C0 |- {Int|_v == x} <: {Int|_v == x + y} ()
add, x, y |- C0
Type assignment
Simple Constraints
add, x, y |- C0
add, x, y C0 |- {Int|_v == x} <: {Int|_v == x + y} ()
Pred assignment
After process simple constraints
add, x, y C0 |- {Int|_v == x} <: {Int|_v == x + y} ()
Constraints
  C0 && (_v == x && (x >= 0 && y >= 0)) ==> _v == x + y
QMap
  C0 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
Candidates (1)
  0: [C0 -> {}] (0 1)
Chosen candidate: 0: [C0 -> {}] (0 1)
Invalid Constraint: C0 && (_v == x && (x >= 0 && y >= 0)) ==> _v == x + y
Strengthening: C0 && (_v == x && (x >= 0 && y >= 0)) ==> _v == x + y
Instantiated axioms:
All assumptions:
_v == x, x >= 0, y >= 0
RHS: _v == x + y
assumption _v == x && (x >= 0 && y >= 0)
mustHave !(_v == x + y)
qualsList [0 != x
          ,0 != y
          ,y != x
          ,0 <= x
          ,0 <= y
          ,x <= 0
          ,x <= y
          ,y <= 0
          ,y <= x]
Optimal valuations:
{x <= 0, y <= x}
{y <= 0}
Pruned valuations:
{y <= 0}
Diffs: (1)
[C0 -> {y <= 0}]
Checking consistency
Candidates (1)
  0: [C0 -> {y <= 0}] (1 0)
Remaining Candidates (1)
  0: [C0 -> {y <= 0}] (1 0)
Typing Constraints
Type assignment
Simple Constraints
Pred assignment
After process simple constraints
Constraints
QMap
  C0 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
Checking consistency
Candidates (1)
  0: [C0 -> {y <= 0}] (1 0)
Remaining Candidates (1)
  0: [C0 -> {y <= 0}] (1 0)
Auxiliary goals are:
Adding constraint add, x, y |- C2
Trying y
Checking y :: {Int|_v == x + y} in
\x . \y . 
    if y <= 0
      then x
      else ??
Adding constraint add, x, y C1, C2 |- {Int|_v == y} <: {Int|_v == x + y} ()
Typing Constraints
add, x, y C1, C2 |- {Int|_v == y} <: {Int|_v == x + y} ()
add, x, y |- C2
Type assignment
Simple Constraints
add, x, y |- C2
add, x, y C1, C2 |- {Int|_v == y} <: {Int|_v == x + y} ()
Pred assignment
After process simple constraints
add, x, y C1, C2 |- {Int|_v == y} <: {Int|_v == x + y} ()
Constraints
  C1 && (C2 && (_v == y && (x >= 0 && y >= 0))) ==> _v == x + y
QMap
  C0 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C1 -> {!(y <= 0)}
  C2 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {}] (1 1)
Chosen candidate: 0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {}] (1 1)
Invalid Constraint: C1 && (C2 && (_v == y && (x >= 0 && y >= 0))) ==> _v == x + y
Strengthening: C1 && (C2 && (_v == y && (x >= 0 && y >= 0))) ==> _v == x + y
Instantiated axioms:
All assumptions:
!(y <= 0), _v == y, x >= 0, y >= 0
RHS: _v == x + y
assumption !(y <= 0) && (_v == y && (x >= 0 && y >= 0))
mustHave !(_v == x + y)
qualsList [0 != x
          ,0 != y
          ,y != x
          ,0 <= x
          ,0 <= y
          ,x <= 0
          ,x <= y
          ,y <= x]
Optimal valuations:
{x <= 0}
Pruned valuations:
{x <= 0}
Diffs: (1)
[C1 -> {}, C2 -> {x <= 0}]
Checking consistency
Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}] (2 0)
Remaining Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}] (2 0)
Typing Constraints
Type assignment
Simple Constraints
Pred assignment
After process simple constraints
Constraints
QMap
  C0 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C1 -> {!(y <= 0)}
  C2 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
Checking consistency
Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}] (2 0)
Remaining Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}] (2 0)
Auxiliary goals are:
Adding constraint add, x, y |- C4
Trying x
Checking x :: {Int|_v == x + y} in
\x . \y . 
    if y <= 0
      then x
      else 
        if x <= 0
          then y
          else ??
Adding constraint add, x, y C1, C3, C4 |- {Int|_v == x} <: {Int|_v == x + y} ()
Typing Constraints
add, x, y C1, C3, C4 |- {Int|_v == x} <: {Int|_v == x + y} ()
add, x, y |- C4
Type assignment
Simple Constraints
add, x, y |- C4
add, x, y C1, C3, C4 |- {Int|_v == x} <: {Int|_v == x + y} ()
Pred assignment
After process simple constraints
add, x, y C1, C3, C4 |- {Int|_v == x} <: {Int|_v == x + y} ()
Constraints
  C1 && (C3 && (C4 && (_v == x && (x >= 0 && y >= 0)))) ==> _v == x + y
QMap
  C0 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C1 -> {!(y <= 0)}
  C2 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C3 -> {!(x <= 0)}
  C4 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {}] (2 1)
Chosen candidate: 0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {}] (2 1)
Invalid Constraint: C1 && (C3 && (C4 && (_v == x && (x >= 0 && y >= 0)))) ==> _v == x + y
Strengthening: C1 && (C3 && (C4 && (_v == x && (x >= 0 && y >= 0)))) ==> _v == x + y
Instantiated axioms:
All assumptions:
!(x <= 0), !(y <= 0), _v == x, x >= 0, y >= 0
RHS: _v == x + y
assumption !(x <= 0) && (!(y <= 0) && (_v == x && (x >= 0 && y >= 0)))
mustHave !(_v == x + y)
qualsList [0 != x
          ,0 != y
          ,y != x
          ,0 <= x
          ,0 <= y
          ,x <= y
          ,y <= x]
Optimal valuations:
Pruned valuations:
Diffs: (0)
TYPE ERROR: Cannot find sufficiently strong refinements
when checking x ::
{Int|_v == x + y} in
\x . \y . 
    if y <= 0
      then x
      else 
        if x <= 0
          then y
          else x
Trying y
Checking y :: {Int|_v == x + y} in
\x . \y . 
    if y <= 0
      then x
      else 
        if x <= 0
          then y
          else ??
Adding constraint add, x, y C1, C3, C4 |- {Int|_v == y} <: {Int|_v == x + y} ()
Typing Constraints
add, x, y C1, C3, C4 |- {Int|_v == y} <: {Int|_v == x + y} ()
add, x, y |- C4
Type assignment
Simple Constraints
add, x, y |- C4
add, x, y C1, C3, C4 |- {Int|_v == y} <: {Int|_v == x + y} ()
Pred assignment
After process simple constraints
add, x, y C1, C3, C4 |- {Int|_v == y} <: {Int|_v == x + y} ()
Constraints
  C1 && (C3 && (C4 && (_v == y && (x >= 0 && y >= 0)))) ==> _v == x + y
QMap
  C0 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C1 -> {!(y <= 0)}
  C2 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C3 -> {!(x <= 0)}
  C4 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {}] (2 1)
Chosen candidate: 0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {}] (2 1)
Invalid Constraint: C1 && (C3 && (C4 && (_v == y && (x >= 0 && y >= 0)))) ==> _v == x + y
Strengthening: C1 && (C3 && (C4 && (_v == y && (x >= 0 && y >= 0)))) ==> _v == x + y
Instantiated axioms:
All assumptions:
!(x <= 0), !(y <= 0), _v == y, x >= 0, y >= 0
RHS: _v == x + y
assumption !(x <= 0) && (!(y <= 0) && (_v == y && (x >= 0 && y >= 0)))
mustHave !(_v == x + y)
qualsList [0 != x
          ,0 != y
          ,y != x
          ,0 <= x
          ,0 <= y
          ,x <= y
          ,y <= x]
Optimal valuations:
Pruned valuations:
Diffs: (0)
TYPE ERROR: Cannot find sufficiently strong refinements
when checking y ::
{Int|_v == x + y} in
\x . \y . 
    if y <= 0
      then x
      else 
        if x <= 0
          then y
          else y
Trying zero
Checking zero :: {Int|_v == x + y} in
\x . \y . 
    if y <= 0
      then x
      else 
        if x <= 0
          then y
          else ??
Adding constraint add, x, y C1, C3, C4 |- {Int|_v == zero} <: {Int|_v == x + y} ()
Typing Constraints
add, x, y C1, C3, C4 |- {Int|_v == zero} <: {Int|_v == x + y} ()
add, x, y |- C4
Type assignment
Simple Constraints
add, x, y |- C4
add, x, y C1, C3, C4 |- {Int|_v == zero} <: {Int|_v == x + y} ()
Pred assignment
After process simple constraints
add, x, y C1, C3, C4 |- {Int|_v == zero} <: {Int|_v == x + y} ()
Constraints
  C1 && (C3 && (C4 && (_v == zero && (zero == 0 && (x >= 0 && y >= 0))))) ==> _v == x + y
QMap
  C0 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C1 -> {!(y <= 0)}
  C2 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C3 -> {!(x <= 0)}
  C4 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {}] (2 1)
Chosen candidate: 0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {}] (2 1)
Invalid Constraint: C1 && (C3 && (C4 && (_v == zero && (zero == 0 && (x >= 0 && y >= 0))))) ==> _v == x + y
Strengthening: C1 && (C3 && (C4 && (_v == zero && (zero == 0 && (x >= 0 && y >= 0))))) ==> _v == x + y
Instantiated axioms:
All assumptions:
!(x <= 0), !(y <= 0), _v == zero, zero == 0, x >= 0, y >= 0
RHS: _v == x + y
assumption !(x <= 0) && (!(y <= 0) && (_v == zero && (zero == 0 && (x >= 0 && y >= 0))))
mustHave !(_v == x + y)
qualsList [0 != x
          ,0 != y
          ,y != x
          ,0 <= x
          ,0 <= y
          ,x <= y
          ,y <= x]
Optimal valuations:
Pruned valuations:
Diffs: (0)
TYPE ERROR: Cannot find sufficiently strong refinements
when checking zero ::
{Int|_v == x + y} in
\x . \y . 
    if y <= 0
      then x
      else 
        if x <= 0
          then y
          else zero
INSTANTIATE x:{Int|_v >= 0} -> {Int|_v == x - 1}
INTO x1:{Int|_v >= 0} -> {Int|_v == x1 - 1}
Trying dec
Checking dec :: X0:_ -> {Int|_v == x + y} in
\x . \y . 
    if y <= 0
      then x
      else 
        if x <= 0
          then y
          else ?? ??
Adding constraint add, x, y C1, C3, C4 |- x1:{Int|_v >= 0} -> {Int|_v == x1 - 1} <: X0:_ -> {Int|_v == x + y} ()
Adding constraint add, x, y C1, C3, C4 |- x1:{Int|_v >= 0} -> {Int|_v == x1 - 1} /\ X0:_ -> {Int|_v == x + y} ()
Typing Constraints
add, x, y C1, C3, C4 |- x1:{Int|_v >= 0} -> {Int|_v == x1 - 1} /\ X0:_ -> {Int|_v == x + y} ()
add, x, y C1, C3, C4 |- x1:{Int|_v >= 0} -> {Int|_v == x1 - 1} <: X0:_ -> {Int|_v == x + y} ()
add, x, y |- C4
Type assignment
Simple Constraints
add, x, y |- C4
X0, add, x, y C1, C3, C4 |- {Int|_v == X0 - 1} <: {Int|_v == x + y} ()
add, x, x1, y C1, C3, C4 |- {Int|_v == x1 - 1} /\ {Int|_v == x + y} ()
Pred assignment
After process simple constraints
add, x, x1, y C1, C3, C4 |- {Int|_v == x1 - 1} /\ {Int|_v == x + y} ()
X0, add, x, y C1, C3, C4 |- {Int|_v == X0 - 1} <: {Int|_v == x + y} ()
Constraints
  False ==> _v == x + y
QMap
  C0 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C1 -> {!(y <= 0)}
  C2 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C3 -> {!(x <= 0)}
  C4 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
Checking consistency
  C1 && (C3 && (C4 && (_v == x + y && (_v == x1 - 1 && (x >= 0 && (x1 >= 0 && y >= 0))))))
Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {}] (3 0)
Remaining Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {}] (3 0)
Trying x
Checking x :: {Int|_v >= 0} in
\x . \y . 
    if y <= 0
      then x
      else 
        if x <= 0
          then y
          else dec ??
Adding constraint add, x, y C1, C3, C4 |- {Int|_v == x} <: {Int|_v >= 0} ()
Typing Constraints
add, x, y C1, C3, C4 |- {Int|_v == x} <: {Int|_v >= 0} ()
Type assignment
Simple Constraints
add, x, y C1, C3, C4 |- {Int|_v == x} <: {Int|_v >= 0} ()
Pred assignment
After process simple constraints
add, x, y C1, C3, C4 |- {Int|_v == x} <: {Int|_v >= 0} ()
Constraints
  C1 && (C3 && (C4 && (_v == x && (x >= 0 && y >= 0)))) ==> _v >= 0
QMap
  C0 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C1 -> {!(y <= 0)}
  C2 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C3 -> {!(x <= 0)}
  C4 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
Checking consistency
Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {}] (4 0)
Remaining Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {}] (4 0)
Synthesized argument x of type {Int|_v == x}
Checking dec
           x :: {Int|_v == x + y} in
\x . \y . 
    if y <= 0
      then x
      else 
        if x <= 0
          then y
          else ??
Adding constraint add, x, y C1, C3, C4 |- {Int|_v == x - 1} <: {Int|_v == x + y} ()
Typing Constraints
add, x, y C1, C3, C4 |- {Int|_v == x - 1} <: {Int|_v == x + y} ()
Type assignment
Simple Constraints
add, x, y C1, C3, C4 |- {Int|_v == x - 1} <: {Int|_v == x + y} ()
Pred assignment
After process simple constraints
add, x, y C1, C3, C4 |- {Int|_v == x - 1} <: {Int|_v == x + y} ()
Constraints
  C1 && (C3 && (C4 && (_v == x - 1 && (x >= 0 && y >= 0)))) ==> _v == x + y
QMap
  C0 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C1 -> {!(y <= 0)}
  C2 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C3 -> {!(x <= 0)}
  C4 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {}] (4 1)
Chosen candidate: 0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {}] (4 1)
Invalid Constraint: C1 && (C3 && (C4 && (_v == x - 1 && (x >= 0 && y >= 0)))) ==> _v == x + y
Strengthening: C1 && (C3 && (C4 && (_v == x - 1 && (x >= 0 && y >= 0)))) ==> _v == x + y
Instantiated axioms:
All assumptions:
!(x <= 0), !(y <= 0), _v == x - 1, x >= 0, y >= 0
RHS: _v == x + y
assumption !(x <= 0) && (!(y <= 0) && (_v == x - 1 && (x >= 0 && y >= 0)))
mustHave !(_v == x + y)
qualsList [0 != x
          ,0 != y
          ,y != x
          ,0 <= x
          ,0 <= y
          ,x <= y
          ,y <= x]
Optimal valuations:
Pruned valuations:
Diffs: (0)
TYPE ERROR: Cannot find sufficiently strong refinements
when checking dec x ::
{Int|_v == x + y} in
\x . \y . 
    if y <= 0
      then x
      else 
        if x <= 0
          then y
          else dec x
Trying y
Checking y :: {Int|_v >= 0} in
\x . \y . 
    if y <= 0
      then x
      else 
        if x <= 0
          then y
          else dec ??
Adding constraint add, x, y C1, C3, C4 |- {Int|_v == y} <: {Int|_v >= 0} ()
Typing Constraints
add, x, y C1, C3, C4 |- {Int|_v == y} <: {Int|_v >= 0} ()
Type assignment
Simple Constraints
add, x, y C1, C3, C4 |- {Int|_v == y} <: {Int|_v >= 0} ()
Pred assignment
After process simple constraints
add, x, y C1, C3, C4 |- {Int|_v == y} <: {Int|_v >= 0} ()
Constraints
  C1 && (C3 && (C4 && (_v == y && (x >= 0 && y >= 0)))) ==> _v >= 0
QMap
  C0 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C1 -> {!(y <= 0)}
  C2 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C3 -> {!(x <= 0)}
  C4 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
Checking consistency
Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {}] (4 0)
Remaining Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {}] (4 0)
Synthesized argument y of type {Int|_v == y}
Checking dec
           y :: {Int|_v == x + y} in
\x . \y . 
    if y <= 0
      then x
      else 
        if x <= 0
          then y
          else ??
Adding constraint add, x, y C1, C3, C4 |- {Int|_v == y - 1} <: {Int|_v == x + y} ()
Typing Constraints
add, x, y C1, C3, C4 |- {Int|_v == y - 1} <: {Int|_v == x + y} ()
Type assignment
Simple Constraints
add, x, y C1, C3, C4 |- {Int|_v == y - 1} <: {Int|_v == x + y} ()
Pred assignment
After process simple constraints
add, x, y C1, C3, C4 |- {Int|_v == y - 1} <: {Int|_v == x + y} ()
Constraints
  C1 && (C3 && (C4 && (_v == y - 1 && (x >= 0 && y >= 0)))) ==> _v == x + y
QMap
  C0 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C1 -> {!(y <= 0)}
  C2 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C3 -> {!(x <= 0)}
  C4 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {}] (4 1)
Chosen candidate: 0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {}] (4 1)
Invalid Constraint: C1 && (C3 && (C4 && (_v == y - 1 && (x >= 0 && y >= 0)))) ==> _v == x + y
Strengthening: C1 && (C3 && (C4 && (_v == y - 1 && (x >= 0 && y >= 0)))) ==> _v == x + y
Instantiated axioms:
All assumptions:
!(x <= 0), !(y <= 0), _v == y - 1, x >= 0, y >= 0
RHS: _v == x + y
assumption !(x <= 0) && (!(y <= 0) && (_v == y - 1 && (x >= 0 && y >= 0)))
mustHave !(_v == x + y)
qualsList [0 != x
          ,0 != y
          ,y != x
          ,0 <= x
          ,0 <= y
          ,x <= y
          ,y <= x]
Optimal valuations:
Pruned valuations:
Diffs: (0)
TYPE ERROR: Cannot find sufficiently strong refinements
when checking dec y ::
{Int|_v == x + y} in
\x . \y . 
    if y <= 0
      then x
      else 
        if x <= 0
          then y
          else dec y
Trying zero
Checking zero :: {Int|_v >= 0} in
\x . \y . 
    if y <= 0
      then x
      else 
        if x <= 0
          then y
          else dec ??
Adding constraint add, x, y C1, C3, C4 |- {Int|_v == zero} <: {Int|_v >= 0} ()
Typing Constraints
add, x, y C1, C3, C4 |- {Int|_v == zero} <: {Int|_v >= 0} ()
Type assignment
Simple Constraints
add, x, y C1, C3, C4 |- {Int|_v == zero} <: {Int|_v >= 0} ()
Pred assignment
After process simple constraints
add, x, y C1, C3, C4 |- {Int|_v == zero} <: {Int|_v >= 0} ()
Constraints
  C1 && (C3 && (C4 && (_v == zero && (zero == 0 && (x >= 0 && y >= 0))))) ==> _v >= 0
QMap
  C0 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C1 -> {!(y <= 0)}
  C2 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C3 -> {!(x <= 0)}
  C4 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
Checking consistency
Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {}] (4 0)
Remaining Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {}] (4 0)
Synthesized argument zero of type {Int|_v == zero}
Checking dec
           zero :: {Int|_v == x + y} in
\x . \y . 
    if y <= 0
      then x
      else 
        if x <= 0
          then y
          else ??
Adding constraint add, x, y C1, C3, C4 |- {Int|_v == zero - 1} <: {Int|_v == x + y} ()
Typing Constraints
add, x, y C1, C3, C4 |- {Int|_v == zero - 1} <: {Int|_v == x + y} ()
Type assignment
Simple Constraints
add, x, y C1, C3, C4 |- {Int|_v == zero - 1} <: {Int|_v == x + y} ()
Pred assignment
After process simple constraints
add, x, y C1, C3, C4 |- {Int|_v == zero - 1} <: {Int|_v == x + y} ()
Constraints
  C1 && (C3 && (C4 && (_v == zero - 1 && (zero == 0 && (x >= 0 && y >= 0))))) ==> _v == x + y
QMap
  C0 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C1 -> {!(y <= 0)}
  C2 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C3 -> {!(x <= 0)}
  C4 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {}] (4 1)
Chosen candidate: 0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {}] (4 1)
Invalid Constraint: C1 && (C3 && (C4 && (_v == zero - 1 && (zero == 0 && (x >= 0 && y >= 0))))) ==> _v == x + y
Strengthening: C1 && (C3 && (C4 && (_v == zero - 1 && (zero == 0 && (x >= 0 && y >= 0))))) ==> _v == x + y
Instantiated axioms:
All assumptions:
!(x <= 0), !(y <= 0), _v == zero - 1, zero == 0, x >= 0, y >= 0
RHS: _v == x + y
assumption !(x <= 0) && (!(y <= 0) && (_v == zero - 1 && (zero == 0 && (x >= 0 && y >= 0))))
mustHave !(_v == x + y)
qualsList [0 != x
          ,0 != y
          ,y != x
          ,0 <= x
          ,0 <= y
          ,x <= y
          ,y <= x]
Optimal valuations:
Pruned valuations:
Diffs: (0)
TYPE ERROR: Cannot find sufficiently strong refinements
when checking dec zero ::
{Int|_v == x + y} in
\x . \y . 
    if y <= 0
      then x
      else 
        if x <= 0
          then y
          else dec zero
INSTANTIATE x:{Int|_v >= 0} -> {Int|_v == x + 1}
INTO x1:{Int|_v >= 0} -> {Int|_v == x1 + 1}
Trying inc
Checking inc :: X0:_ -> {Int|_v == x + y} in
\x . \y . 
    if y <= 0
      then x
      else 
        if x <= 0
          then y
          else ?? ??
Adding constraint add, x, y C1, C3, C4 |- x1:{Int|_v >= 0} -> {Int|_v == x1 + 1} <: X0:_ -> {Int|_v == x + y} ()
Adding constraint add, x, y C1, C3, C4 |- x1:{Int|_v >= 0} -> {Int|_v == x1 + 1} /\ X0:_ -> {Int|_v == x + y} ()
Typing Constraints
add, x, y C1, C3, C4 |- x1:{Int|_v >= 0} -> {Int|_v == x1 + 1} /\ X0:_ -> {Int|_v == x + y} ()
add, x, y C1, C3, C4 |- x1:{Int|_v >= 0} -> {Int|_v == x1 + 1} <: X0:_ -> {Int|_v == x + y} ()
add, x, y |- C4
Type assignment
Simple Constraints
add, x, y |- C4
X0, add, x, y C1, C3, C4 |- {Int|_v == X0 + 1} <: {Int|_v == x + y} ()
add, x, x1, y C1, C3, C4 |- {Int|_v == x1 + 1} /\ {Int|_v == x + y} ()
Pred assignment
After process simple constraints
add, x, x1, y C1, C3, C4 |- {Int|_v == x1 + 1} /\ {Int|_v == x + y} ()
X0, add, x, y C1, C3, C4 |- {Int|_v == X0 + 1} <: {Int|_v == x + y} ()
Constraints
  False ==> _v == x + y
QMap
  C0 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C1 -> {!(y <= 0)}
  C2 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C3 -> {!(x <= 0)}
  C4 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
Checking consistency
  C1 && (C3 && (C4 && (_v == x + y && (_v == x1 + 1 && (x >= 0 && (x1 >= 0 && y >= 0))))))
Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {}] (3 0)
Remaining Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {}] (3 0)
Trying x
Checking x :: {Int|_v >= 0} in
\x . \y . 
    if y <= 0
      then x
      else 
        if x <= 0
          then y
          else inc ??
Adding constraint add, x, y C1, C3, C4 |- {Int|_v == x} <: {Int|_v >= 0} ()
Typing Constraints
add, x, y C1, C3, C4 |- {Int|_v == x} <: {Int|_v >= 0} ()
Type assignment
Simple Constraints
add, x, y C1, C3, C4 |- {Int|_v == x} <: {Int|_v >= 0} ()
Pred assignment
After process simple constraints
add, x, y C1, C3, C4 |- {Int|_v == x} <: {Int|_v >= 0} ()
Constraints
  C1 && (C3 && (C4 && (_v == x && (x >= 0 && y >= 0)))) ==> _v >= 0
QMap
  C0 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C1 -> {!(y <= 0)}
  C2 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C3 -> {!(x <= 0)}
  C4 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
Checking consistency
Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {}] (4 0)
Remaining Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {}] (4 0)
Synthesized argument x of type {Int|_v == x}
Checking inc
           x :: {Int|_v == x + y} in
\x . \y . 
    if y <= 0
      then x
      else 
        if x <= 0
          then y
          else ??
Adding constraint add, x, y C1, C3, C4 |- {Int|_v == x + 1} <: {Int|_v == x + y} ()
Typing Constraints
add, x, y C1, C3, C4 |- {Int|_v == x + 1} <: {Int|_v == x + y} ()
Type assignment
Simple Constraints
add, x, y C1, C3, C4 |- {Int|_v == x + 1} <: {Int|_v == x + y} ()
Pred assignment
After process simple constraints
add, x, y C1, C3, C4 |- {Int|_v == x + 1} <: {Int|_v == x + y} ()
Constraints
  C1 && (C3 && (C4 && (_v == x + 1 && (x >= 0 && y >= 0)))) ==> _v == x + y
QMap
  C0 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C1 -> {!(y <= 0)}
  C2 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C3 -> {!(x <= 0)}
  C4 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {}] (4 1)
Chosen candidate: 0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {}] (4 1)
Invalid Constraint: C1 && (C3 && (C4 && (_v == x + 1 && (x >= 0 && y >= 0)))) ==> _v == x + y
Strengthening: C1 && (C3 && (C4 && (_v == x + 1 && (x >= 0 && y >= 0)))) ==> _v == x + y
Instantiated axioms:
All assumptions:
!(x <= 0), !(y <= 0), _v == x + 1, x >= 0, y >= 0
RHS: _v == x + y
assumption !(x <= 0) && (!(y <= 0) && (_v == x + 1 && (x >= 0 && y >= 0)))
mustHave !(_v == x + y)
qualsList [0 != x
          ,0 != y
          ,y != x
          ,0 <= x
          ,0 <= y
          ,x <= y
          ,y <= x]
Optimal valuations:
Pruned valuations:
Diffs: (0)
TYPE ERROR: Cannot find sufficiently strong refinements
when checking inc x ::
{Int|_v == x + y} in
\x . \y . 
    if y <= 0
      then x
      else 
        if x <= 0
          then y
          else inc x
Trying y
Checking y :: {Int|_v >= 0} in
\x . \y . 
    if y <= 0
      then x
      else 
        if x <= 0
          then y
          else inc ??
Adding constraint add, x, y C1, C3, C4 |- {Int|_v == y} <: {Int|_v >= 0} ()
Typing Constraints
add, x, y C1, C3, C4 |- {Int|_v == y} <: {Int|_v >= 0} ()
Type assignment
Simple Constraints
add, x, y C1, C3, C4 |- {Int|_v == y} <: {Int|_v >= 0} ()
Pred assignment
After process simple constraints
add, x, y C1, C3, C4 |- {Int|_v == y} <: {Int|_v >= 0} ()
Constraints
  C1 && (C3 && (C4 && (_v == y && (x >= 0 && y >= 0)))) ==> _v >= 0
QMap
  C0 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C1 -> {!(y <= 0)}
  C2 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C3 -> {!(x <= 0)}
  C4 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
Checking consistency
Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {}] (4 0)
Remaining Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {}] (4 0)
Synthesized argument y of type {Int|_v == y}
Checking inc
           y :: {Int|_v == x + y} in
\x . \y . 
    if y <= 0
      then x
      else 
        if x <= 0
          then y
          else ??
Adding constraint add, x, y C1, C3, C4 |- {Int|_v == y + 1} <: {Int|_v == x + y} ()
Typing Constraints
add, x, y C1, C3, C4 |- {Int|_v == y + 1} <: {Int|_v == x + y} ()
Type assignment
Simple Constraints
add, x, y C1, C3, C4 |- {Int|_v == y + 1} <: {Int|_v == x + y} ()
Pred assignment
After process simple constraints
add, x, y C1, C3, C4 |- {Int|_v == y + 1} <: {Int|_v == x + y} ()
Constraints
  C1 && (C3 && (C4 && (_v == y + 1 && (x >= 0 && y >= 0)))) ==> _v == x + y
QMap
  C0 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C1 -> {!(y <= 0)}
  C2 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C3 -> {!(x <= 0)}
  C4 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {}] (4 1)
Chosen candidate: 0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {}] (4 1)
Invalid Constraint: C1 && (C3 && (C4 && (_v == y + 1 && (x >= 0 && y >= 0)))) ==> _v == x + y
Strengthening: C1 && (C3 && (C4 && (_v == y + 1 && (x >= 0 && y >= 0)))) ==> _v == x + y
Instantiated axioms:
All assumptions:
!(x <= 0), !(y <= 0), _v == y + 1, x >= 0, y >= 0
RHS: _v == x + y
assumption !(x <= 0) && (!(y <= 0) && (_v == y + 1 && (x >= 0 && y >= 0)))
mustHave !(_v == x + y)
qualsList [0 != x
          ,0 != y
          ,y != x
          ,0 <= x
          ,0 <= y
          ,x <= y
          ,y <= x]
Optimal valuations:
Pruned valuations:
Diffs: (0)
TYPE ERROR: Cannot find sufficiently strong refinements
when checking inc y ::
{Int|_v == x + y} in
\x . \y . 
    if y <= 0
      then x
      else 
        if x <= 0
          then y
          else inc y
Trying zero
Checking zero :: {Int|_v >= 0} in
\x . \y . 
    if y <= 0
      then x
      else 
        if x <= 0
          then y
          else inc ??
Adding constraint add, x, y C1, C3, C4 |- {Int|_v == zero} <: {Int|_v >= 0} ()
Typing Constraints
add, x, y C1, C3, C4 |- {Int|_v == zero} <: {Int|_v >= 0} ()
Type assignment
Simple Constraints
add, x, y C1, C3, C4 |- {Int|_v == zero} <: {Int|_v >= 0} ()
Pred assignment
After process simple constraints
add, x, y C1, C3, C4 |- {Int|_v == zero} <: {Int|_v >= 0} ()
Constraints
  C1 && (C3 && (C4 && (_v == zero && (zero == 0 && (x >= 0 && y >= 0))))) ==> _v >= 0
QMap
  C0 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C1 -> {!(y <= 0)}
  C2 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C3 -> {!(x <= 0)}
  C4 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
Checking consistency
Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {}] (4 0)
Remaining Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {}] (4 0)
Synthesized argument zero of type {Int|_v == zero}
Checking inc
           zero :: {Int|_v == x + y} in
\x . \y . 
    if y <= 0
      then x
      else 
        if x <= 0
          then y
          else ??
Adding constraint add, x, y C1, C3, C4 |- {Int|_v == zero + 1} <: {Int|_v == x + y} ()
Typing Constraints
add, x, y C1, C3, C4 |- {Int|_v == zero + 1} <: {Int|_v == x + y} ()
Type assignment
Simple Constraints
add, x, y C1, C3, C4 |- {Int|_v == zero + 1} <: {Int|_v == x + y} ()
Pred assignment
After process simple constraints
add, x, y C1, C3, C4 |- {Int|_v == zero + 1} <: {Int|_v == x + y} ()
Constraints
  C1 && (C3 && (C4 && (_v == zero + 1 && (zero == 0 && (x >= 0 && y >= 0))))) ==> _v == x + y
QMap
  C0 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C1 -> {!(y <= 0)}
  C2 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C3 -> {!(x <= 0)}
  C4 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {}] (4 1)
Chosen candidate: 0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {}] (4 1)
Invalid Constraint: C1 && (C3 && (C4 && (_v == zero + 1 && (zero == 0 && (x >= 0 && y >= 0))))) ==> _v == x + y
Strengthening: C1 && (C3 && (C4 && (_v == zero + 1 && (zero == 0 && (x >= 0 && y >= 0))))) ==> _v == x + y
Instantiated axioms:
All assumptions:
!(x <= 0), !(y <= 0), _v == zero + 1, zero == 0, x >= 0, y >= 0
RHS: _v == x + y
assumption !(x <= 0) && (!(y <= 0) && (_v == zero + 1 && (zero == 0 && (x >= 0 && y >= 0))))
mustHave !(_v == x + y)
qualsList [0 != x
          ,0 != y
          ,y != x
          ,0 <= x
          ,0 <= y
          ,x <= y
          ,y <= x]
Optimal valuations:
Pruned valuations:
Diffs: (0)
TYPE ERROR: Cannot find sufficiently strong refinements
when checking inc zero ::
{Int|_v == x + y} in
\x . \y . 
    if y <= 0
      then x
      else 
        if x <= 0
          then y
          else inc zero
INSTANTIATE x0:{Int|_v >= 0 && (_v >= 0 && _v < x)} -> y:{Int|_v >= 0} -> {Int|_v == x0 + y}
INTO x1:{Int|_v >= 0 && (_v >= 0 && _v < x)} -> x2:{Int|_v >= 0} -> {Int|_v == x1 + x2}
Trying add
Adding constraint add, x, y C1, C3, C4 |- x1:Int -> x2:Int -> {Int|False} <: x:{Int|False} -> y:{Int|False} -> Int ()
Checking add :: X1:_ -> X0:_ -> {Int|_v == x + y} in
\x . \y . 
    if y <= 0
      then x
      else 
        if x <= 0
          then y
          else ?? ?? ??
Adding constraint add, x, y C1, C3, C4 |- x1:{Int|_v >= 0 && (_v >= 0 && _v < x)} -> x2:{Int|_v >= 0} -> {Int|_v == x1 + x2} <: X1:_ -> X0:_ -> {Int|_v == x + y} ()
Adding constraint add, x, y C1, C3, C4 |- x1:{Int|_v >= 0 && (_v >= 0 && _v < x)} -> x2:{Int|_v >= 0} -> {Int|_v == x1 + x2} /\ X1:_ -> X0:_ -> {Int|_v == x + y} ()
Typing Constraints
add, x, y C1, C3, C4 |- x1:{Int|_v >= 0 && (_v >= 0 && _v < x)} -> x2:{Int|_v >= 0} -> {Int|_v == x1 + x2} /\ X1:_ -> X0:_ -> {Int|_v == x + y} ()
add, x, y C1, C3, C4 |- x1:{Int|_v >= 0 && (_v >= 0 && _v < x)} -> x2:{Int|_v >= 0} -> {Int|_v == x1 + x2} <: X1:_ -> X0:_ -> {Int|_v == x + y} ()
add, x, y C1, C3, C4 |- x1:Int -> x2:Int -> {Int|False} <: x:{Int|False} -> y:{Int|False} -> Int ()
add, x, y |- C4
Type assignment
Simple Constraints
add, x, y |- C4
add, x, y C1, C3, C4 |- {Int|False} <: Int ()
add, x, y C1, C3, C4 |- {Int|False} <: Int ()
add, x, y C1, C3, C4 |- {Int|False} <: Int ()
X0, X1, add, x, y C1, C3, C4 |- {Int|_v == X1 + X0} <: {Int|_v == x + y} ()
add, x, x1, x2, y C1, C3, C4 |- {Int|_v == x1 + x2} /\ {Int|_v == x + y} ()
Pred assignment
After process simple constraints
add, x, x1, x2, y C1, C3, C4 |- {Int|_v == x1 + x2} /\ {Int|_v == x + y} ()
X0, X1, add, x, y C1, C3, C4 |- {Int|_v == X1 + X0} <: {Int|_v == x + y} ()
Constraints
  False ==> _v == x + y
QMap
  C0 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C1 -> {!(y <= 0)}
  C2 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C3 -> {!(x <= 0)}
  C4 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
Checking consistency
  C1 && (C3 && (C4 && (_v == x + y && (_v == x1 + x2 && (x >= 0 && (x2 >= 0 && (y >= 0 && (x1 >= 0 && (x1 >= 0 && x1 < x)))))))))
Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {}] (3 0)
Remaining Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {}] (3 0)
Trying x
Checking x :: {Int|_v >= 0 && (_v >= 0 && _v < x)} in
\x . \y . 
    if y <= 0
      then x
      else 
        if x <= 0
          then y
          else add ?? ??
Adding constraint add, x, y C1, C3, C4 |- {Int|_v == x} <: {Int|_v >= 0 && (_v >= 0 && _v < x)} ()
Typing Constraints
add, x, y C1, C3, C4 |- {Int|_v == x} <: {Int|_v >= 0 && (_v >= 0 && _v < x)} ()
Type assignment
Simple Constraints
add, x, y C1, C3, C4 |- {Int|_v == x} <: {Int|_v >= 0 && (_v >= 0 && _v < x)} ()
Pred assignment
After process simple constraints
add, x, y C1, C3, C4 |- {Int|_v == x} <: {Int|_v >= 0 && (_v >= 0 && _v < x)} ()
Constraints
  C1 && (C3 && (C4 && (_v == x && (x >= 0 && y >= 0)))) ==> _v >= 0 && (_v >= 0 && _v < x)
QMap
  C0 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C1 -> {!(y <= 0)}
  C2 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C3 -> {!(x <= 0)}
  C4 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {}] (3 1)
Chosen candidate: 0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {}] (3 1)
Invalid Constraint: C1 && (C3 && (C4 && (_v == x && (x >= 0 && y >= 0)))) ==> _v >= 0 && (_v >= 0 && _v < x)
Strengthening: C1 && (C3 && (C4 && (_v == x && (x >= 0 && y >= 0)))) ==> _v >= 0 && (_v >= 0 && _v < x)
Instantiated axioms:
All assumptions:
!(x <= 0), !(y <= 0), _v == x, x >= 0, y >= 0
RHS: _v >= 0 && (_v >= 0 && _v < x)
assumption !(x <= 0) && (!(y <= 0) && (_v == x && (x >= 0 && y >= 0)))
mustHave !(_v >= 0 && (_v >= 0 && _v < x))
qualsList [0 != x
          ,0 != y
          ,y != x
          ,0 <= x
          ,0 <= y
          ,x <= y
          ,y <= x]
Optimal valuations:
Pruned valuations:
Diffs: (0)
TYPE ERROR: Cannot find sufficiently strong refinements
when checking x ::
{Int|_v >= 0 && (_v >= 0 && _v < x)}
in
\x . \y . 
    if y <= 0
      then x
      else 
        if x <= 0
          then y
          else add x ??
Trying y
Checking y :: {Int|_v >= 0 && (_v >= 0 && _v < x)} in
\x . \y . 
    if y <= 0
      then x
      else 
        if x <= 0
          then y
          else add ?? ??
Adding constraint add, x, y C1, C3, C4 |- {Int|_v == y} <: {Int|_v >= 0 && (_v >= 0 && _v < x)} ()
Typing Constraints
add, x, y C1, C3, C4 |- {Int|_v == y} <: {Int|_v >= 0 && (_v >= 0 && _v < x)} ()
Type assignment
Simple Constraints
add, x, y C1, C3, C4 |- {Int|_v == y} <: {Int|_v >= 0 && (_v >= 0 && _v < x)} ()
Pred assignment
After process simple constraints
add, x, y C1, C3, C4 |- {Int|_v == y} <: {Int|_v >= 0 && (_v >= 0 && _v < x)} ()
Constraints
  C1 && (C3 && (C4 && (_v == y && (x >= 0 && y >= 0)))) ==> _v >= 0 && (_v >= 0 && _v < x)
QMap
  C0 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C1 -> {!(y <= 0)}
  C2 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C3 -> {!(x <= 0)}
  C4 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {}] (3 1)
Chosen candidate: 0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {}] (3 1)
Invalid Constraint: C1 && (C3 && (C4 && (_v == y && (x >= 0 && y >= 0)))) ==> _v >= 0 && (_v >= 0 && _v < x)
Strengthening: C1 && (C3 && (C4 && (_v == y && (x >= 0 && y >= 0)))) ==> _v >= 0 && (_v >= 0 && _v < x)
Instantiated axioms:
All assumptions:
!(x <= 0), !(y <= 0), _v == y, x >= 0, y >= 0
RHS: _v >= 0 && (_v >= 0 && _v < x)
assumption !(x <= 0) && (!(y <= 0) && (_v == y && (x >= 0 && y >= 0)))
mustHave !(_v >= 0 && (_v >= 0 && _v < x))
qualsList [0 != x
          ,0 != y
          ,y != x
          ,0 <= x
          ,0 <= y
          ,x <= y
          ,y <= x]
Optimal valuations:
{y != x, y <= x}
Pruned valuations:
{y != x, y <= x}
Diffs: (1)
[C1 -> {}, C3 -> {}, C4 -> {y != x, y <= x}]
Checking consistency
Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}] (4 0)
Remaining Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}] (4 0)
Synthesized argument y of type {Int|_v == y}
Checking add
           y :: X0:_ -> {Int|_v == x + y} in
\x . \y . 
    if y <= 0
      then x
      else 
        if x <= 0
          then y
          else ?? ??
Adding constraint add, x, y C1, C3, C4 |- x2:{Int|_v >= 0} -> {Int|_v == y + x2} <: X0:_ -> {Int|_v == x + y} ()
Adding constraint add, x, y C1, C3, C4 |- x2:{Int|_v >= 0} -> {Int|_v == y + x2} /\ X0:_ -> {Int|_v == x + y} ()
Typing Constraints
add, x, y C1, C3, C4 |- x2:{Int|_v >= 0} -> {Int|_v == y + x2} /\ X0:_ -> {Int|_v == x + y} ()
add, x, y C1, C3, C4 |- x2:{Int|_v >= 0} -> {Int|_v == y + x2} <: X0:_ -> {Int|_v == x + y} ()
Type assignment
Simple Constraints
X0, add, x, y C1, C3, C4 |- {Int|_v == y + X0} <: {Int|_v == x + y} ()
add, x, x2, y C1, C3, C4 |- {Int|_v == y + x2} /\ {Int|_v == x + y} ()
Pred assignment
After process simple constraints
add, x, x2, y C1, C3, C4 |- {Int|_v == y + x2} /\ {Int|_v == x + y} ()
X0, add, x, y C1, C3, C4 |- {Int|_v == y + X0} <: {Int|_v == x + y} ()
Constraints
  False ==> _v == x + y
QMap
  C0 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C1 -> {!(y <= 0)}
  C2 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C3 -> {!(x <= 0)}
  C4 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
Checking consistency
  C1 && (C3 && (C4 && (_v == x + y && (_v == y + x2 && (x >= 0 && (x2 >= 0 && y >= 0))))))
Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}] (4 0)
Remaining Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}] (4 0)
Trying x
Checking x :: {Int|_v >= 0} in
\x . \y . 
    if y <= 0
      then x
      else 
        if x <= 0
          then y
          else add y ??
Adding constraint add, x, y C1, C3, C4 |- {Int|_v == x} <: {Int|_v >= 0} ()
Typing Constraints
add, x, y C1, C3, C4 |- {Int|_v == x} <: {Int|_v >= 0} ()
Type assignment
Simple Constraints
add, x, y C1, C3, C4 |- {Int|_v == x} <: {Int|_v >= 0} ()
Pred assignment
After process simple constraints
add, x, y C1, C3, C4 |- {Int|_v == x} <: {Int|_v >= 0} ()
Constraints
  C1 && (C3 && (C4 && (_v == x && (x >= 0 && y >= 0)))) ==> _v >= 0
QMap
  C0 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C1 -> {!(y <= 0)}
  C2 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C3 -> {!(x <= 0)}
  C4 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
Checking consistency
Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}] (5 0)
Remaining Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}] (5 0)
Synthesized argument x of type {Int|_v == x}
Checking add y
           x :: {Int|_v == x + y} in
\x . \y . 
    if y <= 0
      then x
      else 
        if x <= 0
          then y
          else ??
Adding constraint add, x, y C1, C3, C4 |- {Int|_v == y + x} <: {Int|_v == x + y} ()
Typing Constraints
add, x, y C1, C3, C4 |- {Int|_v == y + x} <: {Int|_v == x + y} ()
Type assignment
Simple Constraints
add, x, y C1, C3, C4 |- {Int|_v == y + x} <: {Int|_v == x + y} ()
Pred assignment
After process simple constraints
add, x, y C1, C3, C4 |- {Int|_v == y + x} <: {Int|_v == x + y} ()
Constraints
  C1 && (C3 && (C4 && (_v == y + x && (x >= 0 && y >= 0)))) ==> _v == x + y
QMap
  C0 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C1 -> {!(y <= 0)}
  C2 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C3 -> {!(x <= 0)}
  C4 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
Checking consistency
Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}] (6 0)
Remaining Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}] (6 0)
Typing Constraints
Type assignment
Simple Constraints
Pred assignment
After process simple constraints
Constraints
QMap
  C0 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C1 -> {!(y <= 0)}
  C2 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C3 -> {!(x <= 0)}
  C4 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
Checking consistency
Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}] (6 0)
Remaining Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}] (6 0)
Auxiliary goals are:
Adding constraint add, x, y |- C6
Trying x
Checking x :: {Int|_v == x + y} in
\x . \y . 
    if y <= 0
      then x
      else 
        if x <= 0
          then y
          else 
            if (y != x) && (y <= x)
              then add y x
              else ??
Adding constraint add, x, y C1, C3, C5, C6 |- {Int|_v == x} <: {Int|_v == x + y} ()
Typing Constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == x} <: {Int|_v == x + y} ()
add, x, y |- C6
Type assignment
Simple Constraints
add, x, y |- C6
add, x, y C1, C3, C5, C6 |- {Int|_v == x} <: {Int|_v == x + y} ()
Pred assignment
After process simple constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == x} <: {Int|_v == x + y} ()
Constraints
  C1 && (C3 && (C5 && (C6 && (_v == x && (x >= 0 && y >= 0))))) ==> _v == x + y
QMap
  C0 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C1 -> {!(y <= 0)}
  C2 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C3 -> {!(x <= 0)}
  C4 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C5 -> {!(y != x && y <= x)}
  C6 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (6 1)
Chosen candidate: 0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (6 1)
Invalid Constraint: C1 && (C3 && (C5 && (C6 && (_v == x && (x >= 0 && y >= 0))))) ==> _v == x + y
Strengthening: C1 && (C3 && (C5 && (C6 && (_v == x && (x >= 0 && y >= 0))))) ==> _v == x + y
Instantiated axioms:
All assumptions:
!(x <= 0), !(y <= 0), !(y != x && y <= x), _v == x, x >= 0, y >= 0
RHS: _v == x + y
assumption !(x <= 0) && (!(y <= 0) && (!(y != x && y <= x) && (_v == x && (x >= 0 && y >= 0))))
mustHave !(_v == x + y)
qualsList [0 != x
          ,0 != y
          ,y != x
          ,0 <= x
          ,0 <= y
          ,x <= y
          ,y <= x]
Optimal valuations:
Pruned valuations:
Diffs: (0)
TYPE ERROR: Cannot find sufficiently strong refinements
when checking x ::
{Int|_v == x + y} in
\x . \y . 
    if y <= 0
      then x
      else 
        if x <= 0
          then y
          else 
            if (y != x) && (y <= x)
              then add y x
              else x
Trying y
Checking y :: {Int|_v == x + y} in
\x . \y . 
    if y <= 0
      then x
      else 
        if x <= 0
          then y
          else 
            if (y != x) && (y <= x)
              then add y x
              else ??
Adding constraint add, x, y C1, C3, C5, C6 |- {Int|_v == y} <: {Int|_v == x + y} ()
Typing Constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == y} <: {Int|_v == x + y} ()
add, x, y |- C6
Type assignment
Simple Constraints
add, x, y |- C6
add, x, y C1, C3, C5, C6 |- {Int|_v == y} <: {Int|_v == x + y} ()
Pred assignment
After process simple constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == y} <: {Int|_v == x + y} ()
Constraints
  C1 && (C3 && (C5 && (C6 && (_v == y && (x >= 0 && y >= 0))))) ==> _v == x + y
QMap
  C0 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C1 -> {!(y <= 0)}
  C2 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C3 -> {!(x <= 0)}
  C4 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C5 -> {!(y != x && y <= x)}
  C6 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (6 1)
Chosen candidate: 0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (6 1)
Invalid Constraint: C1 && (C3 && (C5 && (C6 && (_v == y && (x >= 0 && y >= 0))))) ==> _v == x + y
Strengthening: C1 && (C3 && (C5 && (C6 && (_v == y && (x >= 0 && y >= 0))))) ==> _v == x + y
Instantiated axioms:
All assumptions:
!(x <= 0), !(y <= 0), !(y != x && y <= x), _v == y, x >= 0, y >= 0
RHS: _v == x + y
assumption !(x <= 0) && (!(y <= 0) && (!(y != x && y <= x) && (_v == y && (x >= 0 && y >= 0))))
mustHave !(_v == x + y)
qualsList [0 != x
          ,0 != y
          ,y != x
          ,0 <= x
          ,0 <= y
          ,x <= y
          ,y <= x]
Optimal valuations:
Pruned valuations:
Diffs: (0)
TYPE ERROR: Cannot find sufficiently strong refinements
when checking y ::
{Int|_v == x + y} in
\x . \y . 
    if y <= 0
      then x
      else 
        if x <= 0
          then y
          else 
            if (y != x) && (y <= x)
              then add y x
              else y
Trying zero
Checking zero :: {Int|_v == x + y} in
\x . \y . 
    if y <= 0
      then x
      else 
        if x <= 0
          then y
          else 
            if (y != x) && (y <= x)
              then add y x
              else ??
Adding constraint add, x, y C1, C3, C5, C6 |- {Int|_v == zero} <: {Int|_v == x + y} ()
Typing Constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == zero} <: {Int|_v == x + y} ()
add, x, y |- C6
Type assignment
Simple Constraints
add, x, y |- C6
add, x, y C1, C3, C5, C6 |- {Int|_v == zero} <: {Int|_v == x + y} ()
Pred assignment
After process simple constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == zero} <: {Int|_v == x + y} ()
Constraints
  C1 && (C3 && (C5 && (C6 && (_v == zero && (zero == 0 && (x >= 0 && y >= 0)))))) ==> _v == x + y
QMap
  C0 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C1 -> {!(y <= 0)}
  C2 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C3 -> {!(x <= 0)}
  C4 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C5 -> {!(y != x && y <= x)}
  C6 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (6 1)
Chosen candidate: 0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (6 1)
Invalid Constraint: C1 && (C3 && (C5 && (C6 && (_v == zero && (zero == 0 && (x >= 0 && y >= 0)))))) ==> _v == x + y
Strengthening: C1 && (C3 && (C5 && (C6 && (_v == zero && (zero == 0 && (x >= 0 && y >= 0)))))) ==> _v == x + y
Instantiated axioms:
All assumptions:
!(x <= 0), !(y <= 0), !(y != x && y <= x), _v == zero, zero == 0, x >= 0, y >= 0
RHS: _v == x + y
assumption !(x <= 0) && (!(y <= 0) && (!(y != x && y <= x) && (_v == zero && (zero == 0 && (x >= 0 && y >= 0)))))
mustHave !(_v == x + y)
qualsList [0 != x
          ,0 != y
          ,y != x
          ,0 <= x
          ,0 <= y
          ,x <= y
          ,y <= x]
Optimal valuations:
Pruned valuations:
Diffs: (0)
TYPE ERROR: Cannot find sufficiently strong refinements
when checking zero ::
{Int|_v == x + y} in
\x . \y . 
    if y <= 0
      then x
      else 
        if x <= 0
          then y
          else 
            if (y != x) && (y <= x)
              then add y x
              else zero
INSTANTIATE x:{Int|_v >= 0} -> {Int|_v == x - 1}
INTO x3:{Int|_v >= 0} -> {Int|_v == x3 - 1}
Trying dec
Checking dec :: X2:_ -> {Int|_v == x + y} in
\x . \y . 
    if y <= 0
      then x
      else 
        if x <= 0
          then y
          else 
            if (y != x) && (y <= x)
              then add y x
              else ?? ??
Adding constraint add, x, y C1, C3, C5, C6 |- x3:{Int|_v >= 0} -> {Int|_v == x3 - 1} <: X2:_ -> {Int|_v == x + y} ()
Adding constraint add, x, y C1, C3, C5, C6 |- x3:{Int|_v >= 0} -> {Int|_v == x3 - 1} /\ X2:_ -> {Int|_v == x + y} ()
Typing Constraints
add, x, y C1, C3, C5, C6 |- x3:{Int|_v >= 0} -> {Int|_v == x3 - 1} /\ X2:_ -> {Int|_v == x + y} ()
add, x, y C1, C3, C5, C6 |- x3:{Int|_v >= 0} -> {Int|_v == x3 - 1} <: X2:_ -> {Int|_v == x + y} ()
add, x, y |- C6
Type assignment
Simple Constraints
add, x, y |- C6
X2, add, x, y C1, C3, C5, C6 |- {Int|_v == X2 - 1} <: {Int|_v == x + y} ()
add, x, x3, y C1, C3, C5, C6 |- {Int|_v == x3 - 1} /\ {Int|_v == x + y} ()
Pred assignment
After process simple constraints
add, x, x3, y C1, C3, C5, C6 |- {Int|_v == x3 - 1} /\ {Int|_v == x + y} ()
X2, add, x, y C1, C3, C5, C6 |- {Int|_v == X2 - 1} <: {Int|_v == x + y} ()
Constraints
  False ==> _v == x + y
QMap
  C0 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C1 -> {!(y <= 0)}
  C2 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C3 -> {!(x <= 0)}
  C4 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C5 -> {!(y != x && y <= x)}
  C6 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
Checking consistency
  C1 && (C3 && (C5 && (C6 && (_v == x + y && (_v == x3 - 1 && (x >= 0 && (x3 >= 0 && y >= 0)))))))
Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (6 0)
Remaining Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (6 0)
Trying x
Checking x :: {Int|_v >= 0} in
\x . \y . 
    if y <= 0
      then x
      else 
        if x <= 0
          then y
          else 
            if (y != x) && (y <= x)
              then add y x
              else dec ??
Adding constraint add, x, y C1, C3, C5, C6 |- {Int|_v == x} <: {Int|_v >= 0} ()
Typing Constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == x} <: {Int|_v >= 0} ()
Type assignment
Simple Constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == x} <: {Int|_v >= 0} ()
Pred assignment
After process simple constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == x} <: {Int|_v >= 0} ()
Constraints
  C1 && (C3 && (C5 && (C6 && (_v == x && (x >= 0 && y >= 0))))) ==> _v >= 0
QMap
  C0 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C1 -> {!(y <= 0)}
  C2 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C3 -> {!(x <= 0)}
  C4 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C5 -> {!(y != x && y <= x)}
  C6 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
Checking consistency
Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (7 0)
Remaining Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (7 0)
Synthesized argument x of type {Int|_v == x}
Checking dec
           x :: {Int|_v == x + y} in
\x . \y . 
    if y <= 0
      then x
      else 
        if x <= 0
          then y
          else 
            if (y != x) && (y <= x)
              then add y x
              else ??
Adding constraint add, x, y C1, C3, C5, C6 |- {Int|_v == x - 1} <: {Int|_v == x + y} ()
Typing Constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == x - 1} <: {Int|_v == x + y} ()
Type assignment
Simple Constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == x - 1} <: {Int|_v == x + y} ()
Pred assignment
After process simple constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == x - 1} <: {Int|_v == x + y} ()
Constraints
  C1 && (C3 && (C5 && (C6 && (_v == x - 1 && (x >= 0 && y >= 0))))) ==> _v == x + y
QMap
  C0 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C1 -> {!(y <= 0)}
  C2 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C3 -> {!(x <= 0)}
  C4 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C5 -> {!(y != x && y <= x)}
  C6 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (7 1)
Chosen candidate: 0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (7 1)
Invalid Constraint: C1 && (C3 && (C5 && (C6 && (_v == x - 1 && (x >= 0 && y >= 0))))) ==> _v == x + y
Strengthening: C1 && (C3 && (C5 && (C6 && (_v == x - 1 && (x >= 0 && y >= 0))))) ==> _v == x + y
Instantiated axioms:
All assumptions:
!(x <= 0), !(y <= 0), !(y != x && y <= x), _v == x - 1, x >= 0, y >= 0
RHS: _v == x + y
assumption !(x <= 0) && (!(y <= 0) && (!(y != x && y <= x) && (_v == x - 1 && (x >= 0 && y >= 0))))
mustHave !(_v == x + y)
qualsList [0 != x
          ,0 != y
          ,y != x
          ,0 <= x
          ,0 <= y
          ,x <= y
          ,y <= x]
Optimal valuations:
Pruned valuations:
Diffs: (0)
TYPE ERROR: Cannot find sufficiently strong refinements
when checking dec x ::
{Int|_v == x + y} in
\x . \y . 
    if y <= 0
      then x
      else 
        if x <= 0
          then y
          else 
            if (y != x) && (y <= x)
              then add y x
              else dec x
Trying y
Checking y :: {Int|_v >= 0} in
\x . \y . 
    if y <= 0
      then x
      else 
        if x <= 0
          then y
          else 
            if (y != x) && (y <= x)
              then add y x
              else dec ??
Adding constraint add, x, y C1, C3, C5, C6 |- {Int|_v == y} <: {Int|_v >= 0} ()
Typing Constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == y} <: {Int|_v >= 0} ()
Type assignment
Simple Constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == y} <: {Int|_v >= 0} ()
Pred assignment
After process simple constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == y} <: {Int|_v >= 0} ()
Constraints
  C1 && (C3 && (C5 && (C6 && (_v == y && (x >= 0 && y >= 0))))) ==> _v >= 0
QMap
  C0 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C1 -> {!(y <= 0)}
  C2 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C3 -> {!(x <= 0)}
  C4 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C5 -> {!(y != x && y <= x)}
  C6 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
Checking consistency
Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (7 0)
Remaining Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (7 0)
Synthesized argument y of type {Int|_v == y}
Checking dec
           y :: {Int|_v == x + y} in
\x . \y . 
    if y <= 0
      then x
      else 
        if x <= 0
          then y
          else 
            if (y != x) && (y <= x)
              then add y x
              else ??
Adding constraint add, x, y C1, C3, C5, C6 |- {Int|_v == y - 1} <: {Int|_v == x + y} ()
Typing Constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == y - 1} <: {Int|_v == x + y} ()
Type assignment
Simple Constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == y - 1} <: {Int|_v == x + y} ()
Pred assignment
After process simple constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == y - 1} <: {Int|_v == x + y} ()
Constraints
  C1 && (C3 && (C5 && (C6 && (_v == y - 1 && (x >= 0 && y >= 0))))) ==> _v == x + y
QMap
  C0 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C1 -> {!(y <= 0)}
  C2 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C3 -> {!(x <= 0)}
  C4 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C5 -> {!(y != x && y <= x)}
  C6 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (7 1)
Chosen candidate: 0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (7 1)
Invalid Constraint: C1 && (C3 && (C5 && (C6 && (_v == y - 1 && (x >= 0 && y >= 0))))) ==> _v == x + y
Strengthening: C1 && (C3 && (C5 && (C6 && (_v == y - 1 && (x >= 0 && y >= 0))))) ==> _v == x + y
Instantiated axioms:
All assumptions:
!(x <= 0), !(y <= 0), !(y != x && y <= x), _v == y - 1, x >= 0, y >= 0
RHS: _v == x + y
assumption !(x <= 0) && (!(y <= 0) && (!(y != x && y <= x) && (_v == y - 1 && (x >= 0 && y >= 0))))
mustHave !(_v == x + y)
qualsList [0 != x
          ,0 != y
          ,y != x
          ,0 <= x
          ,0 <= y
          ,x <= y
          ,y <= x]
Optimal valuations:
Pruned valuations:
Diffs: (0)
TYPE ERROR: Cannot find sufficiently strong refinements
when checking dec y ::
{Int|_v == x + y} in
\x . \y . 
    if y <= 0
      then x
      else 
        if x <= 0
          then y
          else 
            if (y != x) && (y <= x)
              then add y x
              else dec y
Trying zero
Checking zero :: {Int|_v >= 0} in
\x . \y . 
    if y <= 0
      then x
      else 
        if x <= 0
          then y
          else 
            if (y != x) && (y <= x)
              then add y x
              else dec ??
Adding constraint add, x, y C1, C3, C5, C6 |- {Int|_v == zero} <: {Int|_v >= 0} ()
Typing Constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == zero} <: {Int|_v >= 0} ()
Type assignment
Simple Constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == zero} <: {Int|_v >= 0} ()
Pred assignment
After process simple constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == zero} <: {Int|_v >= 0} ()
Constraints
  C1 && (C3 && (C5 && (C6 && (_v == zero && (zero == 0 && (x >= 0 && y >= 0)))))) ==> _v >= 0
QMap
  C0 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C1 -> {!(y <= 0)}
  C2 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C3 -> {!(x <= 0)}
  C4 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C5 -> {!(y != x && y <= x)}
  C6 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
Checking consistency
Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (7 0)
Remaining Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (7 0)
Synthesized argument zero of type {Int|_v == zero}
Checking dec
           zero :: {Int|_v == x + y} in
\x . \y . 
    if y <= 0
      then x
      else 
        if x <= 0
          then y
          else 
            if (y != x) && (y <= x)
              then add y x
              else ??
Adding constraint add, x, y C1, C3, C5, C6 |- {Int|_v == zero - 1} <: {Int|_v == x + y} ()
Typing Constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == zero - 1} <: {Int|_v == x + y} ()
Type assignment
Simple Constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == zero - 1} <: {Int|_v == x + y} ()
Pred assignment
After process simple constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == zero - 1} <: {Int|_v == x + y} ()
Constraints
  C1 && (C3 && (C5 && (C6 && (_v == zero - 1 && (zero == 0 && (x >= 0 && y >= 0)))))) ==> _v == x + y
QMap
  C0 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C1 -> {!(y <= 0)}
  C2 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C3 -> {!(x <= 0)}
  C4 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C5 -> {!(y != x && y <= x)}
  C6 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (7 1)
Chosen candidate: 0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (7 1)
Invalid Constraint: C1 && (C3 && (C5 && (C6 && (_v == zero - 1 && (zero == 0 && (x >= 0 && y >= 0)))))) ==> _v == x + y
Strengthening: C1 && (C3 && (C5 && (C6 && (_v == zero - 1 && (zero == 0 && (x >= 0 && y >= 0)))))) ==> _v == x + y
Instantiated axioms:
All assumptions:
!(x <= 0), !(y <= 0), !(y != x && y <= x), _v == zero - 1, zero == 0, x >= 0, y >= 0
RHS: _v == x + y
assumption !(x <= 0) && (!(y <= 0) && (!(y != x && y <= x) && (_v == zero - 1 && (zero == 0 && (x >= 0 && y >= 0)))))
mustHave !(_v == x + y)
qualsList [0 != x
          ,0 != y
          ,y != x
          ,0 <= x
          ,0 <= y
          ,x <= y
          ,y <= x]
Optimal valuations:
Pruned valuations:
Diffs: (0)
TYPE ERROR: Cannot find sufficiently strong refinements
when checking dec zero ::
{Int|_v == x + y} in
\x . \y . 
    if y <= 0
      then x
      else 
        if x <= 0
          then y
          else 
            if (y != x) && (y <= x)
              then add y x
              else dec zero
INSTANTIATE x:{Int|_v >= 0} -> {Int|_v == x + 1}
INTO x3:{Int|_v >= 0} -> {Int|_v == x3 + 1}
Trying inc
Checking inc :: X2:_ -> {Int|_v == x + y} in
\x . \y . 
    if y <= 0
      then x
      else 
        if x <= 0
          then y
          else 
            if (y != x) && (y <= x)
              then add y x
              else ?? ??
Adding constraint add, x, y C1, C3, C5, C6 |- x3:{Int|_v >= 0} -> {Int|_v == x3 + 1} <: X2:_ -> {Int|_v == x + y} ()
Adding constraint add, x, y C1, C3, C5, C6 |- x3:{Int|_v >= 0} -> {Int|_v == x3 + 1} /\ X2:_ -> {Int|_v == x + y} ()
Typing Constraints
add, x, y C1, C3, C5, C6 |- x3:{Int|_v >= 0} -> {Int|_v == x3 + 1} /\ X2:_ -> {Int|_v == x + y} ()
add, x, y C1, C3, C5, C6 |- x3:{Int|_v >= 0} -> {Int|_v == x3 + 1} <: X2:_ -> {Int|_v == x + y} ()
add, x, y |- C6
Type assignment
Simple Constraints
add, x, y |- C6
X2, add, x, y C1, C3, C5, C6 |- {Int|_v == X2 + 1} <: {Int|_v == x + y} ()
add, x, x3, y C1, C3, C5, C6 |- {Int|_v == x3 + 1} /\ {Int|_v == x + y} ()
Pred assignment
After process simple constraints
add, x, x3, y C1, C3, C5, C6 |- {Int|_v == x3 + 1} /\ {Int|_v == x + y} ()
X2, add, x, y C1, C3, C5, C6 |- {Int|_v == X2 + 1} <: {Int|_v == x + y} ()
Constraints
  False ==> _v == x + y
QMap
  C0 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C1 -> {!(y <= 0)}
  C2 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C3 -> {!(x <= 0)}
  C4 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C5 -> {!(y != x && y <= x)}
  C6 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
Checking consistency
  C1 && (C3 && (C5 && (C6 && (_v == x + y && (_v == x3 + 1 && (x >= 0 && (x3 >= 0 && y >= 0)))))))
Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (6 0)
Remaining Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (6 0)
Trying x
Checking x :: {Int|_v >= 0} in
\x . \y . 
    if y <= 0
      then x
      else 
        if x <= 0
          then y
          else 
            if (y != x) && (y <= x)
              then add y x
              else inc ??
Adding constraint add, x, y C1, C3, C5, C6 |- {Int|_v == x} <: {Int|_v >= 0} ()
Typing Constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == x} <: {Int|_v >= 0} ()
Type assignment
Simple Constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == x} <: {Int|_v >= 0} ()
Pred assignment
After process simple constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == x} <: {Int|_v >= 0} ()
Constraints
  C1 && (C3 && (C5 && (C6 && (_v == x && (x >= 0 && y >= 0))))) ==> _v >= 0
QMap
  C0 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C1 -> {!(y <= 0)}
  C2 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C3 -> {!(x <= 0)}
  C4 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C5 -> {!(y != x && y <= x)}
  C6 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
Checking consistency
Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (7 0)
Remaining Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (7 0)
Synthesized argument x of type {Int|_v == x}
Checking inc
           x :: {Int|_v == x + y} in
\x . \y . 
    if y <= 0
      then x
      else 
        if x <= 0
          then y
          else 
            if (y != x) && (y <= x)
              then add y x
              else ??
Adding constraint add, x, y C1, C3, C5, C6 |- {Int|_v == x + 1} <: {Int|_v == x + y} ()
Typing Constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == x + 1} <: {Int|_v == x + y} ()
Type assignment
Simple Constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == x + 1} <: {Int|_v == x + y} ()
Pred assignment
After process simple constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == x + 1} <: {Int|_v == x + y} ()
Constraints
  C1 && (C3 && (C5 && (C6 && (_v == x + 1 && (x >= 0 && y >= 0))))) ==> _v == x + y
QMap
  C0 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C1 -> {!(y <= 0)}
  C2 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C3 -> {!(x <= 0)}
  C4 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C5 -> {!(y != x && y <= x)}
  C6 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (7 1)
Chosen candidate: 0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (7 1)
Invalid Constraint: C1 && (C3 && (C5 && (C6 && (_v == x + 1 && (x >= 0 && y >= 0))))) ==> _v == x + y
Strengthening: C1 && (C3 && (C5 && (C6 && (_v == x + 1 && (x >= 0 && y >= 0))))) ==> _v == x + y
Instantiated axioms:
All assumptions:
!(x <= 0), !(y <= 0), !(y != x && y <= x), _v == x + 1, x >= 0, y >= 0
RHS: _v == x + y
assumption !(x <= 0) && (!(y <= 0) && (!(y != x && y <= x) && (_v == x + 1 && (x >= 0 && y >= 0))))
mustHave !(_v == x + y)
qualsList [0 != x
          ,0 != y
          ,y != x
          ,0 <= x
          ,0 <= y
          ,x <= y
          ,y <= x]
Optimal valuations:
Pruned valuations:
Diffs: (0)
TYPE ERROR: Cannot find sufficiently strong refinements
when checking inc x ::
{Int|_v == x + y} in
\x . \y . 
    if y <= 0
      then x
      else 
        if x <= 0
          then y
          else 
            if (y != x) && (y <= x)
              then add y x
              else inc x
Trying y
Checking y :: {Int|_v >= 0} in
\x . \y . 
    if y <= 0
      then x
      else 
        if x <= 0
          then y
          else 
            if (y != x) && (y <= x)
              then add y x
              else inc ??
Adding constraint add, x, y C1, C3, C5, C6 |- {Int|_v == y} <: {Int|_v >= 0} ()
Typing Constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == y} <: {Int|_v >= 0} ()
Type assignment
Simple Constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == y} <: {Int|_v >= 0} ()
Pred assignment
After process simple constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == y} <: {Int|_v >= 0} ()
Constraints
  C1 && (C3 && (C5 && (C6 && (_v == y && (x >= 0 && y >= 0))))) ==> _v >= 0
QMap
  C0 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C1 -> {!(y <= 0)}
  C2 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C3 -> {!(x <= 0)}
  C4 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C5 -> {!(y != x && y <= x)}
  C6 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
Checking consistency
Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (7 0)
Remaining Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (7 0)
Synthesized argument y of type {Int|_v == y}
Checking inc
           y :: {Int|_v == x + y} in
\x . \y . 
    if y <= 0
      then x
      else 
        if x <= 0
          then y
          else 
            if (y != x) && (y <= x)
              then add y x
              else ??
Adding constraint add, x, y C1, C3, C5, C6 |- {Int|_v == y + 1} <: {Int|_v == x + y} ()
Typing Constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == y + 1} <: {Int|_v == x + y} ()
Type assignment
Simple Constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == y + 1} <: {Int|_v == x + y} ()
Pred assignment
After process simple constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == y + 1} <: {Int|_v == x + y} ()
Constraints
  C1 && (C3 && (C5 && (C6 && (_v == y + 1 && (x >= 0 && y >= 0))))) ==> _v == x + y
QMap
  C0 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C1 -> {!(y <= 0)}
  C2 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C3 -> {!(x <= 0)}
  C4 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C5 -> {!(y != x && y <= x)}
  C6 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (7 1)
Chosen candidate: 0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (7 1)
Invalid Constraint: C1 && (C3 && (C5 && (C6 && (_v == y + 1 && (x >= 0 && y >= 0))))) ==> _v == x + y
Strengthening: C1 && (C3 && (C5 && (C6 && (_v == y + 1 && (x >= 0 && y >= 0))))) ==> _v == x + y
Instantiated axioms:
All assumptions:
!(x <= 0), !(y <= 0), !(y != x && y <= x), _v == y + 1, x >= 0, y >= 0
RHS: _v == x + y
assumption !(x <= 0) && (!(y <= 0) && (!(y != x && y <= x) && (_v == y + 1 && (x >= 0 && y >= 0))))
mustHave !(_v == x + y)
qualsList [0 != x
          ,0 != y
          ,y != x
          ,0 <= x
          ,0 <= y
          ,x <= y
          ,y <= x]
Optimal valuations:
Pruned valuations:
Diffs: (0)
TYPE ERROR: Cannot find sufficiently strong refinements
when checking inc y ::
{Int|_v == x + y} in
\x . \y . 
    if y <= 0
      then x
      else 
        if x <= 0
          then y
          else 
            if (y != x) && (y <= x)
              then add y x
              else inc y
Trying zero
Checking zero :: {Int|_v >= 0} in
\x . \y . 
    if y <= 0
      then x
      else 
        if x <= 0
          then y
          else 
            if (y != x) && (y <= x)
              then add y x
              else inc ??
Adding constraint add, x, y C1, C3, C5, C6 |- {Int|_v == zero} <: {Int|_v >= 0} ()
Typing Constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == zero} <: {Int|_v >= 0} ()
Type assignment
Simple Constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == zero} <: {Int|_v >= 0} ()
Pred assignment
After process simple constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == zero} <: {Int|_v >= 0} ()
Constraints
  C1 && (C3 && (C5 && (C6 && (_v == zero && (zero == 0 && (x >= 0 && y >= 0)))))) ==> _v >= 0
QMap
  C0 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C1 -> {!(y <= 0)}
  C2 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C3 -> {!(x <= 0)}
  C4 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C5 -> {!(y != x && y <= x)}
  C6 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
Checking consistency
Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (7 0)
Remaining Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (7 0)
Synthesized argument zero of type {Int|_v == zero}
Checking inc
           zero :: {Int|_v == x + y} in
\x . \y . 
    if y <= 0
      then x
      else 
        if x <= 0
          then y
          else 
            if (y != x) && (y <= x)
              then add y x
              else ??
Adding constraint add, x, y C1, C3, C5, C6 |- {Int|_v == zero + 1} <: {Int|_v == x + y} ()
Typing Constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == zero + 1} <: {Int|_v == x + y} ()
Type assignment
Simple Constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == zero + 1} <: {Int|_v == x + y} ()
Pred assignment
After process simple constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == zero + 1} <: {Int|_v == x + y} ()
Constraints
  C1 && (C3 && (C5 && (C6 && (_v == zero + 1 && (zero == 0 && (x >= 0 && y >= 0)))))) ==> _v == x + y
QMap
  C0 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C1 -> {!(y <= 0)}
  C2 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C3 -> {!(x <= 0)}
  C4 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C5 -> {!(y != x && y <= x)}
  C6 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (7 1)
Chosen candidate: 0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (7 1)
Invalid Constraint: C1 && (C3 && (C5 && (C6 && (_v == zero + 1 && (zero == 0 && (x >= 0 && y >= 0)))))) ==> _v == x + y
Strengthening: C1 && (C3 && (C5 && (C6 && (_v == zero + 1 && (zero == 0 && (x >= 0 && y >= 0)))))) ==> _v == x + y
Instantiated axioms:
All assumptions:
!(x <= 0), !(y <= 0), !(y != x && y <= x), _v == zero + 1, zero == 0, x >= 0, y >= 0
RHS: _v == x + y
assumption !(x <= 0) && (!(y <= 0) && (!(y != x && y <= x) && (_v == zero + 1 && (zero == 0 && (x >= 0 && y >= 0)))))
mustHave !(_v == x + y)
qualsList [0 != x
          ,0 != y
          ,y != x
          ,0 <= x
          ,0 <= y
          ,x <= y
          ,y <= x]
Optimal valuations:
Pruned valuations:
Diffs: (0)
TYPE ERROR: Cannot find sufficiently strong refinements
when checking inc zero ::
{Int|_v == x + y} in
\x . \y . 
    if y <= 0
      then x
      else 
        if x <= 0
          then y
          else 
            if (y != x) && (y <= x)
              then add y x
              else inc zero
INSTANTIATE x0:{Int|_v >= 0 && (_v >= 0 && _v < x)} -> y:{Int|_v >= 0} -> {Int|_v == x0 + y}
INTO x3:{Int|_v >= 0 && (_v >= 0 && _v < x)} -> x4:{Int|_v >= 0} -> {Int|_v == x3 + x4}
Trying add
Adding constraint add, x, y C1, C3, C5, C6 |- x3:Int -> x4:Int -> {Int|False} <: x:{Int|False} -> y:{Int|False} -> Int ()
Checking add :: X3:_ -> X2:_ -> {Int|_v == x + y} in
\x . \y . 
    if y <= 0
      then x
      else 
        if x <= 0
          then y
          else 
            if (y != x) && (y <= x)
              then add y x
              else ?? ?? ??
Adding constraint add, x, y C1, C3, C5, C6 |- x3:{Int|_v >= 0 && (_v >= 0 && _v < x)} -> x4:{Int|_v >= 0} -> {Int|_v == x3 + x4} <: X3:_ -> X2:_ -> {Int|_v == x + y} ()
Adding constraint add, x, y C1, C3, C5, C6 |- x3:{Int|_v >= 0 && (_v >= 0 && _v < x)} -> x4:{Int|_v >= 0} -> {Int|_v == x3 + x4} /\ X3:_ -> X2:_ -> {Int|_v == x + y} ()
Typing Constraints
add, x, y C1, C3, C5, C6 |- x3:{Int|_v >= 0 && (_v >= 0 && _v < x)} -> x4:{Int|_v >= 0} -> {Int|_v == x3 + x4} /\ X3:_ -> X2:_ -> {Int|_v == x + y} ()
add, x, y C1, C3, C5, C6 |- x3:{Int|_v >= 0 && (_v >= 0 && _v < x)} -> x4:{Int|_v >= 0} -> {Int|_v == x3 + x4} <: X3:_ -> X2:_ -> {Int|_v == x + y} ()
add, x, y C1, C3, C5, C6 |- x3:Int -> x4:Int -> {Int|False} <: x:{Int|False} -> y:{Int|False} -> Int ()
add, x, y |- C6
Type assignment
Simple Constraints
add, x, y |- C6
add, x, y C1, C3, C5, C6 |- {Int|False} <: Int ()
add, x, y C1, C3, C5, C6 |- {Int|False} <: Int ()
add, x, y C1, C3, C5, C6 |- {Int|False} <: Int ()
X2, X3, add, x, y C1, C3, C5, C6 |- {Int|_v == X3 + X2} <: {Int|_v == x + y} ()
add, x, x3, x4, y C1, C3, C5, C6 |- {Int|_v == x3 + x4} /\ {Int|_v == x + y} ()
Pred assignment
After process simple constraints
add, x, x3, x4, y C1, C3, C5, C6 |- {Int|_v == x3 + x4} /\ {Int|_v == x + y} ()
X2, X3, add, x, y C1, C3, C5, C6 |- {Int|_v == X3 + X2} <: {Int|_v == x + y} ()
Constraints
  False ==> _v == x + y
QMap
  C0 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C1 -> {!(y <= 0)}
  C2 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C3 -> {!(x <= 0)}
  C4 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C5 -> {!(y != x && y <= x)}
  C6 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
Checking consistency
  C1 && (C3 && (C5 && (C6 && (_v == x + y && (_v == x3 + x4 && (x >= 0 && (x4 >= 0 && (y >= 0 && (x3 >= 0 && (x3 >= 0 && x3 < x))))))))))
Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (6 0)
Remaining Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (6 0)
Trying x
Checking x :: {Int|_v >= 0 && (_v >= 0 && _v < x)} in
\x . \y . 
    if y <= 0
      then x
      else 
        if x <= 0
          then y
          else 
            if (y != x) && (y <= x)
              then add y x
              else add ?? ??
Adding constraint add, x, y C1, C3, C5, C6 |- {Int|_v == x} <: {Int|_v >= 0 && (_v >= 0 && _v < x)} ()
Typing Constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == x} <: {Int|_v >= 0 && (_v >= 0 && _v < x)} ()
Type assignment
Simple Constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == x} <: {Int|_v >= 0 && (_v >= 0 && _v < x)} ()
Pred assignment
After process simple constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == x} <: {Int|_v >= 0 && (_v >= 0 && _v < x)} ()
Constraints
  C1 && (C3 && (C5 && (C6 && (_v == x && (x >= 0 && y >= 0))))) ==> _v >= 0 && (_v >= 0 && _v < x)
QMap
  C0 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C1 -> {!(y <= 0)}
  C2 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C3 -> {!(x <= 0)}
  C4 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C5 -> {!(y != x && y <= x)}
  C6 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (6 1)
Chosen candidate: 0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (6 1)
Invalid Constraint: C1 && (C3 && (C5 && (C6 && (_v == x && (x >= 0 && y >= 0))))) ==> _v >= 0 && (_v >= 0 && _v < x)
Strengthening: C1 && (C3 && (C5 && (C6 && (_v == x && (x >= 0 && y >= 0))))) ==> _v >= 0 && (_v >= 0 && _v < x)
Instantiated axioms:
All assumptions:
!(x <= 0), !(y <= 0), !(y != x && y <= x), _v == x, x >= 0, y >= 0
RHS: _v >= 0 && (_v >= 0 && _v < x)
assumption !(x <= 0) && (!(y <= 0) && (!(y != x && y <= x) && (_v == x && (x >= 0 && y >= 0))))
mustHave !(_v >= 0 && (_v >= 0 && _v < x))
qualsList [0 != x
          ,0 != y
          ,y != x
          ,0 <= x
          ,0 <= y
          ,x <= y
          ,y <= x]
Optimal valuations:
Pruned valuations:
Diffs: (0)
TYPE ERROR: Cannot find sufficiently strong refinements
when checking x ::
{Int|_v >= 0 && (_v >= 0 && _v < x)}
in
\x . \y . 
    if y <= 0
      then x
      else 
        if x <= 0
          then y
          else 
            if (y != x) && (y <= x)
              then add y x
              else add x ??
Trying y
Checking y :: {Int|_v >= 0 && (_v >= 0 && _v < x)} in
\x . \y . 
    if y <= 0
      then x
      else 
        if x <= 0
          then y
          else 
            if (y != x) && (y <= x)
              then add y x
              else add ?? ??
Adding constraint add, x, y C1, C3, C5, C6 |- {Int|_v == y} <: {Int|_v >= 0 && (_v >= 0 && _v < x)} ()
Typing Constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == y} <: {Int|_v >= 0 && (_v >= 0 && _v < x)} ()
Type assignment
Simple Constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == y} <: {Int|_v >= 0 && (_v >= 0 && _v < x)} ()
Pred assignment
After process simple constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == y} <: {Int|_v >= 0 && (_v >= 0 && _v < x)} ()
Constraints
  C1 && (C3 && (C5 && (C6 && (_v == y && (x >= 0 && y >= 0))))) ==> _v >= 0 && (_v >= 0 && _v < x)
QMap
  C0 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C1 -> {!(y <= 0)}
  C2 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C3 -> {!(x <= 0)}
  C4 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C5 -> {!(y != x && y <= x)}
  C6 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (6 1)
Chosen candidate: 0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (6 1)
Invalid Constraint: C1 && (C3 && (C5 && (C6 && (_v == y && (x >= 0 && y >= 0))))) ==> _v >= 0 && (_v >= 0 && _v < x)
Strengthening: C1 && (C3 && (C5 && (C6 && (_v == y && (x >= 0 && y >= 0))))) ==> _v >= 0 && (_v >= 0 && _v < x)
Instantiated axioms:
All assumptions:
!(x <= 0), !(y <= 0), !(y != x && y <= x), _v == y, x >= 0, y >= 0
RHS: _v >= 0 && (_v >= 0 && _v < x)
assumption !(x <= 0) && (!(y <= 0) && (!(y != x && y <= x) && (_v == y && (x >= 0 && y >= 0))))
mustHave !(_v >= 0 && (_v >= 0 && _v < x))
qualsList [0 != x
          ,0 != y
          ,y != x
          ,0 <= x
          ,0 <= y
          ,x <= y
          ,y <= x]
Optimal valuations:
Pruned valuations:
Diffs: (0)
TYPE ERROR: Cannot find sufficiently strong refinements
when checking y ::
{Int|_v >= 0 && (_v >= 0 && _v < x)}
in
\x . \y . 
    if y <= 0
      then x
      else 
        if x <= 0
          then y
          else 
            if (y != x) && (y <= x)
              then add y x
              else add y ??
Trying zero
Checking zero :: {Int|_v >= 0 && (_v >= 0 && _v < x)} in
\x . \y . 
    if y <= 0
      then x
      else 
        if x <= 0
          then y
          else 
            if (y != x) && (y <= x)
              then add y x
              else add ?? ??
Adding constraint add, x, y C1, C3, C5, C6 |- {Int|_v == zero} <: {Int|_v >= 0 && (_v >= 0 && _v < x)} ()
Typing Constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == zero} <: {Int|_v >= 0 && (_v >= 0 && _v < x)} ()
Type assignment
Simple Constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == zero} <: {Int|_v >= 0 && (_v >= 0 && _v < x)} ()
Pred assignment
After process simple constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == zero} <: {Int|_v >= 0 && (_v >= 0 && _v < x)} ()
Constraints
  C1 && (C3 && (C5 && (C6 && (_v == zero && (zero == 0 && (x >= 0 && y >= 0)))))) ==> _v >= 0 && (_v >= 0 && _v < x)
QMap
  C0 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C1 -> {!(y <= 0)}
  C2 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C3 -> {!(x <= 0)}
  C4 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C5 -> {!(y != x && y <= x)}
  C6 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
Checking consistency
Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (7 0)
Remaining Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (7 0)
Synthesized argument zero of type {Int|_v == zero}
Checking add
           zero :: X2:_ -> {Int|_v == x + y} in
\x . \y . 
    if y <= 0
      then x
      else 
        if x <= 0
          then y
          else 
            if (y != x) && (y <= x)
              then add y x
              else ?? ??
Adding constraint add, x, y C1, C3, C5, C6 |- x4:{Int|_v >= 0} -> {Int|_v == zero + x4} <: X2:_ -> {Int|_v == x + y} ()
Adding constraint add, x, y C1, C3, C5, C6 |- x4:{Int|_v >= 0} -> {Int|_v == zero + x4} /\ X2:_ -> {Int|_v == x + y} ()
Typing Constraints
add, x, y C1, C3, C5, C6 |- x4:{Int|_v >= 0} -> {Int|_v == zero + x4} /\ X2:_ -> {Int|_v == x + y} ()
add, x, y C1, C3, C5, C6 |- x4:{Int|_v >= 0} -> {Int|_v == zero + x4} <: X2:_ -> {Int|_v == x + y} ()
Type assignment
Simple Constraints
X2, add, x, y C1, C3, C5, C6 |- {Int|_v == zero + X2} <: {Int|_v == x + y} ()
add, x, x4, y C1, C3, C5, C6 |- {Int|_v == zero + x4} /\ {Int|_v == x + y} ()
Pred assignment
After process simple constraints
add, x, x4, y C1, C3, C5, C6 |- {Int|_v == zero + x4} /\ {Int|_v == x + y} ()
X2, add, x, y C1, C3, C5, C6 |- {Int|_v == zero + X2} <: {Int|_v == x + y} ()
Constraints
  False ==> _v == x + y
QMap
  C0 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C1 -> {!(y <= 0)}
  C2 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C3 -> {!(x <= 0)}
  C4 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C5 -> {!(y != x && y <= x)}
  C6 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
Checking consistency
  C1 && (C3 && (C5 && (C6 && (_v == x + y && (_v == zero + x4 && (zero == 0 && (x >= 0 && (x4 >= 0 && y >= 0))))))))
Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (7 0)
Remaining Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (7 0)
Trying x
Checking x :: {Int|_v >= 0} in
\x . \y . 
    if y <= 0
      then x
      else 
        if x <= 0
          then y
          else 
            if (y != x) && (y <= x)
              then add y x
              else add zero ??
Adding constraint add, x, y C1, C3, C5, C6 |- {Int|_v == x} <: {Int|_v >= 0} ()
Typing Constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == x} <: {Int|_v >= 0} ()
Type assignment
Simple Constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == x} <: {Int|_v >= 0} ()
Pred assignment
After process simple constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == x} <: {Int|_v >= 0} ()
Constraints
  C1 && (C3 && (C5 && (C6 && (_v == x && (x >= 0 && y >= 0))))) ==> _v >= 0
QMap
  C0 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C1 -> {!(y <= 0)}
  C2 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C3 -> {!(x <= 0)}
  C4 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C5 -> {!(y != x && y <= x)}
  C6 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
Checking consistency
Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (8 0)
Remaining Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (8 0)
Synthesized argument x of type {Int|_v == x}
Checking add zero
           x :: {Int|_v == x + y} in
\x . \y . 
    if y <= 0
      then x
      else 
        if x <= 0
          then y
          else 
            if (y != x) && (y <= x)
              then add y x
              else ??
Adding constraint add, x, y C1, C3, C5, C6 |- {Int|_v == zero + x} <: {Int|_v == x + y} ()
Typing Constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == zero + x} <: {Int|_v == x + y} ()
Type assignment
Simple Constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == zero + x} <: {Int|_v == x + y} ()
Pred assignment
After process simple constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == zero + x} <: {Int|_v == x + y} ()
Constraints
  C1 && (C3 && (C5 && (C6 && (_v == zero + x && (zero == 0 && (x >= 0 && y >= 0)))))) ==> _v == x + y
QMap
  C0 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C1 -> {!(y <= 0)}
  C2 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C3 -> {!(x <= 0)}
  C4 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C5 -> {!(y != x && y <= x)}
  C6 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (8 1)
Chosen candidate: 0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (8 1)
Invalid Constraint: C1 && (C3 && (C5 && (C6 && (_v == zero + x && (zero == 0 && (x >= 0 && y >= 0)))))) ==> _v == x + y
Strengthening: C1 && (C3 && (C5 && (C6 && (_v == zero + x && (zero == 0 && (x >= 0 && y >= 0)))))) ==> _v == x + y
Instantiated axioms:
All assumptions:
!(x <= 0), !(y <= 0), !(y != x && y <= x), _v == zero + x, zero == 0, x >= 0, y >= 0
RHS: _v == x + y
assumption !(x <= 0) && (!(y <= 0) && (!(y != x && y <= x) && (_v == zero + x && (zero == 0 && (x >= 0 && y >= 0)))))
mustHave !(_v == x + y)
qualsList [0 != x
          ,0 != y
          ,y != x
          ,0 <= x
          ,0 <= y
          ,x <= y
          ,y <= x]
Optimal valuations:
Pruned valuations:
Diffs: (0)
TYPE ERROR: Cannot find sufficiently strong refinements
when checking add zero x ::
{Int|_v == x + y} in
\x . \y . 
    if y <= 0
      then x
      else 
        if x <= 0
          then y
          else 
            if (y != x) && (y <= x)
              then add y x
              else add zero x
Trying y
Checking y :: {Int|_v >= 0} in
\x . \y . 
    if y <= 0
      then x
      else 
        if x <= 0
          then y
          else 
            if (y != x) && (y <= x)
              then add y x
              else add zero ??
Adding constraint add, x, y C1, C3, C5, C6 |- {Int|_v == y} <: {Int|_v >= 0} ()
Typing Constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == y} <: {Int|_v >= 0} ()
Type assignment
Simple Constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == y} <: {Int|_v >= 0} ()
Pred assignment
After process simple constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == y} <: {Int|_v >= 0} ()
Constraints
  C1 && (C3 && (C5 && (C6 && (_v == y && (x >= 0 && y >= 0))))) ==> _v >= 0
QMap
  C0 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C1 -> {!(y <= 0)}
  C2 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C3 -> {!(x <= 0)}
  C4 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C5 -> {!(y != x && y <= x)}
  C6 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
Checking consistency
Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (8 0)
Remaining Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (8 0)
Synthesized argument y of type {Int|_v == y}
Checking add zero
           y :: {Int|_v == x + y} in
\x . \y . 
    if y <= 0
      then x
      else 
        if x <= 0
          then y
          else 
            if (y != x) && (y <= x)
              then add y x
              else ??
Adding constraint add, x, y C1, C3, C5, C6 |- {Int|_v == zero + y} <: {Int|_v == x + y} ()
Typing Constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == zero + y} <: {Int|_v == x + y} ()
Type assignment
Simple Constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == zero + y} <: {Int|_v == x + y} ()
Pred assignment
After process simple constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == zero + y} <: {Int|_v == x + y} ()
Constraints
  C1 && (C3 && (C5 && (C6 && (_v == zero + y && (zero == 0 && (x >= 0 && y >= 0)))))) ==> _v == x + y
QMap
  C0 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C1 -> {!(y <= 0)}
  C2 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C3 -> {!(x <= 0)}
  C4 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C5 -> {!(y != x && y <= x)}
  C6 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (8 1)
Chosen candidate: 0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (8 1)
Invalid Constraint: C1 && (C3 && (C5 && (C6 && (_v == zero + y && (zero == 0 && (x >= 0 && y >= 0)))))) ==> _v == x + y
Strengthening: C1 && (C3 && (C5 && (C6 && (_v == zero + y && (zero == 0 && (x >= 0 && y >= 0)))))) ==> _v == x + y
Instantiated axioms:
All assumptions:
!(x <= 0), !(y <= 0), !(y != x && y <= x), _v == zero + y, zero == 0, x >= 0, y >= 0
RHS: _v == x + y
assumption !(x <= 0) && (!(y <= 0) && (!(y != x && y <= x) && (_v == zero + y && (zero == 0 && (x >= 0 && y >= 0)))))
mustHave !(_v == x + y)
qualsList [0 != x
          ,0 != y
          ,y != x
          ,0 <= x
          ,0 <= y
          ,x <= y
          ,y <= x]
Optimal valuations:
Pruned valuations:
Diffs: (0)
TYPE ERROR: Cannot find sufficiently strong refinements
when checking add zero y ::
{Int|_v == x + y} in
\x . \y . 
    if y <= 0
      then x
      else 
        if x <= 0
          then y
          else 
            if (y != x) && (y <= x)
              then add y x
              else add zero y
Trying zero
Checking zero :: {Int|_v >= 0} in
\x . \y . 
    if y <= 0
      then x
      else 
        if x <= 0
          then y
          else 
            if (y != x) && (y <= x)
              then add y x
              else add zero ??
Adding constraint add, x, y C1, C3, C5, C6 |- {Int|_v == zero} <: {Int|_v >= 0} ()
Typing Constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == zero} <: {Int|_v >= 0} ()
Type assignment
Simple Constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == zero} <: {Int|_v >= 0} ()
Pred assignment
After process simple constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == zero} <: {Int|_v >= 0} ()
Constraints
  C1 && (C3 && (C5 && (C6 && (_v == zero && (zero == 0 && (x >= 0 && y >= 0)))))) ==> _v >= 0
QMap
  C0 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C1 -> {!(y <= 0)}
  C2 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C3 -> {!(x <= 0)}
  C4 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C5 -> {!(y != x && y <= x)}
  C6 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
Checking consistency
Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (8 0)
Remaining Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (8 0)
Synthesized argument zero of type {Int|_v == zero}
Checking add zero
           zero :: {Int|_v == x + y} in
\x . \y . 
    if y <= 0
      then x
      else 
        if x <= 0
          then y
          else 
            if (y != x) && (y <= x)
              then add y x
              else ??
Adding constraint add, x, y C1, C3, C5, C6 |- {Int|_v == zero + zero} <: {Int|_v == x + y} ()
Typing Constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == zero + zero} <: {Int|_v == x + y} ()
Type assignment
Simple Constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == zero + zero} <: {Int|_v == x + y} ()
Pred assignment
After process simple constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == zero + zero} <: {Int|_v == x + y} ()
Constraints
  C1 && (C3 && (C5 && (C6 && (_v == zero + zero && (zero == 0 && (x >= 0 && y >= 0)))))) ==> _v == x + y
QMap
  C0 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C1 -> {!(y <= 0)}
  C2 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C3 -> {!(x <= 0)}
  C4 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C5 -> {!(y != x && y <= x)}
  C6 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (8 1)
Chosen candidate: 0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (8 1)
Invalid Constraint: C1 && (C3 && (C5 && (C6 && (_v == zero + zero && (zero == 0 && (x >= 0 && y >= 0)))))) ==> _v == x + y
Strengthening: C1 && (C3 && (C5 && (C6 && (_v == zero + zero && (zero == 0 && (x >= 0 && y >= 0)))))) ==> _v == x + y
Instantiated axioms:
All assumptions:
!(x <= 0), !(y <= 0), !(y != x && y <= x), _v == zero + zero, zero == 0, x >= 0, y >= 0
RHS: _v == x + y
assumption !(x <= 0) && (!(y <= 0) && (!(y != x && y <= x) && (_v == zero + zero && (zero == 0 && (x >= 0 && y >= 0)))))
mustHave !(_v == x + y)
qualsList [0 != x
          ,0 != y
          ,y != x
          ,0 <= x
          ,0 <= y
          ,x <= y
          ,y <= x]
Optimal valuations:
Pruned valuations:
Diffs: (0)
TYPE ERROR: Cannot find sufficiently strong refinements
when checking add zero zero ::
{Int|_v == x + y} in
\x . \y . 
    if y <= 0
      then x
      else 
        if x <= 0
          then y
          else 
            if (y != x) && (y <= x)
              then add y x
              else add zero zero
INSTANTIATE x:{Int|_v >= 0} -> {Int|_v == x - 1}
INTO x3:{Int|_v >= 0} -> {Int|_v == x3 - 1}
Trying dec
Checking dec :: X2:_ -> {Int|_v == x + y} in
\x . \y . 
    if y <= 0
      then x
      else 
        if x <= 0
          then y
          else 
            if (y != x) && (y <= x)
              then add y x
              else ?? ??
Adding constraint add, x, y C1, C3, C5, C6 |- x3:{Int|_v >= 0} -> {Int|_v == x3 - 1} <: X2:_ -> {Int|_v == x + y} ()
Adding constraint add, x, y C1, C3, C5, C6 |- x3:{Int|_v >= 0} -> {Int|_v == x3 - 1} /\ X2:_ -> {Int|_v == x + y} ()
Typing Constraints
add, x, y C1, C3, C5, C6 |- x3:{Int|_v >= 0} -> {Int|_v == x3 - 1} /\ X2:_ -> {Int|_v == x + y} ()
add, x, y C1, C3, C5, C6 |- x3:{Int|_v >= 0} -> {Int|_v == x3 - 1} <: X2:_ -> {Int|_v == x + y} ()
add, x, y |- C6
Type assignment
Simple Constraints
add, x, y |- C6
X2, add, x, y C1, C3, C5, C6 |- {Int|_v == X2 - 1} <: {Int|_v == x + y} ()
add, x, x3, y C1, C3, C5, C6 |- {Int|_v == x3 - 1} /\ {Int|_v == x + y} ()
Pred assignment
After process simple constraints
add, x, x3, y C1, C3, C5, C6 |- {Int|_v == x3 - 1} /\ {Int|_v == x + y} ()
X2, add, x, y C1, C3, C5, C6 |- {Int|_v == X2 - 1} <: {Int|_v == x + y} ()
Constraints
  False ==> _v == x + y
QMap
  C0 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C1 -> {!(y <= 0)}
  C2 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C3 -> {!(x <= 0)}
  C4 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C5 -> {!(y != x && y <= x)}
  C6 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
Checking consistency
  C1 && (C3 && (C5 && (C6 && (_v == x + y && (_v == x3 - 1 && (x >= 0 && (x3 >= 0 && y >= 0)))))))
Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (6 0)
Remaining Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (6 0)
INSTANTIATE x:{Int|_v >= 0} -> {Int|_v == x + 1}
INTO x4:{Int|_v >= 0} -> {Int|_v == x4 + 1}
Trying inc
Checking inc :: X3:_ -> {Int|_v >= 0} in
\x . \y . 
    if y <= 0
      then x
      else 
        if x <= 0
          then y
          else 
            if (y != x) && (y <= x)
              then add y x
              else dec (?? ??)
Adding constraint add, x, y C1, C3, C5, C6 |- x4:{Int|_v >= 0} -> {Int|_v == x4 + 1} <: X3:_ -> {Int|_v >= 0} ()
Adding constraint add, x, y C1, C3, C5, C6 |- x4:{Int|_v >= 0} -> {Int|_v == x4 + 1} /\ X3:_ -> {Int|_v >= 0} ()
Typing Constraints
add, x, y C1, C3, C5, C6 |- x4:{Int|_v >= 0} -> {Int|_v == x4 + 1} /\ X3:_ -> {Int|_v >= 0} ()
add, x, y C1, C3, C5, C6 |- x4:{Int|_v >= 0} -> {Int|_v == x4 + 1} <: X3:_ -> {Int|_v >= 0} ()
Type assignment
Simple Constraints
X3, add, x, y C1, C3, C5, C6 |- {Int|_v == X3 + 1} <: {Int|_v >= 0} ()
add, x, x4, y C1, C3, C5, C6 |- {Int|_v == x4 + 1} /\ {Int|_v >= 0} ()
Pred assignment
After process simple constraints
add, x, x4, y C1, C3, C5, C6 |- {Int|_v == x4 + 1} /\ {Int|_v >= 0} ()
X3, add, x, y C1, C3, C5, C6 |- {Int|_v == X3 + 1} <: {Int|_v >= 0} ()
Constraints
  False ==> _v >= 0
QMap
  C0 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C1 -> {!(y <= 0)}
  C2 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C3 -> {!(x <= 0)}
  C4 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C5 -> {!(y != x && y <= x)}
  C6 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
Checking consistency
  C1 && (C3 && (C5 && (C6 && (_v == x4 + 1 && (_v >= 0 && (x >= 0 && (x4 >= 0 && y >= 0)))))))
Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (7 0)
Remaining Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (7 0)
Trying x
Checking x :: {Int|_v >= 0} in
\x . \y . 
    if y <= 0
      then x
      else 
        if x <= 0
          then y
          else 
            if (y != x) && (y <= x)
              then add y x
              else dec (inc ??)
Adding constraint add, x, y C1, C3, C5, C6 |- {Int|_v == x} <: {Int|_v >= 0} ()
Typing Constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == x} <: {Int|_v >= 0} ()
Type assignment
Simple Constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == x} <: {Int|_v >= 0} ()
Pred assignment
After process simple constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == x} <: {Int|_v >= 0} ()
Constraints
  C1 && (C3 && (C5 && (C6 && (_v == x && (x >= 0 && y >= 0))))) ==> _v >= 0
QMap
  C0 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C1 -> {!(y <= 0)}
  C2 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C3 -> {!(x <= 0)}
  C4 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C5 -> {!(y != x && y <= x)}
  C6 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
Checking consistency
Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (8 0)
Remaining Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (8 0)
Synthesized argument x of type {Int|_v == x}
Checking inc
           x :: {Int|_v >= 0} in
\x . \y . 
    if y <= 0
      then x
      else 
        if x <= 0
          then y
          else 
            if (y != x) && (y <= x)
              then add y x
              else dec ??
Adding constraint add, x, y C1, C3, C5, C6 |- {Int|_v == x + 1} <: {Int|_v >= 0} ()
Typing Constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == x + 1} <: {Int|_v >= 0} ()
Type assignment
Simple Constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == x + 1} <: {Int|_v >= 0} ()
Pred assignment
After process simple constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == x + 1} <: {Int|_v >= 0} ()
Constraints
  C1 && (C3 && (C5 && (C6 && (_v == x + 1 && (x >= 0 && y >= 0))))) ==> _v >= 0
QMap
  C0 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C1 -> {!(y <= 0)}
  C2 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C3 -> {!(x <= 0)}
  C4 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C5 -> {!(y != x && y <= x)}
  C6 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
Checking consistency
Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (9 0)
Remaining Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (9 0)
Synthesized argument inc
                       x of type {Int|_v == x + 1}
Checking dec (inc
                x) :: {Int|_v == x + y} in
\x . \y . 
    if y <= 0
      then x
      else 
        if x <= 0
          then y
          else 
            if (y != x) && (y <= x)
              then add y x
              else ??
Adding constraint add, x, y C1, C3, C5, C6 |- LET x3:({Int|_v == x + 1}) IN {Int|_v == x3 - 1} <: {Int|_v == x + y} ()
Typing Constraints
add, x, y C1, C3, C5, C6 |- LET x3:({Int|_v == x + 1}) IN {Int|_v == x3 - 1} <: {Int|_v == x + y} ()
Type assignment
Simple Constraints
add, x, x3, y C1, C3, C5, C6 |- {Int|_v == x3 - 1} <: {Int|_v == x + y} ()
Pred assignment
After process simple constraints
add, x, x3, y C1, C3, C5, C6 |- {Int|_v == x3 - 1} <: {Int|_v == x + y} ()
Constraints
  C1 && (C3 && (C5 && (C6 && (_v == x3 - 1 && (x3 == x + 1 && (x >= 0 && y >= 0)))))) ==> _v == x + y
QMap
  C0 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C1 -> {!(y <= 0)}
  C2 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C3 -> {!(x <= 0)}
  C4 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C5 -> {!(y != x && y <= x)}
  C6 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (9 1)
Chosen candidate: 0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (9 1)
Invalid Constraint: C1 && (C3 && (C5 && (C6 && (_v == x3 - 1 && (x3 == x + 1 && (x >= 0 && y >= 0)))))) ==> _v == x + y
Strengthening: C1 && (C3 && (C5 && (C6 && (_v == x3 - 1 && (x3 == x + 1 && (x >= 0 && y >= 0)))))) ==> _v == x + y
Instantiated axioms:
All assumptions:
!(x <= 0), !(y <= 0), !(y != x && y <= x), _v == x3 - 1, x3 == x + 1, x >= 0, y >= 0
RHS: _v == x + y
assumption !(x <= 0) && (!(y <= 0) && (!(y != x && y <= x) && (_v == x3 - 1 && (x3 == x + 1 && (x >= 0 && y >= 0)))))
mustHave !(_v == x + y)
qualsList [0 != x
          ,0 != y
          ,y != x
          ,0 <= x
          ,0 <= y
          ,x <= y
          ,y <= x]
Optimal valuations:
Pruned valuations:
Diffs: (0)
TYPE ERROR: Cannot find sufficiently strong refinements
when checking dec (inc x) ::
{Int|_v == x + y} in
\x . \y . 
    if y <= 0
      then x
      else 
        if x <= 0
          then y
          else 
            if (y != x) && (y <= x)
              then add y x
              else dec (inc x)
Trying y
Checking y :: {Int|_v >= 0} in
\x . \y . 
    if y <= 0
      then x
      else 
        if x <= 0
          then y
          else 
            if (y != x) && (y <= x)
              then add y x
              else dec (inc ??)
Adding constraint add, x, y C1, C3, C5, C6 |- {Int|_v == y} <: {Int|_v >= 0} ()
Typing Constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == y} <: {Int|_v >= 0} ()
Type assignment
Simple Constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == y} <: {Int|_v >= 0} ()
Pred assignment
After process simple constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == y} <: {Int|_v >= 0} ()
Constraints
  C1 && (C3 && (C5 && (C6 && (_v == y && (x >= 0 && y >= 0))))) ==> _v >= 0
QMap
  C0 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C1 -> {!(y <= 0)}
  C2 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C3 -> {!(x <= 0)}
  C4 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C5 -> {!(y != x && y <= x)}
  C6 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
Checking consistency
Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (8 0)
Remaining Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (8 0)
Synthesized argument y of type {Int|_v == y}
Checking inc
           y :: {Int|_v >= 0} in
\x . \y . 
    if y <= 0
      then x
      else 
        if x <= 0
          then y
          else 
            if (y != x) && (y <= x)
              then add y x
              else dec ??
Adding constraint add, x, y C1, C3, C5, C6 |- {Int|_v == y + 1} <: {Int|_v >= 0} ()
Typing Constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == y + 1} <: {Int|_v >= 0} ()
Type assignment
Simple Constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == y + 1} <: {Int|_v >= 0} ()
Pred assignment
After process simple constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == y + 1} <: {Int|_v >= 0} ()
Constraints
  C1 && (C3 && (C5 && (C6 && (_v == y + 1 && (x >= 0 && y >= 0))))) ==> _v >= 0
QMap
  C0 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C1 -> {!(y <= 0)}
  C2 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C3 -> {!(x <= 0)}
  C4 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C5 -> {!(y != x && y <= x)}
  C6 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
Checking consistency
Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (9 0)
Remaining Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (9 0)
Synthesized argument inc
                       y of type {Int|_v == y + 1}
Checking dec (inc
                y) :: {Int|_v == x + y} in
\x . \y . 
    if y <= 0
      then x
      else 
        if x <= 0
          then y
          else 
            if (y != x) && (y <= x)
              then add y x
              else ??
Adding constraint add, x, y C1, C3, C5, C6 |- LET x3:({Int|_v == y + 1}) IN {Int|_v == x3 - 1} <: {Int|_v == x + y} ()
Typing Constraints
add, x, y C1, C3, C5, C6 |- LET x3:({Int|_v == y + 1}) IN {Int|_v == x3 - 1} <: {Int|_v == x + y} ()
Type assignment
Simple Constraints
add, x, x3, y C1, C3, C5, C6 |- {Int|_v == x3 - 1} <: {Int|_v == x + y} ()
Pred assignment
After process simple constraints
add, x, x3, y C1, C3, C5, C6 |- {Int|_v == x3 - 1} <: {Int|_v == x + y} ()
Constraints
  C1 && (C3 && (C5 && (C6 && (_v == x3 - 1 && (x3 == y + 1 && (x >= 0 && y >= 0)))))) ==> _v == x + y
QMap
  C0 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C1 -> {!(y <= 0)}
  C2 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C3 -> {!(x <= 0)}
  C4 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C5 -> {!(y != x && y <= x)}
  C6 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (9 1)
Chosen candidate: 0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (9 1)
Invalid Constraint: C1 && (C3 && (C5 && (C6 && (_v == x3 - 1 && (x3 == y + 1 && (x >= 0 && y >= 0)))))) ==> _v == x + y
Strengthening: C1 && (C3 && (C5 && (C6 && (_v == x3 - 1 && (x3 == y + 1 && (x >= 0 && y >= 0)))))) ==> _v == x + y
Instantiated axioms:
All assumptions:
!(x <= 0), !(y <= 0), !(y != x && y <= x), _v == x3 - 1, x3 == y + 1, x >= 0, y >= 0
RHS: _v == x + y
assumption !(x <= 0) && (!(y <= 0) && (!(y != x && y <= x) && (_v == x3 - 1 && (x3 == y + 1 && (x >= 0 && y >= 0)))))
mustHave !(_v == x + y)
qualsList [0 != x
          ,0 != y
          ,y != x
          ,0 <= x
          ,0 <= y
          ,x <= y
          ,y <= x]
Optimal valuations:
Pruned valuations:
Diffs: (0)
TYPE ERROR: Cannot find sufficiently strong refinements
when checking dec (inc y) ::
{Int|_v == x + y} in
\x . \y . 
    if y <= 0
      then x
      else 
        if x <= 0
          then y
          else 
            if (y != x) && (y <= x)
              then add y x
              else dec (inc y)
Trying zero
Checking zero :: {Int|_v >= 0} in
\x . \y . 
    if y <= 0
      then x
      else 
        if x <= 0
          then y
          else 
            if (y != x) && (y <= x)
              then add y x
              else dec (inc ??)
Adding constraint add, x, y C1, C3, C5, C6 |- {Int|_v == zero} <: {Int|_v >= 0} ()
Typing Constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == zero} <: {Int|_v >= 0} ()
Type assignment
Simple Constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == zero} <: {Int|_v >= 0} ()
Pred assignment
After process simple constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == zero} <: {Int|_v >= 0} ()
Constraints
  C1 && (C3 && (C5 && (C6 && (_v == zero && (zero == 0 && (x >= 0 && y >= 0)))))) ==> _v >= 0
QMap
  C0 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C1 -> {!(y <= 0)}
  C2 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C3 -> {!(x <= 0)}
  C4 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C5 -> {!(y != x && y <= x)}
  C6 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
Checking consistency
Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (8 0)
Remaining Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (8 0)
Synthesized argument zero of type {Int|_v == zero}
Checking inc
           zero :: {Int|_v >= 0} in
\x . \y . 
    if y <= 0
      then x
      else 
        if x <= 0
          then y
          else 
            if (y != x) && (y <= x)
              then add y x
              else dec ??
Adding constraint add, x, y C1, C3, C5, C6 |- {Int|_v == zero + 1} <: {Int|_v >= 0} ()
Typing Constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == zero + 1} <: {Int|_v >= 0} ()
Type assignment
Simple Constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == zero + 1} <: {Int|_v >= 0} ()
Pred assignment
After process simple constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == zero + 1} <: {Int|_v >= 0} ()
Constraints
  C1 && (C3 && (C5 && (C6 && (_v == zero + 1 && (zero == 0 && (x >= 0 && y >= 0)))))) ==> _v >= 0
QMap
  C0 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C1 -> {!(y <= 0)}
  C2 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C3 -> {!(x <= 0)}
  C4 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C5 -> {!(y != x && y <= x)}
  C6 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
Checking consistency
Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (9 0)
Remaining Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (9 0)
Synthesized argument inc
                       zero of type {Int|_v == zero + 1}
Checking dec (inc
                zero) :: {Int|_v == x + y} in
\x . \y . 
    if y <= 0
      then x
      else 
        if x <= 0
          then y
          else 
            if (y != x) && (y <= x)
              then add y x
              else ??
Adding constraint add, x, y C1, C3, C5, C6 |- LET x3:({Int|_v == zero + 1}) IN {Int|_v == x3 - 1} <: {Int|_v == x + y} ()
Typing Constraints
add, x, y C1, C3, C5, C6 |- LET x3:({Int|_v == zero + 1}) IN {Int|_v == x3 - 1} <: {Int|_v == x + y} ()
Type assignment
Simple Constraints
add, x, x3, y C1, C3, C5, C6 |- {Int|_v == x3 - 1} <: {Int|_v == x + y} ()
Pred assignment
After process simple constraints
add, x, x3, y C1, C3, C5, C6 |- {Int|_v == x3 - 1} <: {Int|_v == x + y} ()
Constraints
  C1 && (C3 && (C5 && (C6 && (_v == x3 - 1 && (x3 == zero + 1 && (zero == 0 && (x >= 0 && y >= 0))))))) ==> _v == x + y
QMap
  C0 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C1 -> {!(y <= 0)}
  C2 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C3 -> {!(x <= 0)}
  C4 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C5 -> {!(y != x && y <= x)}
  C6 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (9 1)
Chosen candidate: 0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (9 1)
Invalid Constraint: C1 && (C3 && (C5 && (C6 && (_v == x3 - 1 && (x3 == zero + 1 && (zero == 0 && (x >= 0 && y >= 0))))))) ==> _v == x + y
Strengthening: C1 && (C3 && (C5 && (C6 && (_v == x3 - 1 && (x3 == zero + 1 && (zero == 0 && (x >= 0 && y >= 0))))))) ==> _v == x + y
Instantiated axioms:
All assumptions:
!(x <= 0), !(y <= 0), !(y != x && y <= x), _v == x3 - 1, x3 == zero + 1, zero == 0, x >= 0, y >= 0
RHS: _v == x + y
assumption !(x <= 0) && (!(y <= 0) && (!(y != x && y <= x) && (_v == x3 - 1 && (x3 == zero + 1 && (zero == 0 && (x >= 0 && y >= 0))))))
mustHave !(_v == x + y)
qualsList [0 != x
          ,0 != y
          ,y != x
          ,0 <= x
          ,0 <= y
          ,x <= y
          ,y <= x]
Optimal valuations:
Pruned valuations:
Diffs: (0)
TYPE ERROR: Cannot find sufficiently strong refinements
when checking dec (inc zero) ::
{Int|_v == x + y} in
\x . \y . 
    if y <= 0
      then x
      else 
        if x <= 0
          then y
          else 
            if (y != x) && (y <= x)
              then add y x
              else dec (inc zero)
INSTANTIATE x:{Int|_v >= 0} -> {Int|_v == x - 1}
INTO x4:{Int|_v >= 0} -> {Int|_v == x4 - 1}
Trying dec
Checking dec :: X3:_ -> {Int|_v >= 0} in
\x . \y . 
    if y <= 0
      then x
      else 
        if x <= 0
          then y
          else 
            if (y != x) && (y <= x)
              then add y x
              else dec (?? ??)
Adding constraint add, x, y C1, C3, C5, C6 |- x4:{Int|_v >= 0} -> {Int|_v == x4 - 1} <: X3:_ -> {Int|_v >= 0} ()
Adding constraint add, x, y C1, C3, C5, C6 |- x4:{Int|_v >= 0} -> {Int|_v == x4 - 1} /\ X3:_ -> {Int|_v >= 0} ()
Typing Constraints
add, x, y C1, C3, C5, C6 |- x4:{Int|_v >= 0} -> {Int|_v == x4 - 1} /\ X3:_ -> {Int|_v >= 0} ()
add, x, y C1, C3, C5, C6 |- x4:{Int|_v >= 0} -> {Int|_v == x4 - 1} <: X3:_ -> {Int|_v >= 0} ()
Type assignment
Simple Constraints
X3, add, x, y C1, C3, C5, C6 |- {Int|_v == X3 - 1} <: {Int|_v >= 0} ()
add, x, x4, y C1, C3, C5, C6 |- {Int|_v == x4 - 1} /\ {Int|_v >= 0} ()
Pred assignment
After process simple constraints
add, x, x4, y C1, C3, C5, C6 |- {Int|_v == x4 - 1} /\ {Int|_v >= 0} ()
X3, add, x, y C1, C3, C5, C6 |- {Int|_v == X3 - 1} <: {Int|_v >= 0} ()
Constraints
  False ==> _v >= 0
QMap
  C0 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C1 -> {!(y <= 0)}
  C2 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C3 -> {!(x <= 0)}
  C4 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C5 -> {!(y != x && y <= x)}
  C6 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
Checking consistency
  C1 && (C3 && (C5 && (C6 && (_v == x4 - 1 && (_v >= 0 && (x >= 0 && (x4 >= 0 && y >= 0)))))))
Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (7 0)
Remaining Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (7 0)
Trying x
Checking x :: {Int|_v >= 0} in
\x . \y . 
    if y <= 0
      then x
      else 
        if x <= 0
          then y
          else 
            if (y != x) && (y <= x)
              then add y x
              else dec (dec ??)
Adding constraint add, x, y C1, C3, C5, C6 |- {Int|_v == x} <: {Int|_v >= 0} ()
Typing Constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == x} <: {Int|_v >= 0} ()
Type assignment
Simple Constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == x} <: {Int|_v >= 0} ()
Pred assignment
After process simple constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == x} <: {Int|_v >= 0} ()
Constraints
  C1 && (C3 && (C5 && (C6 && (_v == x && (x >= 0 && y >= 0))))) ==> _v >= 0
QMap
  C0 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C1 -> {!(y <= 0)}
  C2 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C3 -> {!(x <= 0)}
  C4 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C5 -> {!(y != x && y <= x)}
  C6 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
Checking consistency
Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (8 0)
Remaining Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (8 0)
Synthesized argument x of type {Int|_v == x}
Checking dec
           x :: {Int|_v >= 0} in
\x . \y . 
    if y <= 0
      then x
      else 
        if x <= 0
          then y
          else 
            if (y != x) && (y <= x)
              then add y x
              else dec ??
Adding constraint add, x, y C1, C3, C5, C6 |- {Int|_v == x - 1} <: {Int|_v >= 0} ()
Typing Constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == x - 1} <: {Int|_v >= 0} ()
Type assignment
Simple Constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == x - 1} <: {Int|_v >= 0} ()
Pred assignment
After process simple constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == x - 1} <: {Int|_v >= 0} ()
Constraints
  C1 && (C3 && (C5 && (C6 && (_v == x - 1 && (x >= 0 && y >= 0))))) ==> _v >= 0
QMap
  C0 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C1 -> {!(y <= 0)}
  C2 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C3 -> {!(x <= 0)}
  C4 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C5 -> {!(y != x && y <= x)}
  C6 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
Checking consistency
Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (9 0)
Remaining Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (9 0)
Synthesized argument dec
                       x of type {Int|_v == x - 1}
Checking dec (dec
                x) :: {Int|_v == x + y} in
\x . \y . 
    if y <= 0
      then x
      else 
        if x <= 0
          then y
          else 
            if (y != x) && (y <= x)
              then add y x
              else ??
Adding constraint add, x, y C1, C3, C5, C6 |- LET x3:({Int|_v == x - 1}) IN {Int|_v == x3 - 1} <: {Int|_v == x + y} ()
Typing Constraints
add, x, y C1, C3, C5, C6 |- LET x3:({Int|_v == x - 1}) IN {Int|_v == x3 - 1} <: {Int|_v == x + y} ()
Type assignment
Simple Constraints
add, x, x3, y C1, C3, C5, C6 |- {Int|_v == x3 - 1} <: {Int|_v == x + y} ()
Pred assignment
After process simple constraints
add, x, x3, y C1, C3, C5, C6 |- {Int|_v == x3 - 1} <: {Int|_v == x + y} ()
Constraints
  C1 && (C3 && (C5 && (C6 && (_v == x3 - 1 && (x3 == x - 1 && (x >= 0 && y >= 0)))))) ==> _v == x + y
QMap
  C0 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C1 -> {!(y <= 0)}
  C2 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C3 -> {!(x <= 0)}
  C4 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C5 -> {!(y != x && y <= x)}
  C6 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (9 1)
Chosen candidate: 0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (9 1)
Invalid Constraint: C1 && (C3 && (C5 && (C6 && (_v == x3 - 1 && (x3 == x - 1 && (x >= 0 && y >= 0)))))) ==> _v == x + y
Strengthening: C1 && (C3 && (C5 && (C6 && (_v == x3 - 1 && (x3 == x - 1 && (x >= 0 && y >= 0)))))) ==> _v == x + y
Instantiated axioms:
All assumptions:
!(x <= 0), !(y <= 0), !(y != x && y <= x), _v == x3 - 1, x3 == x - 1, x >= 0, y >= 0
RHS: _v == x + y
assumption !(x <= 0) && (!(y <= 0) && (!(y != x && y <= x) && (_v == x3 - 1 && (x3 == x - 1 && (x >= 0 && y >= 0)))))
mustHave !(_v == x + y)
qualsList [0 != x
          ,0 != y
          ,y != x
          ,0 <= x
          ,0 <= y
          ,x <= y
          ,y <= x]
Optimal valuations:
Pruned valuations:
Diffs: (0)
TYPE ERROR: Cannot find sufficiently strong refinements
when checking dec (dec x) ::
{Int|_v == x + y} in
\x . \y . 
    if y <= 0
      then x
      else 
        if x <= 0
          then y
          else 
            if (y != x) && (y <= x)
              then add y x
              else dec (dec x)
Trying y
Checking y :: {Int|_v >= 0} in
\x . \y . 
    if y <= 0
      then x
      else 
        if x <= 0
          then y
          else 
            if (y != x) && (y <= x)
              then add y x
              else dec (dec ??)
Adding constraint add, x, y C1, C3, C5, C6 |- {Int|_v == y} <: {Int|_v >= 0} ()
Typing Constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == y} <: {Int|_v >= 0} ()
Type assignment
Simple Constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == y} <: {Int|_v >= 0} ()
Pred assignment
After process simple constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == y} <: {Int|_v >= 0} ()
Constraints
  C1 && (C3 && (C5 && (C6 && (_v == y && (x >= 0 && y >= 0))))) ==> _v >= 0
QMap
  C0 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C1 -> {!(y <= 0)}
  C2 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C3 -> {!(x <= 0)}
  C4 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C5 -> {!(y != x && y <= x)}
  C6 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
Checking consistency
Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (8 0)
Remaining Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (8 0)
Synthesized argument y of type {Int|_v == y}
Checking dec
           y :: {Int|_v >= 0} in
\x . \y . 
    if y <= 0
      then x
      else 
        if x <= 0
          then y
          else 
            if (y != x) && (y <= x)
              then add y x
              else dec ??
Adding constraint add, x, y C1, C3, C5, C6 |- {Int|_v == y - 1} <: {Int|_v >= 0} ()
Typing Constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == y - 1} <: {Int|_v >= 0} ()
Type assignment
Simple Constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == y - 1} <: {Int|_v >= 0} ()
Pred assignment
After process simple constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == y - 1} <: {Int|_v >= 0} ()
Constraints
  C1 && (C3 && (C5 && (C6 && (_v == y - 1 && (x >= 0 && y >= 0))))) ==> _v >= 0
QMap
  C0 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C1 -> {!(y <= 0)}
  C2 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C3 -> {!(x <= 0)}
  C4 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C5 -> {!(y != x && y <= x)}
  C6 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
Checking consistency
Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (9 0)
Remaining Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (9 0)
Synthesized argument dec
                       y of type {Int|_v == y - 1}
Checking dec (dec
                y) :: {Int|_v == x + y} in
\x . \y . 
    if y <= 0
      then x
      else 
        if x <= 0
          then y
          else 
            if (y != x) && (y <= x)
              then add y x
              else ??
Adding constraint add, x, y C1, C3, C5, C6 |- LET x3:({Int|_v == y - 1}) IN {Int|_v == x3 - 1} <: {Int|_v == x + y} ()
Typing Constraints
add, x, y C1, C3, C5, C6 |- LET x3:({Int|_v == y - 1}) IN {Int|_v == x3 - 1} <: {Int|_v == x + y} ()
Type assignment
Simple Constraints
add, x, x3, y C1, C3, C5, C6 |- {Int|_v == x3 - 1} <: {Int|_v == x + y} ()
Pred assignment
After process simple constraints
add, x, x3, y C1, C3, C5, C6 |- {Int|_v == x3 - 1} <: {Int|_v == x + y} ()
Constraints
  C1 && (C3 && (C5 && (C6 && (_v == x3 - 1 && (x3 == y - 1 && (x >= 0 && y >= 0)))))) ==> _v == x + y
QMap
  C0 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C1 -> {!(y <= 0)}
  C2 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C3 -> {!(x <= 0)}
  C4 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C5 -> {!(y != x && y <= x)}
  C6 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (9 1)
Chosen candidate: 0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (9 1)
Invalid Constraint: C1 && (C3 && (C5 && (C6 && (_v == x3 - 1 && (x3 == y - 1 && (x >= 0 && y >= 0)))))) ==> _v == x + y
Strengthening: C1 && (C3 && (C5 && (C6 && (_v == x3 - 1 && (x3 == y - 1 && (x >= 0 && y >= 0)))))) ==> _v == x + y
Instantiated axioms:
All assumptions:
!(x <= 0), !(y <= 0), !(y != x && y <= x), _v == x3 - 1, x3 == y - 1, x >= 0, y >= 0
RHS: _v == x + y
assumption !(x <= 0) && (!(y <= 0) && (!(y != x && y <= x) && (_v == x3 - 1 && (x3 == y - 1 && (x >= 0 && y >= 0)))))
mustHave !(_v == x + y)
qualsList [0 != x
          ,0 != y
          ,y != x
          ,0 <= x
          ,0 <= y
          ,x <= y
          ,y <= x]
Optimal valuations:
Pruned valuations:
Diffs: (0)
TYPE ERROR: Cannot find sufficiently strong refinements
when checking dec (dec y) ::
{Int|_v == x + y} in
\x . \y . 
    if y <= 0
      then x
      else 
        if x <= 0
          then y
          else 
            if (y != x) && (y <= x)
              then add y x
              else dec (dec y)
Trying zero
Checking zero :: {Int|_v >= 0} in
\x . \y . 
    if y <= 0
      then x
      else 
        if x <= 0
          then y
          else 
            if (y != x) && (y <= x)
              then add y x
              else dec (dec ??)
Adding constraint add, x, y C1, C3, C5, C6 |- {Int|_v == zero} <: {Int|_v >= 0} ()
Typing Constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == zero} <: {Int|_v >= 0} ()
Type assignment
Simple Constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == zero} <: {Int|_v >= 0} ()
Pred assignment
After process simple constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == zero} <: {Int|_v >= 0} ()
Constraints
  C1 && (C3 && (C5 && (C6 && (_v == zero && (zero == 0 && (x >= 0 && y >= 0)))))) ==> _v >= 0
QMap
  C0 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C1 -> {!(y <= 0)}
  C2 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C3 -> {!(x <= 0)}
  C4 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C5 -> {!(y != x && y <= x)}
  C6 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
Checking consistency
Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (8 0)
Remaining Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (8 0)
Synthesized argument zero of type {Int|_v == zero}
Checking dec
           zero :: {Int|_v >= 0} in
\x . \y . 
    if y <= 0
      then x
      else 
        if x <= 0
          then y
          else 
            if (y != x) && (y <= x)
              then add y x
              else dec ??
Adding constraint add, x, y C1, C3, C5, C6 |- {Int|_v == zero - 1} <: {Int|_v >= 0} ()
Typing Constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == zero - 1} <: {Int|_v >= 0} ()
Type assignment
Simple Constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == zero - 1} <: {Int|_v >= 0} ()
Pred assignment
After process simple constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == zero - 1} <: {Int|_v >= 0} ()
Constraints
  C1 && (C3 && (C5 && (C6 && (_v == zero - 1 && (zero == 0 && (x >= 0 && y >= 0)))))) ==> _v >= 0
QMap
  C0 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C1 -> {!(y <= 0)}
  C2 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C3 -> {!(x <= 0)}
  C4 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C5 -> {!(y != x && y <= x)}
  C6 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (8 1)
Chosen candidate: 0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (8 1)
Invalid Constraint: C1 && (C3 && (C5 && (C6 && (_v == zero - 1 && (zero == 0 && (x >= 0 && y >= 0)))))) ==> _v >= 0
Strengthening: C1 && (C3 && (C5 && (C6 && (_v == zero - 1 && (zero == 0 && (x >= 0 && y >= 0)))))) ==> _v >= 0
Instantiated axioms:
All assumptions:
!(x <= 0), !(y <= 0), !(y != x && y <= x), _v == zero - 1, zero == 0, x >= 0, y >= 0
RHS: _v >= 0
assumption !(x <= 0) && (!(y <= 0) && (!(y != x && y <= x) && (_v == zero - 1 && (zero == 0 && (x >= 0 && y >= 0)))))
mustHave !(_v >= 0)
qualsList [0 != x
          ,0 != y
          ,y != x
          ,0 <= x
          ,0 <= y
          ,x <= y
          ,y <= x]
Optimal valuations:
Pruned valuations:
Diffs: (0)
TYPE ERROR: Cannot find sufficiently strong refinements
when checking dec zero ::
{Int|_v >= 0} in
\x . \y . 
    if y <= 0
      then x
      else 
        if x <= 0
          then y
          else 
            if (y != x) && (y <= x)
              then add y x
              else dec (dec zero)
INSTANTIATE x0:{Int|_v >= 0 && (_v >= 0 && _v < x)} -> y:{Int|_v >= 0} -> {Int|_v == x0 + y}
INTO x4:{Int|_v >= 0 && (_v >= 0 && _v < x)} -> x5:{Int|_v >= 0} -> {Int|_v == x4 + x5}
Trying add
Adding constraint add, x, y C1, C3, C5, C6 |- x4:Int -> x5:Int -> {Int|False} <: x:{Int|False} -> y:{Int|False} -> Int ()
Checking add :: X4:_ -> X3:_ -> {Int|_v >= 0} in
\x . \y . 
    if y <= 0
      then x
      else 
        if x <= 0
          then y
          else 
            if (y != x) && (y <= x)
              then add y x
              else dec (?? ?? ??)
Adding constraint add, x, y C1, C3, C5, C6 |- x4:{Int|_v >= 0 && (_v >= 0 && _v < x)} -> x5:{Int|_v >= 0} -> {Int|_v == x4 + x5} <: X4:_ -> X3:_ -> {Int|_v >= 0} ()
Adding constraint add, x, y C1, C3, C5, C6 |- x4:{Int|_v >= 0 && (_v >= 0 && _v < x)} -> x5:{Int|_v >= 0} -> {Int|_v == x4 + x5} /\ X4:_ -> X3:_ -> {Int|_v >= 0} ()
Typing Constraints
add, x, y C1, C3, C5, C6 |- x4:{Int|_v >= 0 && (_v >= 0 && _v < x)} -> x5:{Int|_v >= 0} -> {Int|_v == x4 + x5} /\ X4:_ -> X3:_ -> {Int|_v >= 0} ()
add, x, y C1, C3, C5, C6 |- x4:{Int|_v >= 0 && (_v >= 0 && _v < x)} -> x5:{Int|_v >= 0} -> {Int|_v == x4 + x5} <: X4:_ -> X3:_ -> {Int|_v >= 0} ()
add, x, y C1, C3, C5, C6 |- x4:Int -> x5:Int -> {Int|False} <: x:{Int|False} -> y:{Int|False} -> Int ()
Type assignment
Simple Constraints
add, x, y C1, C3, C5, C6 |- {Int|False} <: Int ()
add, x, y C1, C3, C5, C6 |- {Int|False} <: Int ()
add, x, y C1, C3, C5, C6 |- {Int|False} <: Int ()
X3, X4, add, x, y C1, C3, C5, C6 |- {Int|_v == X4 + X3} <: {Int|_v >= 0} ()
add, x, x4, x5, y C1, C3, C5, C6 |- {Int|_v == x4 + x5} /\ {Int|_v >= 0} ()
Pred assignment
After process simple constraints
add, x, x4, x5, y C1, C3, C5, C6 |- {Int|_v == x4 + x5} /\ {Int|_v >= 0} ()
X3, X4, add, x, y C1, C3, C5, C6 |- {Int|_v == X4 + X3} <: {Int|_v >= 0} ()
Constraints
  False ==> _v >= 0
QMap
  C0 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C1 -> {!(y <= 0)}
  C2 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C3 -> {!(x <= 0)}
  C4 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C5 -> {!(y != x && y <= x)}
  C6 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
Checking consistency
  C1 && (C3 && (C5 && (C6 && (_v == x4 + x5 && (_v >= 0 && (x >= 0 && (x5 >= 0 && (y >= 0 && (x4 >= 0 && (x4 >= 0 && x4 < x))))))))))
Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (7 0)
Remaining Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (7 0)
Trying x
Checking x :: {Int|_v >= 0 && (_v >= 0 && _v < x)} in
\x . \y . 
    if y <= 0
      then x
      else 
        if x <= 0
          then y
          else 
            if (y != x) && (y <= x)
              then add y x
              else dec (add ?? ??)
Adding constraint add, x, y C1, C3, C5, C6 |- {Int|_v == x} <: {Int|_v >= 0 && (_v >= 0 && _v < x)} ()
Typing Constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == x} <: {Int|_v >= 0 && (_v >= 0 && _v < x)} ()
Type assignment
Simple Constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == x} <: {Int|_v >= 0 && (_v >= 0 && _v < x)} ()
Pred assignment
After process simple constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == x} <: {Int|_v >= 0 && (_v >= 0 && _v < x)} ()
Constraints
  C1 && (C3 && (C5 && (C6 && (_v == x && (x >= 0 && y >= 0))))) ==> _v >= 0 && (_v >= 0 && _v < x)
QMap
  C0 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C1 -> {!(y <= 0)}
  C2 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C3 -> {!(x <= 0)}
  C4 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C5 -> {!(y != x && y <= x)}
  C6 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (7 1)
Chosen candidate: 0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (7 1)
Invalid Constraint: C1 && (C3 && (C5 && (C6 && (_v == x && (x >= 0 && y >= 0))))) ==> _v >= 0 && (_v >= 0 && _v < x)
Strengthening: C1 && (C3 && (C5 && (C6 && (_v == x && (x >= 0 && y >= 0))))) ==> _v >= 0 && (_v >= 0 && _v < x)
Instantiated axioms:
All assumptions:
!(x <= 0), !(y <= 0), !(y != x && y <= x), _v == x, x >= 0, y >= 0
RHS: _v >= 0 && (_v >= 0 && _v < x)
assumption !(x <= 0) && (!(y <= 0) && (!(y != x && y <= x) && (_v == x && (x >= 0 && y >= 0))))
mustHave !(_v >= 0 && (_v >= 0 && _v < x))
qualsList [0 != x
          ,0 != y
          ,y != x
          ,0 <= x
          ,0 <= y
          ,x <= y
          ,y <= x]
Optimal valuations:
Pruned valuations:
Diffs: (0)
TYPE ERROR: Cannot find sufficiently strong refinements
when checking x ::
{Int|_v >= 0 && (_v >= 0 && _v < x)}
in
\x . \y . 
    if y <= 0
      then x
      else 
        if x <= 0
          then y
          else 
            if (y != x) && (y <= x)
              then add y x
              else dec (add x ??)
Trying y
Checking y :: {Int|_v >= 0 && (_v >= 0 && _v < x)} in
\x . \y . 
    if y <= 0
      then x
      else 
        if x <= 0
          then y
          else 
            if (y != x) && (y <= x)
              then add y x
              else dec (add ?? ??)
Adding constraint add, x, y C1, C3, C5, C6 |- {Int|_v == y} <: {Int|_v >= 0 && (_v >= 0 && _v < x)} ()
Typing Constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == y} <: {Int|_v >= 0 && (_v >= 0 && _v < x)} ()
Type assignment
Simple Constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == y} <: {Int|_v >= 0 && (_v >= 0 && _v < x)} ()
Pred assignment
After process simple constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == y} <: {Int|_v >= 0 && (_v >= 0 && _v < x)} ()
Constraints
  C1 && (C3 && (C5 && (C6 && (_v == y && (x >= 0 && y >= 0))))) ==> _v >= 0 && (_v >= 0 && _v < x)
QMap
  C0 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C1 -> {!(y <= 0)}
  C2 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C3 -> {!(x <= 0)}
  C4 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C5 -> {!(y != x && y <= x)}
  C6 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (7 1)
Chosen candidate: 0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (7 1)
Invalid Constraint: C1 && (C3 && (C5 && (C6 && (_v == y && (x >= 0 && y >= 0))))) ==> _v >= 0 && (_v >= 0 && _v < x)
Strengthening: C1 && (C3 && (C5 && (C6 && (_v == y && (x >= 0 && y >= 0))))) ==> _v >= 0 && (_v >= 0 && _v < x)
Instantiated axioms:
All assumptions:
!(x <= 0), !(y <= 0), !(y != x && y <= x), _v == y, x >= 0, y >= 0
RHS: _v >= 0 && (_v >= 0 && _v < x)
assumption !(x <= 0) && (!(y <= 0) && (!(y != x && y <= x) && (_v == y && (x >= 0 && y >= 0))))
mustHave !(_v >= 0 && (_v >= 0 && _v < x))
qualsList [0 != x
          ,0 != y
          ,y != x
          ,0 <= x
          ,0 <= y
          ,x <= y
          ,y <= x]
Optimal valuations:
Pruned valuations:
Diffs: (0)
TYPE ERROR: Cannot find sufficiently strong refinements
when checking y ::
{Int|_v >= 0 && (_v >= 0 && _v < x)}
in
\x . \y . 
    if y <= 0
      then x
      else 
        if x <= 0
          then y
          else 
            if (y != x) && (y <= x)
              then add y x
              else dec (add y ??)
Trying zero
Checking zero :: {Int|_v >= 0 && (_v >= 0 && _v < x)} in
\x . \y . 
    if y <= 0
      then x
      else 
        if x <= 0
          then y
          else 
            if (y != x) && (y <= x)
              then add y x
              else dec (add ?? ??)
Adding constraint add, x, y C1, C3, C5, C6 |- {Int|_v == zero} <: {Int|_v >= 0 && (_v >= 0 && _v < x)} ()
Typing Constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == zero} <: {Int|_v >= 0 && (_v >= 0 && _v < x)} ()
Type assignment
Simple Constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == zero} <: {Int|_v >= 0 && (_v >= 0 && _v < x)} ()
Pred assignment
After process simple constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == zero} <: {Int|_v >= 0 && (_v >= 0 && _v < x)} ()
Constraints
  C1 && (C3 && (C5 && (C6 && (_v == zero && (zero == 0 && (x >= 0 && y >= 0)))))) ==> _v >= 0 && (_v >= 0 && _v < x)
QMap
  C0 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C1 -> {!(y <= 0)}
  C2 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C3 -> {!(x <= 0)}
  C4 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C5 -> {!(y != x && y <= x)}
  C6 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
Checking consistency
Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (8 0)
Remaining Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (8 0)
Synthesized argument zero of type {Int|_v == zero}
Checking add
           zero :: X3:_ -> {Int|_v >= 0} in
\x . \y . 
    if y <= 0
      then x
      else 
        if x <= 0
          then y
          else 
            if (y != x) && (y <= x)
              then add y x
              else dec (?? ??)
Adding constraint add, x, y C1, C3, C5, C6 |- x5:{Int|_v >= 0} -> {Int|_v == zero + x5} <: X3:_ -> {Int|_v >= 0} ()
Adding constraint add, x, y C1, C3, C5, C6 |- x5:{Int|_v >= 0} -> {Int|_v == zero + x5} /\ X3:_ -> {Int|_v >= 0} ()
Typing Constraints
add, x, y C1, C3, C5, C6 |- x5:{Int|_v >= 0} -> {Int|_v == zero + x5} /\ X3:_ -> {Int|_v >= 0} ()
add, x, y C1, C3, C5, C6 |- x5:{Int|_v >= 0} -> {Int|_v == zero + x5} <: X3:_ -> {Int|_v >= 0} ()
Type assignment
Simple Constraints
X3, add, x, y C1, C3, C5, C6 |- {Int|_v == zero + X3} <: {Int|_v >= 0} ()
add, x, x5, y C1, C3, C5, C6 |- {Int|_v == zero + x5} /\ {Int|_v >= 0} ()
Pred assignment
After process simple constraints
add, x, x5, y C1, C3, C5, C6 |- {Int|_v == zero + x5} /\ {Int|_v >= 0} ()
X3, add, x, y C1, C3, C5, C6 |- {Int|_v == zero + X3} <: {Int|_v >= 0} ()
Constraints
  False ==> _v >= 0
QMap
  C0 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C1 -> {!(y <= 0)}
  C2 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C3 -> {!(x <= 0)}
  C4 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C5 -> {!(y != x && y <= x)}
  C6 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
Checking consistency
  C1 && (C3 && (C5 && (C6 && (_v == zero + x5 && (zero == 0 && (_v >= 0 && (x >= 0 && (x5 >= 0 && y >= 0))))))))
Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (8 0)
Remaining Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (8 0)
Trying x
Checking x :: {Int|_v >= 0} in
\x . \y . 
    if y <= 0
      then x
      else 
        if x <= 0
          then y
          else 
            if (y != x) && (y <= x)
              then add y x
              else dec (add zero ??)
Adding constraint add, x, y C1, C3, C5, C6 |- {Int|_v == x} <: {Int|_v >= 0} ()
Typing Constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == x} <: {Int|_v >= 0} ()
Type assignment
Simple Constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == x} <: {Int|_v >= 0} ()
Pred assignment
After process simple constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == x} <: {Int|_v >= 0} ()
Constraints
  C1 && (C3 && (C5 && (C6 && (_v == x && (x >= 0 && y >= 0))))) ==> _v >= 0
QMap
  C0 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C1 -> {!(y <= 0)}
  C2 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C3 -> {!(x <= 0)}
  C4 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C5 -> {!(y != x && y <= x)}
  C6 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
Checking consistency
Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (9 0)
Remaining Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (9 0)
Synthesized argument x of type {Int|_v == x}
Checking add zero
           x :: {Int|_v >= 0} in
\x . \y . 
    if y <= 0
      then x
      else 
        if x <= 0
          then y
          else 
            if (y != x) && (y <= x)
              then add y x
              else dec ??
Adding constraint add, x, y C1, C3, C5, C6 |- {Int|_v == zero + x} <: {Int|_v >= 0} ()
Typing Constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == zero + x} <: {Int|_v >= 0} ()
Type assignment
Simple Constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == zero + x} <: {Int|_v >= 0} ()
Pred assignment
After process simple constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == zero + x} <: {Int|_v >= 0} ()
Constraints
  C1 && (C3 && (C5 && (C6 && (_v == zero + x && (zero == 0 && (x >= 0 && y >= 0)))))) ==> _v >= 0
QMap
  C0 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C1 -> {!(y <= 0)}
  C2 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C3 -> {!(x <= 0)}
  C4 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C5 -> {!(y != x && y <= x)}
  C6 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
Checking consistency
Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (10 0)
Remaining Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (10 0)
Synthesized argument add zero
                       x of type {Int|_v == zero + x}
Checking dec (add zero
                x) :: {Int|_v == x + y} in
\x . \y . 
    if y <= 0
      then x
      else 
        if x <= 0
          then y
          else 
            if (y != x) && (y <= x)
              then add y x
              else ??
Adding constraint add, x, y C1, C3, C5, C6 |- LET x3:({Int|_v == zero + x}) IN {Int|_v == x3 - 1} <: {Int|_v == x + y} ()
Typing Constraints
add, x, y C1, C3, C5, C6 |- LET x3:({Int|_v == zero + x}) IN {Int|_v == x3 - 1} <: {Int|_v == x + y} ()
Type assignment
Simple Constraints
add, x, x3, y C1, C3, C5, C6 |- {Int|_v == x3 - 1} <: {Int|_v == x + y} ()
Pred assignment
After process simple constraints
add, x, x3, y C1, C3, C5, C6 |- {Int|_v == x3 - 1} <: {Int|_v == x + y} ()
Constraints
  C1 && (C3 && (C5 && (C6 && (_v == x3 - 1 && (x3 == zero + x && (zero == 0 && (x >= 0 && y >= 0))))))) ==> _v == x + y
QMap
  C0 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C1 -> {!(y <= 0)}
  C2 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C3 -> {!(x <= 0)}
  C4 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C5 -> {!(y != x && y <= x)}
  C6 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (10 1)
Chosen candidate: 0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (10 1)
Invalid Constraint: C1 && (C3 && (C5 && (C6 && (_v == x3 - 1 && (x3 == zero + x && (zero == 0 && (x >= 0 && y >= 0))))))) ==> _v == x + y
Strengthening: C1 && (C3 && (C5 && (C6 && (_v == x3 - 1 && (x3 == zero + x && (zero == 0 && (x >= 0 && y >= 0))))))) ==> _v == x + y
Instantiated axioms:
All assumptions:
!(x <= 0), !(y <= 0), !(y != x && y <= x), _v == x3 - 1, x3 == zero + x, zero == 0, x >= 0, y >= 0
RHS: _v == x + y
assumption !(x <= 0) && (!(y <= 0) && (!(y != x && y <= x) && (_v == x3 - 1 && (x3 == zero + x && (zero == 0 && (x >= 0 && y >= 0))))))
mustHave !(_v == x + y)
qualsList [0 != x
          ,0 != y
          ,y != x
          ,0 <= x
          ,0 <= y
          ,x <= y
          ,y <= x]
Optimal valuations:
Pruned valuations:
Diffs: (0)
TYPE ERROR: Cannot find sufficiently strong refinements
when checking dec (add zero x)
:: {Int|_v == x + y} in
\x . \y . 
    if y <= 0
      then x
      else 
        if x <= 0
          then y
          else 
            if (y != x) && (y <= x)
              then add y x
              else dec (add zero x)
Trying y
Checking y :: {Int|_v >= 0} in
\x . \y . 
    if y <= 0
      then x
      else 
        if x <= 0
          then y
          else 
            if (y != x) && (y <= x)
              then add y x
              else dec (add zero ??)
Adding constraint add, x, y C1, C3, C5, C6 |- {Int|_v == y} <: {Int|_v >= 0} ()
Typing Constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == y} <: {Int|_v >= 0} ()
Type assignment
Simple Constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == y} <: {Int|_v >= 0} ()
Pred assignment
After process simple constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == y} <: {Int|_v >= 0} ()
Constraints
  C1 && (C3 && (C5 && (C6 && (_v == y && (x >= 0 && y >= 0))))) ==> _v >= 0
QMap
  C0 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C1 -> {!(y <= 0)}
  C2 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C3 -> {!(x <= 0)}
  C4 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C5 -> {!(y != x && y <= x)}
  C6 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
Checking consistency
Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (9 0)
Remaining Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (9 0)
Synthesized argument y of type {Int|_v == y}
Checking add zero
           y :: {Int|_v >= 0} in
\x . \y . 
    if y <= 0
      then x
      else 
        if x <= 0
          then y
          else 
            if (y != x) && (y <= x)
              then add y x
              else dec ??
Adding constraint add, x, y C1, C3, C5, C6 |- {Int|_v == zero + y} <: {Int|_v >= 0} ()
Typing Constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == zero + y} <: {Int|_v >= 0} ()
Type assignment
Simple Constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == zero + y} <: {Int|_v >= 0} ()
Pred assignment
After process simple constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == zero + y} <: {Int|_v >= 0} ()
Constraints
  C1 && (C3 && (C5 && (C6 && (_v == zero + y && (zero == 0 && (x >= 0 && y >= 0)))))) ==> _v >= 0
QMap
  C0 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C1 -> {!(y <= 0)}
  C2 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C3 -> {!(x <= 0)}
  C4 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C5 -> {!(y != x && y <= x)}
  C6 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
Checking consistency
Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (10 0)
Remaining Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (10 0)
Synthesized argument add zero
                       y of type {Int|_v == zero + y}
Checking dec (add zero
                y) :: {Int|_v == x + y} in
\x . \y . 
    if y <= 0
      then x
      else 
        if x <= 0
          then y
          else 
            if (y != x) && (y <= x)
              then add y x
              else ??
Adding constraint add, x, y C1, C3, C5, C6 |- LET x3:({Int|_v == zero + y}) IN {Int|_v == x3 - 1} <: {Int|_v == x + y} ()
Typing Constraints
add, x, y C1, C3, C5, C6 |- LET x3:({Int|_v == zero + y}) IN {Int|_v == x3 - 1} <: {Int|_v == x + y} ()
Type assignment
Simple Constraints
add, x, x3, y C1, C3, C5, C6 |- {Int|_v == x3 - 1} <: {Int|_v == x + y} ()
Pred assignment
After process simple constraints
add, x, x3, y C1, C3, C5, C6 |- {Int|_v == x3 - 1} <: {Int|_v == x + y} ()
Constraints
  C1 && (C3 && (C5 && (C6 && (_v == x3 - 1 && (x3 == zero + y && (zero == 0 && (x >= 0 && y >= 0))))))) ==> _v == x + y
QMap
  C0 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C1 -> {!(y <= 0)}
  C2 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C3 -> {!(x <= 0)}
  C4 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C5 -> {!(y != x && y <= x)}
  C6 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (10 1)
Chosen candidate: 0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (10 1)
Invalid Constraint: C1 && (C3 && (C5 && (C6 && (_v == x3 - 1 && (x3 == zero + y && (zero == 0 && (x >= 0 && y >= 0))))))) ==> _v == x + y
Strengthening: C1 && (C3 && (C5 && (C6 && (_v == x3 - 1 && (x3 == zero + y && (zero == 0 && (x >= 0 && y >= 0))))))) ==> _v == x + y
Instantiated axioms:
All assumptions:
!(x <= 0), !(y <= 0), !(y != x && y <= x), _v == x3 - 1, x3 == zero + y, zero == 0, x >= 0, y >= 0
RHS: _v == x + y
assumption !(x <= 0) && (!(y <= 0) && (!(y != x && y <= x) && (_v == x3 - 1 && (x3 == zero + y && (zero == 0 && (x >= 0 && y >= 0))))))
mustHave !(_v == x + y)
qualsList [0 != x
          ,0 != y
          ,y != x
          ,0 <= x
          ,0 <= y
          ,x <= y
          ,y <= x]
Optimal valuations:
Pruned valuations:
Diffs: (0)
TYPE ERROR: Cannot find sufficiently strong refinements
when checking dec (add zero y)
:: {Int|_v == x + y} in
\x . \y . 
    if y <= 0
      then x
      else 
        if x <= 0
          then y
          else 
            if (y != x) && (y <= x)
              then add y x
              else dec (add zero y)
Trying zero
Checking zero :: {Int|_v >= 0} in
\x . \y . 
    if y <= 0
      then x
      else 
        if x <= 0
          then y
          else 
            if (y != x) && (y <= x)
              then add y x
              else dec (add zero ??)
Adding constraint add, x, y C1, C3, C5, C6 |- {Int|_v == zero} <: {Int|_v >= 0} ()
Typing Constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == zero} <: {Int|_v >= 0} ()
Type assignment
Simple Constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == zero} <: {Int|_v >= 0} ()
Pred assignment
After process simple constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == zero} <: {Int|_v >= 0} ()
Constraints
  C1 && (C3 && (C5 && (C6 && (_v == zero && (zero == 0 && (x >= 0 && y >= 0)))))) ==> _v >= 0
QMap
  C0 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C1 -> {!(y <= 0)}
  C2 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C3 -> {!(x <= 0)}
  C4 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C5 -> {!(y != x && y <= x)}
  C6 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
Checking consistency
Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (9 0)
Remaining Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (9 0)
Synthesized argument zero of type {Int|_v == zero}
Checking add zero
           zero :: {Int|_v >= 0} in
\x . \y . 
    if y <= 0
      then x
      else 
        if x <= 0
          then y
          else 
            if (y != x) && (y <= x)
              then add y x
              else dec ??
Adding constraint add, x, y C1, C3, C5, C6 |- {Int|_v == zero + zero} <: {Int|_v >= 0} ()
Typing Constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == zero + zero} <: {Int|_v >= 0} ()
Type assignment
Simple Constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == zero + zero} <: {Int|_v >= 0} ()
Pred assignment
After process simple constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == zero + zero} <: {Int|_v >= 0} ()
Constraints
  C1 && (C3 && (C5 && (C6 && (_v == zero + zero && (zero == 0 && (x >= 0 && y >= 0)))))) ==> _v >= 0
QMap
  C0 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C1 -> {!(y <= 0)}
  C2 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C3 -> {!(x <= 0)}
  C4 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C5 -> {!(y != x && y <= x)}
  C6 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
Checking consistency
Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (10 0)
Remaining Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (10 0)
Synthesized argument add zero
                       zero of type {Int|_v == zero + zero}
Checking dec (add zero
                zero) :: {Int|_v == x + y} in
\x . \y . 
    if y <= 0
      then x
      else 
        if x <= 0
          then y
          else 
            if (y != x) && (y <= x)
              then add y x
              else ??
Adding constraint add, x, y C1, C3, C5, C6 |- LET x3:({Int|_v == zero + zero}) IN {Int|_v == x3 - 1} <: {Int|_v == x + y} ()
Typing Constraints
add, x, y C1, C3, C5, C6 |- LET x3:({Int|_v == zero + zero}) IN {Int|_v == x3 - 1} <: {Int|_v == x + y} ()
Type assignment
Simple Constraints
add, x, x3, y C1, C3, C5, C6 |- {Int|_v == x3 - 1} <: {Int|_v == x + y} ()
Pred assignment
After process simple constraints
add, x, x3, y C1, C3, C5, C6 |- {Int|_v == x3 - 1} <: {Int|_v == x + y} ()
Constraints
  C1 && (C3 && (C5 && (C6 && (_v == x3 - 1 && (x3 == zero + zero && (zero == 0 && (x >= 0 && y >= 0))))))) ==> _v == x + y
QMap
  C0 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C1 -> {!(y <= 0)}
  C2 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C3 -> {!(x <= 0)}
  C4 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C5 -> {!(y != x && y <= x)}
  C6 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (10 1)
Chosen candidate: 0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (10 1)
Invalid Constraint: C1 && (C3 && (C5 && (C6 && (_v == x3 - 1 && (x3 == zero + zero && (zero == 0 && (x >= 0 && y >= 0))))))) ==> _v == x + y
Strengthening: C1 && (C3 && (C5 && (C6 && (_v == x3 - 1 && (x3 == zero + zero && (zero == 0 && (x >= 0 && y >= 0))))))) ==> _v == x + y
Instantiated axioms:
All assumptions:
!(x <= 0), !(y <= 0), !(y != x && y <= x), _v == x3 - 1, x3 == zero + zero, zero == 0, x >= 0, y >= 0
RHS: _v == x + y
assumption !(x <= 0) && (!(y <= 0) && (!(y != x && y <= x) && (_v == x3 - 1 && (x3 == zero + zero && (zero == 0 && (x >= 0 && y >= 0))))))
mustHave !(_v == x + y)
qualsList [0 != x
          ,0 != y
          ,y != x
          ,0 <= x
          ,0 <= y
          ,x <= y
          ,y <= x]
Optimal valuations:
Pruned valuations:
Diffs: (0)
TYPE ERROR: Cannot find sufficiently strong refinements
when checking dec (add zero
                     zero) :: {Int|_v == x + y} in
\x . \y . 
    if y <= 0
      then x
      else 
        if x <= 0
          then y
          else 
            if (y != x) && (y <= x)
              then add y x
              else dec (add zero zero)
INSTANTIATE x:{Int|_v >= 0} -> {Int|_v == x + 1}
INTO x3:{Int|_v >= 0} -> {Int|_v == x3 + 1}
Trying inc
Checking inc :: X2:_ -> {Int|_v == x + y} in
\x . \y . 
    if y <= 0
      then x
      else 
        if x <= 0
          then y
          else 
            if (y != x) && (y <= x)
              then add y x
              else ?? ??
Adding constraint add, x, y C1, C3, C5, C6 |- x3:{Int|_v >= 0} -> {Int|_v == x3 + 1} <: X2:_ -> {Int|_v == x + y} ()
Adding constraint add, x, y C1, C3, C5, C6 |- x3:{Int|_v >= 0} -> {Int|_v == x3 + 1} /\ X2:_ -> {Int|_v == x + y} ()
Typing Constraints
add, x, y C1, C3, C5, C6 |- x3:{Int|_v >= 0} -> {Int|_v == x3 + 1} /\ X2:_ -> {Int|_v == x + y} ()
add, x, y C1, C3, C5, C6 |- x3:{Int|_v >= 0} -> {Int|_v == x3 + 1} <: X2:_ -> {Int|_v == x + y} ()
add, x, y |- C6
Type assignment
Simple Constraints
add, x, y |- C6
X2, add, x, y C1, C3, C5, C6 |- {Int|_v == X2 + 1} <: {Int|_v == x + y} ()
add, x, x3, y C1, C3, C5, C6 |- {Int|_v == x3 + 1} /\ {Int|_v == x + y} ()
Pred assignment
After process simple constraints
add, x, x3, y C1, C3, C5, C6 |- {Int|_v == x3 + 1} /\ {Int|_v == x + y} ()
X2, add, x, y C1, C3, C5, C6 |- {Int|_v == X2 + 1} <: {Int|_v == x + y} ()
Constraints
  False ==> _v == x + y
QMap
  C0 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C1 -> {!(y <= 0)}
  C2 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C3 -> {!(x <= 0)}
  C4 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C5 -> {!(y != x && y <= x)}
  C6 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
Checking consistency
  C1 && (C3 && (C5 && (C6 && (_v == x + y && (_v == x3 + 1 && (x >= 0 && (x3 >= 0 && y >= 0)))))))
Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (6 0)
Remaining Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (6 0)
INSTANTIATE x:{Int|_v >= 0} -> {Int|_v == x - 1}
INTO x4:{Int|_v >= 0} -> {Int|_v == x4 - 1}
Trying dec
Checking dec :: X3:_ -> {Int|_v >= 0} in
\x . \y . 
    if y <= 0
      then x
      else 
        if x <= 0
          then y
          else 
            if (y != x) && (y <= x)
              then add y x
              else inc (?? ??)
Adding constraint add, x, y C1, C3, C5, C6 |- x4:{Int|_v >= 0} -> {Int|_v == x4 - 1} <: X3:_ -> {Int|_v >= 0} ()
Adding constraint add, x, y C1, C3, C5, C6 |- x4:{Int|_v >= 0} -> {Int|_v == x4 - 1} /\ X3:_ -> {Int|_v >= 0} ()
Typing Constraints
add, x, y C1, C3, C5, C6 |- x4:{Int|_v >= 0} -> {Int|_v == x4 - 1} /\ X3:_ -> {Int|_v >= 0} ()
add, x, y C1, C3, C5, C6 |- x4:{Int|_v >= 0} -> {Int|_v == x4 - 1} <: X3:_ -> {Int|_v >= 0} ()
Type assignment
Simple Constraints
X3, add, x, y C1, C3, C5, C6 |- {Int|_v == X3 - 1} <: {Int|_v >= 0} ()
add, x, x4, y C1, C3, C5, C6 |- {Int|_v == x4 - 1} /\ {Int|_v >= 0} ()
Pred assignment
After process simple constraints
add, x, x4, y C1, C3, C5, C6 |- {Int|_v == x4 - 1} /\ {Int|_v >= 0} ()
X3, add, x, y C1, C3, C5, C6 |- {Int|_v == X3 - 1} <: {Int|_v >= 0} ()
Constraints
  False ==> _v >= 0
QMap
  C0 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C1 -> {!(y <= 0)}
  C2 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C3 -> {!(x <= 0)}
  C4 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C5 -> {!(y != x && y <= x)}
  C6 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
Checking consistency
  C1 && (C3 && (C5 && (C6 && (_v == x4 - 1 && (_v >= 0 && (x >= 0 && (x4 >= 0 && y >= 0)))))))
Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (7 0)
Remaining Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (7 0)
Trying x
Checking x :: {Int|_v >= 0} in
\x . \y . 
    if y <= 0
      then x
      else 
        if x <= 0
          then y
          else 
            if (y != x) && (y <= x)
              then add y x
              else inc (dec ??)
Adding constraint add, x, y C1, C3, C5, C6 |- {Int|_v == x} <: {Int|_v >= 0} ()
Typing Constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == x} <: {Int|_v >= 0} ()
Type assignment
Simple Constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == x} <: {Int|_v >= 0} ()
Pred assignment
After process simple constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == x} <: {Int|_v >= 0} ()
Constraints
  C1 && (C3 && (C5 && (C6 && (_v == x && (x >= 0 && y >= 0))))) ==> _v >= 0
QMap
  C0 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C1 -> {!(y <= 0)}
  C2 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C3 -> {!(x <= 0)}
  C4 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C5 -> {!(y != x && y <= x)}
  C6 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
Checking consistency
Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (8 0)
Remaining Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (8 0)
Synthesized argument x of type {Int|_v == x}
Checking dec
           x :: {Int|_v >= 0} in
\x . \y . 
    if y <= 0
      then x
      else 
        if x <= 0
          then y
          else 
            if (y != x) && (y <= x)
              then add y x
              else inc ??
Adding constraint add, x, y C1, C3, C5, C6 |- {Int|_v == x - 1} <: {Int|_v >= 0} ()
Typing Constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == x - 1} <: {Int|_v >= 0} ()
Type assignment
Simple Constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == x - 1} <: {Int|_v >= 0} ()
Pred assignment
After process simple constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == x - 1} <: {Int|_v >= 0} ()
Constraints
  C1 && (C3 && (C5 && (C6 && (_v == x - 1 && (x >= 0 && y >= 0))))) ==> _v >= 0
QMap
  C0 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C1 -> {!(y <= 0)}
  C2 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C3 -> {!(x <= 0)}
  C4 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C5 -> {!(y != x && y <= x)}
  C6 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
Checking consistency
Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (9 0)
Remaining Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (9 0)
Synthesized argument dec
                       x of type {Int|_v == x - 1}
Checking inc (dec
                x) :: {Int|_v == x + y} in
\x . \y . 
    if y <= 0
      then x
      else 
        if x <= 0
          then y
          else 
            if (y != x) && (y <= x)
              then add y x
              else ??
Adding constraint add, x, y C1, C3, C5, C6 |- LET x3:({Int|_v == x - 1}) IN {Int|_v == x3 + 1} <: {Int|_v == x + y} ()
Typing Constraints
add, x, y C1, C3, C5, C6 |- LET x3:({Int|_v == x - 1}) IN {Int|_v == x3 + 1} <: {Int|_v == x + y} ()
Type assignment
Simple Constraints
add, x, x3, y C1, C3, C5, C6 |- {Int|_v == x3 + 1} <: {Int|_v == x + y} ()
Pred assignment
After process simple constraints
add, x, x3, y C1, C3, C5, C6 |- {Int|_v == x3 + 1} <: {Int|_v == x + y} ()
Constraints
  C1 && (C3 && (C5 && (C6 && (_v == x3 + 1 && (x3 == x - 1 && (x >= 0 && y >= 0)))))) ==> _v == x + y
QMap
  C0 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C1 -> {!(y <= 0)}
  C2 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C3 -> {!(x <= 0)}
  C4 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C5 -> {!(y != x && y <= x)}
  C6 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (9 1)
Chosen candidate: 0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (9 1)
Invalid Constraint: C1 && (C3 && (C5 && (C6 && (_v == x3 + 1 && (x3 == x - 1 && (x >= 0 && y >= 0)))))) ==> _v == x + y
Strengthening: C1 && (C3 && (C5 && (C6 && (_v == x3 + 1 && (x3 == x - 1 && (x >= 0 && y >= 0)))))) ==> _v == x + y
Instantiated axioms:
All assumptions:
!(x <= 0), !(y <= 0), !(y != x && y <= x), _v == x3 + 1, x3 == x - 1, x >= 0, y >= 0
RHS: _v == x + y
assumption !(x <= 0) && (!(y <= 0) && (!(y != x && y <= x) && (_v == x3 + 1 && (x3 == x - 1 && (x >= 0 && y >= 0)))))
mustHave !(_v == x + y)
qualsList [0 != x
          ,0 != y
          ,y != x
          ,0 <= x
          ,0 <= y
          ,x <= y
          ,y <= x]
Optimal valuations:
Pruned valuations:
Diffs: (0)
TYPE ERROR: Cannot find sufficiently strong refinements
when checking inc (dec x) ::
{Int|_v == x + y} in
\x . \y . 
    if y <= 0
      then x
      else 
        if x <= 0
          then y
          else 
            if (y != x) && (y <= x)
              then add y x
              else inc (dec x)
Trying y
Checking y :: {Int|_v >= 0} in
\x . \y . 
    if y <= 0
      then x
      else 
        if x <= 0
          then y
          else 
            if (y != x) && (y <= x)
              then add y x
              else inc (dec ??)
Adding constraint add, x, y C1, C3, C5, C6 |- {Int|_v == y} <: {Int|_v >= 0} ()
Typing Constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == y} <: {Int|_v >= 0} ()
Type assignment
Simple Constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == y} <: {Int|_v >= 0} ()
Pred assignment
After process simple constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == y} <: {Int|_v >= 0} ()
Constraints
  C1 && (C3 && (C5 && (C6 && (_v == y && (x >= 0 && y >= 0))))) ==> _v >= 0
QMap
  C0 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C1 -> {!(y <= 0)}
  C2 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C3 -> {!(x <= 0)}
  C4 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C5 -> {!(y != x && y <= x)}
  C6 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
Checking consistency
Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (8 0)
Remaining Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (8 0)
Synthesized argument y of type {Int|_v == y}
Checking dec
           y :: {Int|_v >= 0} in
\x . \y . 
    if y <= 0
      then x
      else 
        if x <= 0
          then y
          else 
            if (y != x) && (y <= x)
              then add y x
              else inc ??
Adding constraint add, x, y C1, C3, C5, C6 |- {Int|_v == y - 1} <: {Int|_v >= 0} ()
Typing Constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == y - 1} <: {Int|_v >= 0} ()
Type assignment
Simple Constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == y - 1} <: {Int|_v >= 0} ()
Pred assignment
After process simple constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == y - 1} <: {Int|_v >= 0} ()
Constraints
  C1 && (C3 && (C5 && (C6 && (_v == y - 1 && (x >= 0 && y >= 0))))) ==> _v >= 0
QMap
  C0 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C1 -> {!(y <= 0)}
  C2 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C3 -> {!(x <= 0)}
  C4 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C5 -> {!(y != x && y <= x)}
  C6 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
Checking consistency
Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (9 0)
Remaining Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (9 0)
Synthesized argument dec
                       y of type {Int|_v == y - 1}
Checking inc (dec
                y) :: {Int|_v == x + y} in
\x . \y . 
    if y <= 0
      then x
      else 
        if x <= 0
          then y
          else 
            if (y != x) && (y <= x)
              then add y x
              else ??
Adding constraint add, x, y C1, C3, C5, C6 |- LET x3:({Int|_v == y - 1}) IN {Int|_v == x3 + 1} <: {Int|_v == x + y} ()
Typing Constraints
add, x, y C1, C3, C5, C6 |- LET x3:({Int|_v == y - 1}) IN {Int|_v == x3 + 1} <: {Int|_v == x + y} ()
Type assignment
Simple Constraints
add, x, x3, y C1, C3, C5, C6 |- {Int|_v == x3 + 1} <: {Int|_v == x + y} ()
Pred assignment
After process simple constraints
add, x, x3, y C1, C3, C5, C6 |- {Int|_v == x3 + 1} <: {Int|_v == x + y} ()
Constraints
  C1 && (C3 && (C5 && (C6 && (_v == x3 + 1 && (x3 == y - 1 && (x >= 0 && y >= 0)))))) ==> _v == x + y
QMap
  C0 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C1 -> {!(y <= 0)}
  C2 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C3 -> {!(x <= 0)}
  C4 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C5 -> {!(y != x && y <= x)}
  C6 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (9 1)
Chosen candidate: 0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (9 1)
Invalid Constraint: C1 && (C3 && (C5 && (C6 && (_v == x3 + 1 && (x3 == y - 1 && (x >= 0 && y >= 0)))))) ==> _v == x + y
Strengthening: C1 && (C3 && (C5 && (C6 && (_v == x3 + 1 && (x3 == y - 1 && (x >= 0 && y >= 0)))))) ==> _v == x + y
Instantiated axioms:
All assumptions:
!(x <= 0), !(y <= 0), !(y != x && y <= x), _v == x3 + 1, x3 == y - 1, x >= 0, y >= 0
RHS: _v == x + y
assumption !(x <= 0) && (!(y <= 0) && (!(y != x && y <= x) && (_v == x3 + 1 && (x3 == y - 1 && (x >= 0 && y >= 0)))))
mustHave !(_v == x + y)
qualsList [0 != x
          ,0 != y
          ,y != x
          ,0 <= x
          ,0 <= y
          ,x <= y
          ,y <= x]
Optimal valuations:
Pruned valuations:
Diffs: (0)
TYPE ERROR: Cannot find sufficiently strong refinements
when checking inc (dec y) ::
{Int|_v == x + y} in
\x . \y . 
    if y <= 0
      then x
      else 
        if x <= 0
          then y
          else 
            if (y != x) && (y <= x)
              then add y x
              else inc (dec y)
Trying zero
Checking zero :: {Int|_v >= 0} in
\x . \y . 
    if y <= 0
      then x
      else 
        if x <= 0
          then y
          else 
            if (y != x) && (y <= x)
              then add y x
              else inc (dec ??)
Adding constraint add, x, y C1, C3, C5, C6 |- {Int|_v == zero} <: {Int|_v >= 0} ()
Typing Constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == zero} <: {Int|_v >= 0} ()
Type assignment
Simple Constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == zero} <: {Int|_v >= 0} ()
Pred assignment
After process simple constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == zero} <: {Int|_v >= 0} ()
Constraints
  C1 && (C3 && (C5 && (C6 && (_v == zero && (zero == 0 && (x >= 0 && y >= 0)))))) ==> _v >= 0
QMap
  C0 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C1 -> {!(y <= 0)}
  C2 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C3 -> {!(x <= 0)}
  C4 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C5 -> {!(y != x && y <= x)}
  C6 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
Checking consistency
Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (8 0)
Remaining Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (8 0)
Synthesized argument zero of type {Int|_v == zero}
Checking dec
           zero :: {Int|_v >= 0} in
\x . \y . 
    if y <= 0
      then x
      else 
        if x <= 0
          then y
          else 
            if (y != x) && (y <= x)
              then add y x
              else inc ??
Adding constraint add, x, y C1, C3, C5, C6 |- {Int|_v == zero - 1} <: {Int|_v >= 0} ()
Typing Constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == zero - 1} <: {Int|_v >= 0} ()
Type assignment
Simple Constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == zero - 1} <: {Int|_v >= 0} ()
Pred assignment
After process simple constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == zero - 1} <: {Int|_v >= 0} ()
Constraints
  C1 && (C3 && (C5 && (C6 && (_v == zero - 1 && (zero == 0 && (x >= 0 && y >= 0)))))) ==> _v >= 0
QMap
  C0 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C1 -> {!(y <= 0)}
  C2 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C3 -> {!(x <= 0)}
  C4 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C5 -> {!(y != x && y <= x)}
  C6 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (8 1)
Chosen candidate: 0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (8 1)
Invalid Constraint: C1 && (C3 && (C5 && (C6 && (_v == zero - 1 && (zero == 0 && (x >= 0 && y >= 0)))))) ==> _v >= 0
Strengthening: C1 && (C3 && (C5 && (C6 && (_v == zero - 1 && (zero == 0 && (x >= 0 && y >= 0)))))) ==> _v >= 0
Instantiated axioms:
All assumptions:
!(x <= 0), !(y <= 0), !(y != x && y <= x), _v == zero - 1, zero == 0, x >= 0, y >= 0
RHS: _v >= 0
assumption !(x <= 0) && (!(y <= 0) && (!(y != x && y <= x) && (_v == zero - 1 && (zero == 0 && (x >= 0 && y >= 0)))))
mustHave !(_v >= 0)
qualsList [0 != x
          ,0 != y
          ,y != x
          ,0 <= x
          ,0 <= y
          ,x <= y
          ,y <= x]
Optimal valuations:
Pruned valuations:
Diffs: (0)
TYPE ERROR: Cannot find sufficiently strong refinements
when checking dec zero ::
{Int|_v >= 0} in
\x . \y . 
    if y <= 0
      then x
      else 
        if x <= 0
          then y
          else 
            if (y != x) && (y <= x)
              then add y x
              else inc (dec zero)
INSTANTIATE x:{Int|_v >= 0} -> {Int|_v == x + 1}
INTO x4:{Int|_v >= 0} -> {Int|_v == x4 + 1}
Trying inc
Checking inc :: X3:_ -> {Int|_v >= 0} in
\x . \y . 
    if y <= 0
      then x
      else 
        if x <= 0
          then y
          else 
            if (y != x) && (y <= x)
              then add y x
              else inc (?? ??)
Adding constraint add, x, y C1, C3, C5, C6 |- x4:{Int|_v >= 0} -> {Int|_v == x4 + 1} <: X3:_ -> {Int|_v >= 0} ()
Adding constraint add, x, y C1, C3, C5, C6 |- x4:{Int|_v >= 0} -> {Int|_v == x4 + 1} /\ X3:_ -> {Int|_v >= 0} ()
Typing Constraints
add, x, y C1, C3, C5, C6 |- x4:{Int|_v >= 0} -> {Int|_v == x4 + 1} /\ X3:_ -> {Int|_v >= 0} ()
add, x, y C1, C3, C5, C6 |- x4:{Int|_v >= 0} -> {Int|_v == x4 + 1} <: X3:_ -> {Int|_v >= 0} ()
Type assignment
Simple Constraints
X3, add, x, y C1, C3, C5, C6 |- {Int|_v == X3 + 1} <: {Int|_v >= 0} ()
add, x, x4, y C1, C3, C5, C6 |- {Int|_v == x4 + 1} /\ {Int|_v >= 0} ()
Pred assignment
After process simple constraints
add, x, x4, y C1, C3, C5, C6 |- {Int|_v == x4 + 1} /\ {Int|_v >= 0} ()
X3, add, x, y C1, C3, C5, C6 |- {Int|_v == X3 + 1} <: {Int|_v >= 0} ()
Constraints
  False ==> _v >= 0
QMap
  C0 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C1 -> {!(y <= 0)}
  C2 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C3 -> {!(x <= 0)}
  C4 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C5 -> {!(y != x && y <= x)}
  C6 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
Checking consistency
  C1 && (C3 && (C5 && (C6 && (_v == x4 + 1 && (_v >= 0 && (x >= 0 && (x4 >= 0 && y >= 0)))))))
Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (7 0)
Remaining Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (7 0)
Trying x
Checking x :: {Int|_v >= 0} in
\x . \y . 
    if y <= 0
      then x
      else 
        if x <= 0
          then y
          else 
            if (y != x) && (y <= x)
              then add y x
              else inc (inc ??)
Adding constraint add, x, y C1, C3, C5, C6 |- {Int|_v == x} <: {Int|_v >= 0} ()
Typing Constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == x} <: {Int|_v >= 0} ()
Type assignment
Simple Constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == x} <: {Int|_v >= 0} ()
Pred assignment
After process simple constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == x} <: {Int|_v >= 0} ()
Constraints
  C1 && (C3 && (C5 && (C6 && (_v == x && (x >= 0 && y >= 0))))) ==> _v >= 0
QMap
  C0 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C1 -> {!(y <= 0)}
  C2 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C3 -> {!(x <= 0)}
  C4 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C5 -> {!(y != x && y <= x)}
  C6 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
Checking consistency
Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (8 0)
Remaining Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (8 0)
Synthesized argument x of type {Int|_v == x}
Checking inc
           x :: {Int|_v >= 0} in
\x . \y . 
    if y <= 0
      then x
      else 
        if x <= 0
          then y
          else 
            if (y != x) && (y <= x)
              then add y x
              else inc ??
Adding constraint add, x, y C1, C3, C5, C6 |- {Int|_v == x + 1} <: {Int|_v >= 0} ()
Typing Constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == x + 1} <: {Int|_v >= 0} ()
Type assignment
Simple Constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == x + 1} <: {Int|_v >= 0} ()
Pred assignment
After process simple constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == x + 1} <: {Int|_v >= 0} ()
Constraints
  C1 && (C3 && (C5 && (C6 && (_v == x + 1 && (x >= 0 && y >= 0))))) ==> _v >= 0
QMap
  C0 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C1 -> {!(y <= 0)}
  C2 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C3 -> {!(x <= 0)}
  C4 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C5 -> {!(y != x && y <= x)}
  C6 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
Checking consistency
Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (9 0)
Remaining Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (9 0)
Synthesized argument inc
                       x of type {Int|_v == x + 1}
Checking inc (inc
                x) :: {Int|_v == x + y} in
\x . \y . 
    if y <= 0
      then x
      else 
        if x <= 0
          then y
          else 
            if (y != x) && (y <= x)
              then add y x
              else ??
Adding constraint add, x, y C1, C3, C5, C6 |- LET x3:({Int|_v == x + 1}) IN {Int|_v == x3 + 1} <: {Int|_v == x + y} ()
Typing Constraints
add, x, y C1, C3, C5, C6 |- LET x3:({Int|_v == x + 1}) IN {Int|_v == x3 + 1} <: {Int|_v == x + y} ()
Type assignment
Simple Constraints
add, x, x3, y C1, C3, C5, C6 |- {Int|_v == x3 + 1} <: {Int|_v == x + y} ()
Pred assignment
After process simple constraints
add, x, x3, y C1, C3, C5, C6 |- {Int|_v == x3 + 1} <: {Int|_v == x + y} ()
Constraints
  C1 && (C3 && (C5 && (C6 && (_v == x3 + 1 && (x3 == x + 1 && (x >= 0 && y >= 0)))))) ==> _v == x + y
QMap
  C0 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C1 -> {!(y <= 0)}
  C2 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C3 -> {!(x <= 0)}
  C4 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C5 -> {!(y != x && y <= x)}
  C6 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (9 1)
Chosen candidate: 0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (9 1)
Invalid Constraint: C1 && (C3 && (C5 && (C6 && (_v == x3 + 1 && (x3 == x + 1 && (x >= 0 && y >= 0)))))) ==> _v == x + y
Strengthening: C1 && (C3 && (C5 && (C6 && (_v == x3 + 1 && (x3 == x + 1 && (x >= 0 && y >= 0)))))) ==> _v == x + y
Instantiated axioms:
All assumptions:
!(x <= 0), !(y <= 0), !(y != x && y <= x), _v == x3 + 1, x3 == x + 1, x >= 0, y >= 0
RHS: _v == x + y
assumption !(x <= 0) && (!(y <= 0) && (!(y != x && y <= x) && (_v == x3 + 1 && (x3 == x + 1 && (x >= 0 && y >= 0)))))
mustHave !(_v == x + y)
qualsList [0 != x
          ,0 != y
          ,y != x
          ,0 <= x
          ,0 <= y
          ,x <= y
          ,y <= x]
Optimal valuations:
Pruned valuations:
Diffs: (0)
TYPE ERROR: Cannot find sufficiently strong refinements
when checking inc (inc x) ::
{Int|_v == x + y} in
\x . \y . 
    if y <= 0
      then x
      else 
        if x <= 0
          then y
          else 
            if (y != x) && (y <= x)
              then add y x
              else inc (inc x)
Trying y
Checking y :: {Int|_v >= 0} in
\x . \y . 
    if y <= 0
      then x
      else 
        if x <= 0
          then y
          else 
            if (y != x) && (y <= x)
              then add y x
              else inc (inc ??)
Adding constraint add, x, y C1, C3, C5, C6 |- {Int|_v == y} <: {Int|_v >= 0} ()
Typing Constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == y} <: {Int|_v >= 0} ()
Type assignment
Simple Constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == y} <: {Int|_v >= 0} ()
Pred assignment
After process simple constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == y} <: {Int|_v >= 0} ()
Constraints
  C1 && (C3 && (C5 && (C6 && (_v == y && (x >= 0 && y >= 0))))) ==> _v >= 0
QMap
  C0 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C1 -> {!(y <= 0)}
  C2 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C3 -> {!(x <= 0)}
  C4 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C5 -> {!(y != x && y <= x)}
  C6 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
Checking consistency
Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (8 0)
Remaining Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (8 0)
Synthesized argument y of type {Int|_v == y}
Checking inc
           y :: {Int|_v >= 0} in
\x . \y . 
    if y <= 0
      then x
      else 
        if x <= 0
          then y
          else 
            if (y != x) && (y <= x)
              then add y x
              else inc ??
Adding constraint add, x, y C1, C3, C5, C6 |- {Int|_v == y + 1} <: {Int|_v >= 0} ()
Typing Constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == y + 1} <: {Int|_v >= 0} ()
Type assignment
Simple Constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == y + 1} <: {Int|_v >= 0} ()
Pred assignment
After process simple constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == y + 1} <: {Int|_v >= 0} ()
Constraints
  C1 && (C3 && (C5 && (C6 && (_v == y + 1 && (x >= 0 && y >= 0))))) ==> _v >= 0
QMap
  C0 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C1 -> {!(y <= 0)}
  C2 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C3 -> {!(x <= 0)}
  C4 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C5 -> {!(y != x && y <= x)}
  C6 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
Checking consistency
Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (9 0)
Remaining Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (9 0)
Synthesized argument inc
                       y of type {Int|_v == y + 1}
Checking inc (inc
                y) :: {Int|_v == x + y} in
\x . \y . 
    if y <= 0
      then x
      else 
        if x <= 0
          then y
          else 
            if (y != x) && (y <= x)
              then add y x
              else ??
Adding constraint add, x, y C1, C3, C5, C6 |- LET x3:({Int|_v == y + 1}) IN {Int|_v == x3 + 1} <: {Int|_v == x + y} ()
Typing Constraints
add, x, y C1, C3, C5, C6 |- LET x3:({Int|_v == y + 1}) IN {Int|_v == x3 + 1} <: {Int|_v == x + y} ()
Type assignment
Simple Constraints
add, x, x3, y C1, C3, C5, C6 |- {Int|_v == x3 + 1} <: {Int|_v == x + y} ()
Pred assignment
After process simple constraints
add, x, x3, y C1, C3, C5, C6 |- {Int|_v == x3 + 1} <: {Int|_v == x + y} ()
Constraints
  C1 && (C3 && (C5 && (C6 && (_v == x3 + 1 && (x3 == y + 1 && (x >= 0 && y >= 0)))))) ==> _v == x + y
QMap
  C0 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C1 -> {!(y <= 0)}
  C2 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C3 -> {!(x <= 0)}
  C4 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C5 -> {!(y != x && y <= x)}
  C6 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (9 1)
Chosen candidate: 0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (9 1)
Invalid Constraint: C1 && (C3 && (C5 && (C6 && (_v == x3 + 1 && (x3 == y + 1 && (x >= 0 && y >= 0)))))) ==> _v == x + y
Strengthening: C1 && (C3 && (C5 && (C6 && (_v == x3 + 1 && (x3 == y + 1 && (x >= 0 && y >= 0)))))) ==> _v == x + y
Instantiated axioms:
All assumptions:
!(x <= 0), !(y <= 0), !(y != x && y <= x), _v == x3 + 1, x3 == y + 1, x >= 0, y >= 0
RHS: _v == x + y
assumption !(x <= 0) && (!(y <= 0) && (!(y != x && y <= x) && (_v == x3 + 1 && (x3 == y + 1 && (x >= 0 && y >= 0)))))
mustHave !(_v == x + y)
qualsList [0 != x
          ,0 != y
          ,y != x
          ,0 <= x
          ,0 <= y
          ,x <= y
          ,y <= x]
Optimal valuations:
Pruned valuations:
Diffs: (0)
TYPE ERROR: Cannot find sufficiently strong refinements
when checking inc (inc y) ::
{Int|_v == x + y} in
\x . \y . 
    if y <= 0
      then x
      else 
        if x <= 0
          then y
          else 
            if (y != x) && (y <= x)
              then add y x
              else inc (inc y)
Trying zero
Checking zero :: {Int|_v >= 0} in
\x . \y . 
    if y <= 0
      then x
      else 
        if x <= 0
          then y
          else 
            if (y != x) && (y <= x)
              then add y x
              else inc (inc ??)
Adding constraint add, x, y C1, C3, C5, C6 |- {Int|_v == zero} <: {Int|_v >= 0} ()
Typing Constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == zero} <: {Int|_v >= 0} ()
Type assignment
Simple Constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == zero} <: {Int|_v >= 0} ()
Pred assignment
After process simple constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == zero} <: {Int|_v >= 0} ()
Constraints
  C1 && (C3 && (C5 && (C6 && (_v == zero && (zero == 0 && (x >= 0 && y >= 0)))))) ==> _v >= 0
QMap
  C0 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C1 -> {!(y <= 0)}
  C2 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C3 -> {!(x <= 0)}
  C4 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C5 -> {!(y != x && y <= x)}
  C6 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
Checking consistency
Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (8 0)
Remaining Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (8 0)
Synthesized argument zero of type {Int|_v == zero}
Checking inc
           zero :: {Int|_v >= 0} in
\x . \y . 
    if y <= 0
      then x
      else 
        if x <= 0
          then y
          else 
            if (y != x) && (y <= x)
              then add y x
              else inc ??
Adding constraint add, x, y C1, C3, C5, C6 |- {Int|_v == zero + 1} <: {Int|_v >= 0} ()
Typing Constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == zero + 1} <: {Int|_v >= 0} ()
Type assignment
Simple Constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == zero + 1} <: {Int|_v >= 0} ()
Pred assignment
After process simple constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == zero + 1} <: {Int|_v >= 0} ()
Constraints
  C1 && (C3 && (C5 && (C6 && (_v == zero + 1 && (zero == 0 && (x >= 0 && y >= 0)))))) ==> _v >= 0
QMap
  C0 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C1 -> {!(y <= 0)}
  C2 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C3 -> {!(x <= 0)}
  C4 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C5 -> {!(y != x && y <= x)}
  C6 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
Checking consistency
Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (9 0)
Remaining Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (9 0)
Synthesized argument inc
                       zero of type {Int|_v == zero + 1}
Checking inc (inc
                zero) :: {Int|_v == x + y} in
\x . \y . 
    if y <= 0
      then x
      else 
        if x <= 0
          then y
          else 
            if (y != x) && (y <= x)
              then add y x
              else ??
Adding constraint add, x, y C1, C3, C5, C6 |- LET x3:({Int|_v == zero + 1}) IN {Int|_v == x3 + 1} <: {Int|_v == x + y} ()
Typing Constraints
add, x, y C1, C3, C5, C6 |- LET x3:({Int|_v == zero + 1}) IN {Int|_v == x3 + 1} <: {Int|_v == x + y} ()
Type assignment
Simple Constraints
add, x, x3, y C1, C3, C5, C6 |- {Int|_v == x3 + 1} <: {Int|_v == x + y} ()
Pred assignment
After process simple constraints
add, x, x3, y C1, C3, C5, C6 |- {Int|_v == x3 + 1} <: {Int|_v == x + y} ()
Constraints
  C1 && (C3 && (C5 && (C6 && (_v == x3 + 1 && (x3 == zero + 1 && (zero == 0 && (x >= 0 && y >= 0))))))) ==> _v == x + y
QMap
  C0 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C1 -> {!(y <= 0)}
  C2 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C3 -> {!(x <= 0)}
  C4 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C5 -> {!(y != x && y <= x)}
  C6 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (9 1)
Chosen candidate: 0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (9 1)
Invalid Constraint: C1 && (C3 && (C5 && (C6 && (_v == x3 + 1 && (x3 == zero + 1 && (zero == 0 && (x >= 0 && y >= 0))))))) ==> _v == x + y
Strengthening: C1 && (C3 && (C5 && (C6 && (_v == x3 + 1 && (x3 == zero + 1 && (zero == 0 && (x >= 0 && y >= 0))))))) ==> _v == x + y
Instantiated axioms:
All assumptions:
!(x <= 0), !(y <= 0), !(y != x && y <= x), _v == x3 + 1, x3 == zero + 1, zero == 0, x >= 0, y >= 0
RHS: _v == x + y
assumption !(x <= 0) && (!(y <= 0) && (!(y != x && y <= x) && (_v == x3 + 1 && (x3 == zero + 1 && (zero == 0 && (x >= 0 && y >= 0))))))
mustHave !(_v == x + y)
qualsList [0 != x
          ,0 != y
          ,y != x
          ,0 <= x
          ,0 <= y
          ,x <= y
          ,y <= x]
Optimal valuations:
Pruned valuations:
Diffs: (0)
TYPE ERROR: Cannot find sufficiently strong refinements
when checking inc (inc zero) ::
{Int|_v == x + y} in
\x . \y . 
    if y <= 0
      then x
      else 
        if x <= 0
          then y
          else 
            if (y != x) && (y <= x)
              then add y x
              else inc (inc zero)
INSTANTIATE x0:{Int|_v >= 0 && (_v >= 0 && _v < x)} -> y:{Int|_v >= 0} -> {Int|_v == x0 + y}
INTO x4:{Int|_v >= 0 && (_v >= 0 && _v < x)} -> x5:{Int|_v >= 0} -> {Int|_v == x4 + x5}
Trying add
Adding constraint add, x, y C1, C3, C5, C6 |- x4:Int -> x5:Int -> {Int|False} <: x:{Int|False} -> y:{Int|False} -> Int ()
Checking add :: X4:_ -> X3:_ -> {Int|_v >= 0} in
\x . \y . 
    if y <= 0
      then x
      else 
        if x <= 0
          then y
          else 
            if (y != x) && (y <= x)
              then add y x
              else inc (?? ?? ??)
Adding constraint add, x, y C1, C3, C5, C6 |- x4:{Int|_v >= 0 && (_v >= 0 && _v < x)} -> x5:{Int|_v >= 0} -> {Int|_v == x4 + x5} <: X4:_ -> X3:_ -> {Int|_v >= 0} ()
Adding constraint add, x, y C1, C3, C5, C6 |- x4:{Int|_v >= 0 && (_v >= 0 && _v < x)} -> x5:{Int|_v >= 0} -> {Int|_v == x4 + x5} /\ X4:_ -> X3:_ -> {Int|_v >= 0} ()
Typing Constraints
add, x, y C1, C3, C5, C6 |- x4:{Int|_v >= 0 && (_v >= 0 && _v < x)} -> x5:{Int|_v >= 0} -> {Int|_v == x4 + x5} /\ X4:_ -> X3:_ -> {Int|_v >= 0} ()
add, x, y C1, C3, C5, C6 |- x4:{Int|_v >= 0 && (_v >= 0 && _v < x)} -> x5:{Int|_v >= 0} -> {Int|_v == x4 + x5} <: X4:_ -> X3:_ -> {Int|_v >= 0} ()
add, x, y C1, C3, C5, C6 |- x4:Int -> x5:Int -> {Int|False} <: x:{Int|False} -> y:{Int|False} -> Int ()
Type assignment
Simple Constraints
add, x, y C1, C3, C5, C6 |- {Int|False} <: Int ()
add, x, y C1, C3, C5, C6 |- {Int|False} <: Int ()
add, x, y C1, C3, C5, C6 |- {Int|False} <: Int ()
X3, X4, add, x, y C1, C3, C5, C6 |- {Int|_v == X4 + X3} <: {Int|_v >= 0} ()
add, x, x4, x5, y C1, C3, C5, C6 |- {Int|_v == x4 + x5} /\ {Int|_v >= 0} ()
Pred assignment
After process simple constraints
add, x, x4, x5, y C1, C3, C5, C6 |- {Int|_v == x4 + x5} /\ {Int|_v >= 0} ()
X3, X4, add, x, y C1, C3, C5, C6 |- {Int|_v == X4 + X3} <: {Int|_v >= 0} ()
Constraints
  False ==> _v >= 0
QMap
  C0 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C1 -> {!(y <= 0)}
  C2 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C3 -> {!(x <= 0)}
  C4 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C5 -> {!(y != x && y <= x)}
  C6 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
Checking consistency
  C1 && (C3 && (C5 && (C6 && (_v == x4 + x5 && (_v >= 0 && (x >= 0 && (x5 >= 0 && (y >= 0 && (x4 >= 0 && (x4 >= 0 && x4 < x))))))))))
Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (7 0)
Remaining Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (7 0)
Trying x
Checking x :: {Int|_v >= 0 && (_v >= 0 && _v < x)} in
\x . \y . 
    if y <= 0
      then x
      else 
        if x <= 0
          then y
          else 
            if (y != x) && (y <= x)
              then add y x
              else inc (add ?? ??)
Adding constraint add, x, y C1, C3, C5, C6 |- {Int|_v == x} <: {Int|_v >= 0 && (_v >= 0 && _v < x)} ()
Typing Constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == x} <: {Int|_v >= 0 && (_v >= 0 && _v < x)} ()
Type assignment
Simple Constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == x} <: {Int|_v >= 0 && (_v >= 0 && _v < x)} ()
Pred assignment
After process simple constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == x} <: {Int|_v >= 0 && (_v >= 0 && _v < x)} ()
Constraints
  C1 && (C3 && (C5 && (C6 && (_v == x && (x >= 0 && y >= 0))))) ==> _v >= 0 && (_v >= 0 && _v < x)
QMap
  C0 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C1 -> {!(y <= 0)}
  C2 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C3 -> {!(x <= 0)}
  C4 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C5 -> {!(y != x && y <= x)}
  C6 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (7 1)
Chosen candidate: 0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (7 1)
Invalid Constraint: C1 && (C3 && (C5 && (C6 && (_v == x && (x >= 0 && y >= 0))))) ==> _v >= 0 && (_v >= 0 && _v < x)
Strengthening: C1 && (C3 && (C5 && (C6 && (_v == x && (x >= 0 && y >= 0))))) ==> _v >= 0 && (_v >= 0 && _v < x)
Instantiated axioms:
All assumptions:
!(x <= 0), !(y <= 0), !(y != x && y <= x), _v == x, x >= 0, y >= 0
RHS: _v >= 0 && (_v >= 0 && _v < x)
assumption !(x <= 0) && (!(y <= 0) && (!(y != x && y <= x) && (_v == x && (x >= 0 && y >= 0))))
mustHave !(_v >= 0 && (_v >= 0 && _v < x))
qualsList [0 != x
          ,0 != y
          ,y != x
          ,0 <= x
          ,0 <= y
          ,x <= y
          ,y <= x]
Optimal valuations:
Pruned valuations:
Diffs: (0)
TYPE ERROR: Cannot find sufficiently strong refinements
when checking x ::
{Int|_v >= 0 && (_v >= 0 && _v < x)}
in
\x . \y . 
    if y <= 0
      then x
      else 
        if x <= 0
          then y
          else 
            if (y != x) && (y <= x)
              then add y x
              else inc (add x ??)
Trying y
Checking y :: {Int|_v >= 0 && (_v >= 0 && _v < x)} in
\x . \y . 
    if y <= 0
      then x
      else 
        if x <= 0
          then y
          else 
            if (y != x) && (y <= x)
              then add y x
              else inc (add ?? ??)
Adding constraint add, x, y C1, C3, C5, C6 |- {Int|_v == y} <: {Int|_v >= 0 && (_v >= 0 && _v < x)} ()
Typing Constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == y} <: {Int|_v >= 0 && (_v >= 0 && _v < x)} ()
Type assignment
Simple Constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == y} <: {Int|_v >= 0 && (_v >= 0 && _v < x)} ()
Pred assignment
After process simple constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == y} <: {Int|_v >= 0 && (_v >= 0 && _v < x)} ()
Constraints
  C1 && (C3 && (C5 && (C6 && (_v == y && (x >= 0 && y >= 0))))) ==> _v >= 0 && (_v >= 0 && _v < x)
QMap
  C0 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C1 -> {!(y <= 0)}
  C2 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C3 -> {!(x <= 0)}
  C4 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C5 -> {!(y != x && y <= x)}
  C6 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (7 1)
Chosen candidate: 0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (7 1)
Invalid Constraint: C1 && (C3 && (C5 && (C6 && (_v == y && (x >= 0 && y >= 0))))) ==> _v >= 0 && (_v >= 0 && _v < x)
Strengthening: C1 && (C3 && (C5 && (C6 && (_v == y && (x >= 0 && y >= 0))))) ==> _v >= 0 && (_v >= 0 && _v < x)
Instantiated axioms:
All assumptions:
!(x <= 0), !(y <= 0), !(y != x && y <= x), _v == y, x >= 0, y >= 0
RHS: _v >= 0 && (_v >= 0 && _v < x)
assumption !(x <= 0) && (!(y <= 0) && (!(y != x && y <= x) && (_v == y && (x >= 0 && y >= 0))))
mustHave !(_v >= 0 && (_v >= 0 && _v < x))
qualsList [0 != x
          ,0 != y
          ,y != x
          ,0 <= x
          ,0 <= y
          ,x <= y
          ,y <= x]
Optimal valuations:
Pruned valuations:
Diffs: (0)
TYPE ERROR: Cannot find sufficiently strong refinements
when checking y ::
{Int|_v >= 0 && (_v >= 0 && _v < x)}
in
\x . \y . 
    if y <= 0
      then x
      else 
        if x <= 0
          then y
          else 
            if (y != x) && (y <= x)
              then add y x
              else inc (add y ??)
Trying zero
Checking zero :: {Int|_v >= 0 && (_v >= 0 && _v < x)} in
\x . \y . 
    if y <= 0
      then x
      else 
        if x <= 0
          then y
          else 
            if (y != x) && (y <= x)
              then add y x
              else inc (add ?? ??)
Adding constraint add, x, y C1, C3, C5, C6 |- {Int|_v == zero} <: {Int|_v >= 0 && (_v >= 0 && _v < x)} ()
Typing Constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == zero} <: {Int|_v >= 0 && (_v >= 0 && _v < x)} ()
Type assignment
Simple Constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == zero} <: {Int|_v >= 0 && (_v >= 0 && _v < x)} ()
Pred assignment
After process simple constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == zero} <: {Int|_v >= 0 && (_v >= 0 && _v < x)} ()
Constraints
  C1 && (C3 && (C5 && (C6 && (_v == zero && (zero == 0 && (x >= 0 && y >= 0)))))) ==> _v >= 0 && (_v >= 0 && _v < x)
QMap
  C0 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C1 -> {!(y <= 0)}
  C2 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C3 -> {!(x <= 0)}
  C4 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C5 -> {!(y != x && y <= x)}
  C6 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
Checking consistency
Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (8 0)
Remaining Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (8 0)
Synthesized argument zero of type {Int|_v == zero}
Checking add
           zero :: X3:_ -> {Int|_v >= 0} in
\x . \y . 
    if y <= 0
      then x
      else 
        if x <= 0
          then y
          else 
            if (y != x) && (y <= x)
              then add y x
              else inc (?? ??)
Adding constraint add, x, y C1, C3, C5, C6 |- x5:{Int|_v >= 0} -> {Int|_v == zero + x5} <: X3:_ -> {Int|_v >= 0} ()
Adding constraint add, x, y C1, C3, C5, C6 |- x5:{Int|_v >= 0} -> {Int|_v == zero + x5} /\ X3:_ -> {Int|_v >= 0} ()
Typing Constraints
add, x, y C1, C3, C5, C6 |- x5:{Int|_v >= 0} -> {Int|_v == zero + x5} /\ X3:_ -> {Int|_v >= 0} ()
add, x, y C1, C3, C5, C6 |- x5:{Int|_v >= 0} -> {Int|_v == zero + x5} <: X3:_ -> {Int|_v >= 0} ()
Type assignment
Simple Constraints
X3, add, x, y C1, C3, C5, C6 |- {Int|_v == zero + X3} <: {Int|_v >= 0} ()
add, x, x5, y C1, C3, C5, C6 |- {Int|_v == zero + x5} /\ {Int|_v >= 0} ()
Pred assignment
After process simple constraints
add, x, x5, y C1, C3, C5, C6 |- {Int|_v == zero + x5} /\ {Int|_v >= 0} ()
X3, add, x, y C1, C3, C5, C6 |- {Int|_v == zero + X3} <: {Int|_v >= 0} ()
Constraints
  False ==> _v >= 0
QMap
  C0 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C1 -> {!(y <= 0)}
  C2 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C3 -> {!(x <= 0)}
  C4 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C5 -> {!(y != x && y <= x)}
  C6 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
Checking consistency
  C1 && (C3 && (C5 && (C6 && (_v == zero + x5 && (zero == 0 && (_v >= 0 && (x >= 0 && (x5 >= 0 && y >= 0))))))))
Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (8 0)
Remaining Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (8 0)
Trying x
Checking x :: {Int|_v >= 0} in
\x . \y . 
    if y <= 0
      then x
      else 
        if x <= 0
          then y
          else 
            if (y != x) && (y <= x)
              then add y x
              else inc (add zero ??)
Adding constraint add, x, y C1, C3, C5, C6 |- {Int|_v == x} <: {Int|_v >= 0} ()
Typing Constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == x} <: {Int|_v >= 0} ()
Type assignment
Simple Constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == x} <: {Int|_v >= 0} ()
Pred assignment
After process simple constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == x} <: {Int|_v >= 0} ()
Constraints
  C1 && (C3 && (C5 && (C6 && (_v == x && (x >= 0 && y >= 0))))) ==> _v >= 0
QMap
  C0 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C1 -> {!(y <= 0)}
  C2 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C3 -> {!(x <= 0)}
  C4 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C5 -> {!(y != x && y <= x)}
  C6 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
Checking consistency
Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (9 0)
Remaining Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (9 0)
Synthesized argument x of type {Int|_v == x}
Checking add zero
           x :: {Int|_v >= 0} in
\x . \y . 
    if y <= 0
      then x
      else 
        if x <= 0
          then y
          else 
            if (y != x) && (y <= x)
              then add y x
              else inc ??
Adding constraint add, x, y C1, C3, C5, C6 |- {Int|_v == zero + x} <: {Int|_v >= 0} ()
Typing Constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == zero + x} <: {Int|_v >= 0} ()
Type assignment
Simple Constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == zero + x} <: {Int|_v >= 0} ()
Pred assignment
After process simple constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == zero + x} <: {Int|_v >= 0} ()
Constraints
  C1 && (C3 && (C5 && (C6 && (_v == zero + x && (zero == 0 && (x >= 0 && y >= 0)))))) ==> _v >= 0
QMap
  C0 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C1 -> {!(y <= 0)}
  C2 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C3 -> {!(x <= 0)}
  C4 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C5 -> {!(y != x && y <= x)}
  C6 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
Checking consistency
Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (10 0)
Remaining Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (10 0)
Synthesized argument add zero
                       x of type {Int|_v == zero + x}
Checking inc (add zero
                x) :: {Int|_v == x + y} in
\x . \y . 
    if y <= 0
      then x
      else 
        if x <= 0
          then y
          else 
            if (y != x) && (y <= x)
              then add y x
              else ??
Adding constraint add, x, y C1, C3, C5, C6 |- LET x3:({Int|_v == zero + x}) IN {Int|_v == x3 + 1} <: {Int|_v == x + y} ()
Typing Constraints
add, x, y C1, C3, C5, C6 |- LET x3:({Int|_v == zero + x}) IN {Int|_v == x3 + 1} <: {Int|_v == x + y} ()
Type assignment
Simple Constraints
add, x, x3, y C1, C3, C5, C6 |- {Int|_v == x3 + 1} <: {Int|_v == x + y} ()
Pred assignment
After process simple constraints
add, x, x3, y C1, C3, C5, C6 |- {Int|_v == x3 + 1} <: {Int|_v == x + y} ()
Constraints
  C1 && (C3 && (C5 && (C6 && (_v == x3 + 1 && (x3 == zero + x && (zero == 0 && (x >= 0 && y >= 0))))))) ==> _v == x + y
QMap
  C0 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C1 -> {!(y <= 0)}
  C2 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C3 -> {!(x <= 0)}
  C4 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C5 -> {!(y != x && y <= x)}
  C6 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (10 1)
Chosen candidate: 0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (10 1)
Invalid Constraint: C1 && (C3 && (C5 && (C6 && (_v == x3 + 1 && (x3 == zero + x && (zero == 0 && (x >= 0 && y >= 0))))))) ==> _v == x + y
Strengthening: C1 && (C3 && (C5 && (C6 && (_v == x3 + 1 && (x3 == zero + x && (zero == 0 && (x >= 0 && y >= 0))))))) ==> _v == x + y
Instantiated axioms:
All assumptions:
!(x <= 0), !(y <= 0), !(y != x && y <= x), _v == x3 + 1, x3 == zero + x, zero == 0, x >= 0, y >= 0
RHS: _v == x + y
assumption !(x <= 0) && (!(y <= 0) && (!(y != x && y <= x) && (_v == x3 + 1 && (x3 == zero + x && (zero == 0 && (x >= 0 && y >= 0))))))
mustHave !(_v == x + y)
qualsList [0 != x
          ,0 != y
          ,y != x
          ,0 <= x
          ,0 <= y
          ,x <= y
          ,y <= x]
Optimal valuations:
Pruned valuations:
Diffs: (0)
TYPE ERROR: Cannot find sufficiently strong refinements
when checking inc (add zero x)
:: {Int|_v == x + y} in
\x . \y . 
    if y <= 0
      then x
      else 
        if x <= 0
          then y
          else 
            if (y != x) && (y <= x)
              then add y x
              else inc (add zero x)
Trying y
Checking y :: {Int|_v >= 0} in
\x . \y . 
    if y <= 0
      then x
      else 
        if x <= 0
          then y
          else 
            if (y != x) && (y <= x)
              then add y x
              else inc (add zero ??)
Adding constraint add, x, y C1, C3, C5, C6 |- {Int|_v == y} <: {Int|_v >= 0} ()
Typing Constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == y} <: {Int|_v >= 0} ()
Type assignment
Simple Constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == y} <: {Int|_v >= 0} ()
Pred assignment
After process simple constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == y} <: {Int|_v >= 0} ()
Constraints
  C1 && (C3 && (C5 && (C6 && (_v == y && (x >= 0 && y >= 0))))) ==> _v >= 0
QMap
  C0 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C1 -> {!(y <= 0)}
  C2 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C3 -> {!(x <= 0)}
  C4 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C5 -> {!(y != x && y <= x)}
  C6 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
Checking consistency
Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (9 0)
Remaining Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (9 0)
Synthesized argument y of type {Int|_v == y}
Checking add zero
           y :: {Int|_v >= 0} in
\x . \y . 
    if y <= 0
      then x
      else 
        if x <= 0
          then y
          else 
            if (y != x) && (y <= x)
              then add y x
              else inc ??
Adding constraint add, x, y C1, C3, C5, C6 |- {Int|_v == zero + y} <: {Int|_v >= 0} ()
Typing Constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == zero + y} <: {Int|_v >= 0} ()
Type assignment
Simple Constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == zero + y} <: {Int|_v >= 0} ()
Pred assignment
After process simple constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == zero + y} <: {Int|_v >= 0} ()
Constraints
  C1 && (C3 && (C5 && (C6 && (_v == zero + y && (zero == 0 && (x >= 0 && y >= 0)))))) ==> _v >= 0
QMap
  C0 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C1 -> {!(y <= 0)}
  C2 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C3 -> {!(x <= 0)}
  C4 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C5 -> {!(y != x && y <= x)}
  C6 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
Checking consistency
Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (10 0)
Remaining Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (10 0)
Synthesized argument add zero
                       y of type {Int|_v == zero + y}
Checking inc (add zero
                y) :: {Int|_v == x + y} in
\x . \y . 
    if y <= 0
      then x
      else 
        if x <= 0
          then y
          else 
            if (y != x) && (y <= x)
              then add y x
              else ??
Adding constraint add, x, y C1, C3, C5, C6 |- LET x3:({Int|_v == zero + y}) IN {Int|_v == x3 + 1} <: {Int|_v == x + y} ()
Typing Constraints
add, x, y C1, C3, C5, C6 |- LET x3:({Int|_v == zero + y}) IN {Int|_v == x3 + 1} <: {Int|_v == x + y} ()
Type assignment
Simple Constraints
add, x, x3, y C1, C3, C5, C6 |- {Int|_v == x3 + 1} <: {Int|_v == x + y} ()
Pred assignment
After process simple constraints
add, x, x3, y C1, C3, C5, C6 |- {Int|_v == x3 + 1} <: {Int|_v == x + y} ()
Constraints
  C1 && (C3 && (C5 && (C6 && (_v == x3 + 1 && (x3 == zero + y && (zero == 0 && (x >= 0 && y >= 0))))))) ==> _v == x + y
QMap
  C0 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C1 -> {!(y <= 0)}
  C2 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C3 -> {!(x <= 0)}
  C4 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C5 -> {!(y != x && y <= x)}
  C6 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (10 1)
Chosen candidate: 0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (10 1)
Invalid Constraint: C1 && (C3 && (C5 && (C6 && (_v == x3 + 1 && (x3 == zero + y && (zero == 0 && (x >= 0 && y >= 0))))))) ==> _v == x + y
Strengthening: C1 && (C3 && (C5 && (C6 && (_v == x3 + 1 && (x3 == zero + y && (zero == 0 && (x >= 0 && y >= 0))))))) ==> _v == x + y
Instantiated axioms:
All assumptions:
!(x <= 0), !(y <= 0), !(y != x && y <= x), _v == x3 + 1, x3 == zero + y, zero == 0, x >= 0, y >= 0
RHS: _v == x + y
assumption !(x <= 0) && (!(y <= 0) && (!(y != x && y <= x) && (_v == x3 + 1 && (x3 == zero + y && (zero == 0 && (x >= 0 && y >= 0))))))
mustHave !(_v == x + y)
qualsList [0 != x
          ,0 != y
          ,y != x
          ,0 <= x
          ,0 <= y
          ,x <= y
          ,y <= x]
Optimal valuations:
Pruned valuations:
Diffs: (0)
TYPE ERROR: Cannot find sufficiently strong refinements
when checking inc (add zero y)
:: {Int|_v == x + y} in
\x . \y . 
    if y <= 0
      then x
      else 
        if x <= 0
          then y
          else 
            if (y != x) && (y <= x)
              then add y x
              else inc (add zero y)
Trying zero
Checking zero :: {Int|_v >= 0} in
\x . \y . 
    if y <= 0
      then x
      else 
        if x <= 0
          then y
          else 
            if (y != x) && (y <= x)
              then add y x
              else inc (add zero ??)
Adding constraint add, x, y C1, C3, C5, C6 |- {Int|_v == zero} <: {Int|_v >= 0} ()
Typing Constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == zero} <: {Int|_v >= 0} ()
Type assignment
Simple Constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == zero} <: {Int|_v >= 0} ()
Pred assignment
After process simple constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == zero} <: {Int|_v >= 0} ()
Constraints
  C1 && (C3 && (C5 && (C6 && (_v == zero && (zero == 0 && (x >= 0 && y >= 0)))))) ==> _v >= 0
QMap
  C0 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C1 -> {!(y <= 0)}
  C2 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C3 -> {!(x <= 0)}
  C4 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C5 -> {!(y != x && y <= x)}
  C6 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
Checking consistency
Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (9 0)
Remaining Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (9 0)
Synthesized argument zero of type {Int|_v == zero}
Checking add zero
           zero :: {Int|_v >= 0} in
\x . \y . 
    if y <= 0
      then x
      else 
        if x <= 0
          then y
          else 
            if (y != x) && (y <= x)
              then add y x
              else inc ??
Adding constraint add, x, y C1, C3, C5, C6 |- {Int|_v == zero + zero} <: {Int|_v >= 0} ()
Typing Constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == zero + zero} <: {Int|_v >= 0} ()
Type assignment
Simple Constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == zero + zero} <: {Int|_v >= 0} ()
Pred assignment
After process simple constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == zero + zero} <: {Int|_v >= 0} ()
Constraints
  C1 && (C3 && (C5 && (C6 && (_v == zero + zero && (zero == 0 && (x >= 0 && y >= 0)))))) ==> _v >= 0
QMap
  C0 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C1 -> {!(y <= 0)}
  C2 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C3 -> {!(x <= 0)}
  C4 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C5 -> {!(y != x && y <= x)}
  C6 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
Checking consistency
Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (10 0)
Remaining Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (10 0)
Synthesized argument add zero
                       zero of type {Int|_v == zero + zero}
Checking inc (add zero
                zero) :: {Int|_v == x + y} in
\x . \y . 
    if y <= 0
      then x
      else 
        if x <= 0
          then y
          else 
            if (y != x) && (y <= x)
              then add y x
              else ??
Adding constraint add, x, y C1, C3, C5, C6 |- LET x3:({Int|_v == zero + zero}) IN {Int|_v == x3 + 1} <: {Int|_v == x + y} ()
Typing Constraints
add, x, y C1, C3, C5, C6 |- LET x3:({Int|_v == zero + zero}) IN {Int|_v == x3 + 1} <: {Int|_v == x + y} ()
Type assignment
Simple Constraints
add, x, x3, y C1, C3, C5, C6 |- {Int|_v == x3 + 1} <: {Int|_v == x + y} ()
Pred assignment
After process simple constraints
add, x, x3, y C1, C3, C5, C6 |- {Int|_v == x3 + 1} <: {Int|_v == x + y} ()
Constraints
  C1 && (C3 && (C5 && (C6 && (_v == x3 + 1 && (x3 == zero + zero && (zero == 0 && (x >= 0 && y >= 0))))))) ==> _v == x + y
QMap
  C0 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C1 -> {!(y <= 0)}
  C2 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C3 -> {!(x <= 0)}
  C4 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C5 -> {!(y != x && y <= x)}
  C6 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (10 1)
Chosen candidate: 0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (10 1)
Invalid Constraint: C1 && (C3 && (C5 && (C6 && (_v == x3 + 1 && (x3 == zero + zero && (zero == 0 && (x >= 0 && y >= 0))))))) ==> _v == x + y
Strengthening: C1 && (C3 && (C5 && (C6 && (_v == x3 + 1 && (x3 == zero + zero && (zero == 0 && (x >= 0 && y >= 0))))))) ==> _v == x + y
Instantiated axioms:
All assumptions:
!(x <= 0), !(y <= 0), !(y != x && y <= x), _v == x3 + 1, x3 == zero + zero, zero == 0, x >= 0, y >= 0
RHS: _v == x + y
assumption !(x <= 0) && (!(y <= 0) && (!(y != x && y <= x) && (_v == x3 + 1 && (x3 == zero + zero && (zero == 0 && (x >= 0 && y >= 0))))))
mustHave !(_v == x + y)
qualsList [0 != x
          ,0 != y
          ,y != x
          ,0 <= x
          ,0 <= y
          ,x <= y
          ,y <= x]
Optimal valuations:
Pruned valuations:
Diffs: (0)
TYPE ERROR: Cannot find sufficiently strong refinements
when checking inc (add zero
                     zero) :: {Int|_v == x + y} in
\x . \y . 
    if y <= 0
      then x
      else 
        if x <= 0
          then y
          else 
            if (y != x) && (y <= x)
              then add y x
              else inc (add zero zero)
INSTANTIATE x0:{Int|_v >= 0 && (_v >= 0 && _v < x)} -> y:{Int|_v >= 0} -> {Int|_v == x0 + y}
INTO x3:{Int|_v >= 0 && (_v >= 0 && _v < x)} -> x4:{Int|_v >= 0} -> {Int|_v == x3 + x4}
Trying add
Adding constraint add, x, y C1, C3, C5, C6 |- x3:Int -> x4:Int -> {Int|False} <: x:{Int|False} -> y:{Int|False} -> Int ()
Checking add :: X3:_ -> X2:_ -> {Int|_v == x + y} in
\x . \y . 
    if y <= 0
      then x
      else 
        if x <= 0
          then y
          else 
            if (y != x) && (y <= x)
              then add y x
              else ?? ?? ??
Adding constraint add, x, y C1, C3, C5, C6 |- x3:{Int|_v >= 0 && (_v >= 0 && _v < x)} -> x4:{Int|_v >= 0} -> {Int|_v == x3 + x4} <: X3:_ -> X2:_ -> {Int|_v == x + y} ()
Adding constraint add, x, y C1, C3, C5, C6 |- x3:{Int|_v >= 0 && (_v >= 0 && _v < x)} -> x4:{Int|_v >= 0} -> {Int|_v == x3 + x4} /\ X3:_ -> X2:_ -> {Int|_v == x + y} ()
Typing Constraints
add, x, y C1, C3, C5, C6 |- x3:{Int|_v >= 0 && (_v >= 0 && _v < x)} -> x4:{Int|_v >= 0} -> {Int|_v == x3 + x4} /\ X3:_ -> X2:_ -> {Int|_v == x + y} ()
add, x, y C1, C3, C5, C6 |- x3:{Int|_v >= 0 && (_v >= 0 && _v < x)} -> x4:{Int|_v >= 0} -> {Int|_v == x3 + x4} <: X3:_ -> X2:_ -> {Int|_v == x + y} ()
add, x, y C1, C3, C5, C6 |- x3:Int -> x4:Int -> {Int|False} <: x:{Int|False} -> y:{Int|False} -> Int ()
add, x, y |- C6
Type assignment
Simple Constraints
add, x, y |- C6
add, x, y C1, C3, C5, C6 |- {Int|False} <: Int ()
add, x, y C1, C3, C5, C6 |- {Int|False} <: Int ()
add, x, y C1, C3, C5, C6 |- {Int|False} <: Int ()
X2, X3, add, x, y C1, C3, C5, C6 |- {Int|_v == X3 + X2} <: {Int|_v == x + y} ()
add, x, x3, x4, y C1, C3, C5, C6 |- {Int|_v == x3 + x4} /\ {Int|_v == x + y} ()
Pred assignment
After process simple constraints
add, x, x3, x4, y C1, C3, C5, C6 |- {Int|_v == x3 + x4} /\ {Int|_v == x + y} ()
X2, X3, add, x, y C1, C3, C5, C6 |- {Int|_v == X3 + X2} <: {Int|_v == x + y} ()
Constraints
  False ==> _v == x + y
QMap
  C0 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C1 -> {!(y <= 0)}
  C2 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C3 -> {!(x <= 0)}
  C4 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C5 -> {!(y != x && y <= x)}
  C6 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
Checking consistency
  C1 && (C3 && (C5 && (C6 && (_v == x + y && (_v == x3 + x4 && (x >= 0 && (x4 >= 0 && (y >= 0 && (x3 >= 0 && (x3 >= 0 && x3 < x))))))))))
Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (6 0)
Remaining Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (6 0)
Trying x
Checking x :: {Int|_v >= 0 && (_v >= 0 && _v < x)} in
\x . \y . 
    if y <= 0
      then x
      else 
        if x <= 0
          then y
          else 
            if (y != x) && (y <= x)
              then add y x
              else add ?? ??
Adding constraint add, x, y C1, C3, C5, C6 |- {Int|_v == x} <: {Int|_v >= 0 && (_v >= 0 && _v < x)} ()
Typing Constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == x} <: {Int|_v >= 0 && (_v >= 0 && _v < x)} ()
Type assignment
Simple Constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == x} <: {Int|_v >= 0 && (_v >= 0 && _v < x)} ()
Pred assignment
After process simple constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == x} <: {Int|_v >= 0 && (_v >= 0 && _v < x)} ()
Constraints
  C1 && (C3 && (C5 && (C6 && (_v == x && (x >= 0 && y >= 0))))) ==> _v >= 0 && (_v >= 0 && _v < x)
QMap
  C0 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C1 -> {!(y <= 0)}
  C2 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C3 -> {!(x <= 0)}
  C4 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C5 -> {!(y != x && y <= x)}
  C6 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (6 1)
Chosen candidate: 0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (6 1)
Invalid Constraint: C1 && (C3 && (C5 && (C6 && (_v == x && (x >= 0 && y >= 0))))) ==> _v >= 0 && (_v >= 0 && _v < x)
Strengthening: C1 && (C3 && (C5 && (C6 && (_v == x && (x >= 0 && y >= 0))))) ==> _v >= 0 && (_v >= 0 && _v < x)
Instantiated axioms:
All assumptions:
!(x <= 0), !(y <= 0), !(y != x && y <= x), _v == x, x >= 0, y >= 0
RHS: _v >= 0 && (_v >= 0 && _v < x)
assumption !(x <= 0) && (!(y <= 0) && (!(y != x && y <= x) && (_v == x && (x >= 0 && y >= 0))))
mustHave !(_v >= 0 && (_v >= 0 && _v < x))
qualsList [0 != x
          ,0 != y
          ,y != x
          ,0 <= x
          ,0 <= y
          ,x <= y
          ,y <= x]
Optimal valuations:
Pruned valuations:
Diffs: (0)
TYPE ERROR: Cannot find sufficiently strong refinements
when checking x ::
{Int|_v >= 0 && (_v >= 0 && _v < x)}
in
\x . \y . 
    if y <= 0
      then x
      else 
        if x <= 0
          then y
          else 
            if (y != x) && (y <= x)
              then add y x
              else add x ??
Trying y
Checking y :: {Int|_v >= 0 && (_v >= 0 && _v < x)} in
\x . \y . 
    if y <= 0
      then x
      else 
        if x <= 0
          then y
          else 
            if (y != x) && (y <= x)
              then add y x
              else add ?? ??
Adding constraint add, x, y C1, C3, C5, C6 |- {Int|_v == y} <: {Int|_v >= 0 && (_v >= 0 && _v < x)} ()
Typing Constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == y} <: {Int|_v >= 0 && (_v >= 0 && _v < x)} ()
Type assignment
Simple Constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == y} <: {Int|_v >= 0 && (_v >= 0 && _v < x)} ()
Pred assignment
After process simple constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == y} <: {Int|_v >= 0 && (_v >= 0 && _v < x)} ()
Constraints
  C1 && (C3 && (C5 && (C6 && (_v == y && (x >= 0 && y >= 0))))) ==> _v >= 0 && (_v >= 0 && _v < x)
QMap
  C0 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C1 -> {!(y <= 0)}
  C2 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C3 -> {!(x <= 0)}
  C4 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C5 -> {!(y != x && y <= x)}
  C6 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (6 1)
Chosen candidate: 0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (6 1)
Invalid Constraint: C1 && (C3 && (C5 && (C6 && (_v == y && (x >= 0 && y >= 0))))) ==> _v >= 0 && (_v >= 0 && _v < x)
Strengthening: C1 && (C3 && (C5 && (C6 && (_v == y && (x >= 0 && y >= 0))))) ==> _v >= 0 && (_v >= 0 && _v < x)
Instantiated axioms:
All assumptions:
!(x <= 0), !(y <= 0), !(y != x && y <= x), _v == y, x >= 0, y >= 0
RHS: _v >= 0 && (_v >= 0 && _v < x)
assumption !(x <= 0) && (!(y <= 0) && (!(y != x && y <= x) && (_v == y && (x >= 0 && y >= 0))))
mustHave !(_v >= 0 && (_v >= 0 && _v < x))
qualsList [0 != x
          ,0 != y
          ,y != x
          ,0 <= x
          ,0 <= y
          ,x <= y
          ,y <= x]
Optimal valuations:
Pruned valuations:
Diffs: (0)
TYPE ERROR: Cannot find sufficiently strong refinements
when checking y ::
{Int|_v >= 0 && (_v >= 0 && _v < x)}
in
\x . \y . 
    if y <= 0
      then x
      else 
        if x <= 0
          then y
          else 
            if (y != x) && (y <= x)
              then add y x
              else add y ??
Trying zero
Checking zero :: {Int|_v >= 0 && (_v >= 0 && _v < x)} in
\x . \y . 
    if y <= 0
      then x
      else 
        if x <= 0
          then y
          else 
            if (y != x) && (y <= x)
              then add y x
              else add ?? ??
Adding constraint add, x, y C1, C3, C5, C6 |- {Int|_v == zero} <: {Int|_v >= 0 && (_v >= 0 && _v < x)} ()
Typing Constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == zero} <: {Int|_v >= 0 && (_v >= 0 && _v < x)} ()
Type assignment
Simple Constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == zero} <: {Int|_v >= 0 && (_v >= 0 && _v < x)} ()
Pred assignment
After process simple constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == zero} <: {Int|_v >= 0 && (_v >= 0 && _v < x)} ()
Constraints
  C1 && (C3 && (C5 && (C6 && (_v == zero && (zero == 0 && (x >= 0 && y >= 0)))))) ==> _v >= 0 && (_v >= 0 && _v < x)
QMap
  C0 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C1 -> {!(y <= 0)}
  C2 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C3 -> {!(x <= 0)}
  C4 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C5 -> {!(y != x && y <= x)}
  C6 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
Checking consistency
Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (7 0)
Remaining Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (7 0)
Synthesized argument zero of type {Int|_v == zero}
Checking add
           zero :: X2:_ -> {Int|_v == x + y} in
\x . \y . 
    if y <= 0
      then x
      else 
        if x <= 0
          then y
          else 
            if (y != x) && (y <= x)
              then add y x
              else ?? ??
Adding constraint add, x, y C1, C3, C5, C6 |- x4:{Int|_v >= 0} -> {Int|_v == zero + x4} <: X2:_ -> {Int|_v == x + y} ()
Adding constraint add, x, y C1, C3, C5, C6 |- x4:{Int|_v >= 0} -> {Int|_v == zero + x4} /\ X2:_ -> {Int|_v == x + y} ()
Typing Constraints
add, x, y C1, C3, C5, C6 |- x4:{Int|_v >= 0} -> {Int|_v == zero + x4} /\ X2:_ -> {Int|_v == x + y} ()
add, x, y C1, C3, C5, C6 |- x4:{Int|_v >= 0} -> {Int|_v == zero + x4} <: X2:_ -> {Int|_v == x + y} ()
Type assignment
Simple Constraints
X2, add, x, y C1, C3, C5, C6 |- {Int|_v == zero + X2} <: {Int|_v == x + y} ()
add, x, x4, y C1, C3, C5, C6 |- {Int|_v == zero + x4} /\ {Int|_v == x + y} ()
Pred assignment
After process simple constraints
add, x, x4, y C1, C3, C5, C6 |- {Int|_v == zero + x4} /\ {Int|_v == x + y} ()
X2, add, x, y C1, C3, C5, C6 |- {Int|_v == zero + X2} <: {Int|_v == x + y} ()
Constraints
  False ==> _v == x + y
QMap
  C0 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C1 -> {!(y <= 0)}
  C2 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C3 -> {!(x <= 0)}
  C4 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C5 -> {!(y != x && y <= x)}
  C6 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
Checking consistency
  C1 && (C3 && (C5 && (C6 && (_v == x + y && (_v == zero + x4 && (zero == 0 && (x >= 0 && (x4 >= 0 && y >= 0))))))))
Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (7 0)
Remaining Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (7 0)
INSTANTIATE x:{Int|_v >= 0} -> {Int|_v == x - 1}
INTO x5:{Int|_v >= 0} -> {Int|_v == x5 - 1}
Trying dec
Checking dec :: X4:_ -> {Int|_v >= 0} in
\x . \y . 
    if y <= 0
      then x
      else 
        if x <= 0
          then y
          else 
            if (y != x) && (y <= x)
              then add y x
              else add zero (?? ??)
Adding constraint add, x, y C1, C3, C5, C6 |- x5:{Int|_v >= 0} -> {Int|_v == x5 - 1} <: X4:_ -> {Int|_v >= 0} ()
Adding constraint add, x, y C1, C3, C5, C6 |- x5:{Int|_v >= 0} -> {Int|_v == x5 - 1} /\ X4:_ -> {Int|_v >= 0} ()
Typing Constraints
add, x, y C1, C3, C5, C6 |- x5:{Int|_v >= 0} -> {Int|_v == x5 - 1} /\ X4:_ -> {Int|_v >= 0} ()
add, x, y C1, C3, C5, C6 |- x5:{Int|_v >= 0} -> {Int|_v == x5 - 1} <: X4:_ -> {Int|_v >= 0} ()
Type assignment
Simple Constraints
X4, add, x, y C1, C3, C5, C6 |- {Int|_v == X4 - 1} <: {Int|_v >= 0} ()
add, x, x5, y C1, C3, C5, C6 |- {Int|_v == x5 - 1} /\ {Int|_v >= 0} ()
Pred assignment
After process simple constraints
add, x, x5, y C1, C3, C5, C6 |- {Int|_v == x5 - 1} /\ {Int|_v >= 0} ()
X4, add, x, y C1, C3, C5, C6 |- {Int|_v == X4 - 1} <: {Int|_v >= 0} ()
Constraints
  False ==> _v >= 0
QMap
  C0 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C1 -> {!(y <= 0)}
  C2 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C3 -> {!(x <= 0)}
  C4 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C5 -> {!(y != x && y <= x)}
  C6 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
Checking consistency
  C1 && (C3 && (C5 && (C6 && (_v == x5 - 1 && (_v >= 0 && (x >= 0 && (x5 >= 0 && y >= 0)))))))
Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (8 0)
Remaining Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (8 0)
Trying x
Checking x :: {Int|_v >= 0} in
\x . \y . 
    if y <= 0
      then x
      else 
        if x <= 0
          then y
          else 
            if (y != x) && (y <= x)
              then add y x
              else add zero (dec ??)
Adding constraint add, x, y C1, C3, C5, C6 |- {Int|_v == x} <: {Int|_v >= 0} ()
Typing Constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == x} <: {Int|_v >= 0} ()
Type assignment
Simple Constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == x} <: {Int|_v >= 0} ()
Pred assignment
After process simple constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == x} <: {Int|_v >= 0} ()
Constraints
  C1 && (C3 && (C5 && (C6 && (_v == x && (x >= 0 && y >= 0))))) ==> _v >= 0
QMap
  C0 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C1 -> {!(y <= 0)}
  C2 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C3 -> {!(x <= 0)}
  C4 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C5 -> {!(y != x && y <= x)}
  C6 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
Checking consistency
Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (9 0)
Remaining Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (9 0)
Synthesized argument x of type {Int|_v == x}
Checking dec
           x :: {Int|_v >= 0} in
\x . \y . 
    if y <= 0
      then x
      else 
        if x <= 0
          then y
          else 
            if (y != x) && (y <= x)
              then add y x
              else add zero ??
Adding constraint add, x, y C1, C3, C5, C6 |- {Int|_v == x - 1} <: {Int|_v >= 0} ()
Typing Constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == x - 1} <: {Int|_v >= 0} ()
Type assignment
Simple Constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == x - 1} <: {Int|_v >= 0} ()
Pred assignment
After process simple constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == x - 1} <: {Int|_v >= 0} ()
Constraints
  C1 && (C3 && (C5 && (C6 && (_v == x - 1 && (x >= 0 && y >= 0))))) ==> _v >= 0
QMap
  C0 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C1 -> {!(y <= 0)}
  C2 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C3 -> {!(x <= 0)}
  C4 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C5 -> {!(y != x && y <= x)}
  C6 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
Checking consistency
Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (10 0)
Remaining Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (10 0)
Synthesized argument dec
                       x of type {Int|_v == x - 1}
Checking add zero (dec
                     x) :: {Int|_v == x + y} in
\x . \y . 
    if y <= 0
      then x
      else 
        if x <= 0
          then y
          else 
            if (y != x) && (y <= x)
              then add y x
              else ??
Adding constraint add, x, y C1, C3, C5, C6 |- LET x4:({Int|_v == x - 1}) IN {Int|_v == zero + x4} <: {Int|_v == x + y} ()
Typing Constraints
add, x, y C1, C3, C5, C6 |- LET x4:({Int|_v == x - 1}) IN {Int|_v == zero + x4} <: {Int|_v == x + y} ()
Type assignment
Simple Constraints
add, x, x4, y C1, C3, C5, C6 |- {Int|_v == zero + x4} <: {Int|_v == x + y} ()
Pred assignment
After process simple constraints
add, x, x4, y C1, C3, C5, C6 |- {Int|_v == zero + x4} <: {Int|_v == x + y} ()
Constraints
  C1 && (C3 && (C5 && (C6 && (_v == zero + x4 && (x4 == x - 1 && (zero == 0 && (x >= 0 && y >= 0))))))) ==> _v == x + y
QMap
  C0 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C1 -> {!(y <= 0)}
  C2 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C3 -> {!(x <= 0)}
  C4 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C5 -> {!(y != x && y <= x)}
  C6 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (10 1)
Chosen candidate: 0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (10 1)
Invalid Constraint: C1 && (C3 && (C5 && (C6 && (_v == zero + x4 && (x4 == x - 1 && (zero == 0 && (x >= 0 && y >= 0))))))) ==> _v == x + y
Strengthening: C1 && (C3 && (C5 && (C6 && (_v == zero + x4 && (x4 == x - 1 && (zero == 0 && (x >= 0 && y >= 0))))))) ==> _v == x + y
Instantiated axioms:
All assumptions:
!(x <= 0), !(y <= 0), !(y != x && y <= x), _v == zero + x4, x4 == x - 1, zero == 0, x >= 0, y >= 0
RHS: _v == x + y
assumption !(x <= 0) && (!(y <= 0) && (!(y != x && y <= x) && (_v == zero + x4 && (x4 == x - 1 && (zero == 0 && (x >= 0 && y >= 0))))))
mustHave !(_v == x + y)
qualsList [0 != x
          ,0 != y
          ,y != x
          ,0 <= x
          ,0 <= y
          ,x <= y
          ,y <= x]
Optimal valuations:
Pruned valuations:
Diffs: (0)
TYPE ERROR: Cannot find sufficiently strong refinements
when checking add zero (dec x)
:: {Int|_v == x + y} in
\x . \y . 
    if y <= 0
      then x
      else 
        if x <= 0
          then y
          else 
            if (y != x) && (y <= x)
              then add y x
              else add zero (dec x)
Trying y
Checking y :: {Int|_v >= 0} in
\x . \y . 
    if y <= 0
      then x
      else 
        if x <= 0
          then y
          else 
            if (y != x) && (y <= x)
              then add y x
              else add zero (dec ??)
Adding constraint add, x, y C1, C3, C5, C6 |- {Int|_v == y} <: {Int|_v >= 0} ()
Typing Constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == y} <: {Int|_v >= 0} ()
Type assignment
Simple Constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == y} <: {Int|_v >= 0} ()
Pred assignment
After process simple constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == y} <: {Int|_v >= 0} ()
Constraints
  C1 && (C3 && (C5 && (C6 && (_v == y && (x >= 0 && y >= 0))))) ==> _v >= 0
QMap
  C0 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C1 -> {!(y <= 0)}
  C2 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C3 -> {!(x <= 0)}
  C4 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C5 -> {!(y != x && y <= x)}
  C6 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
Checking consistency
Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (9 0)
Remaining Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (9 0)
Synthesized argument y of type {Int|_v == y}
Checking dec
           y :: {Int|_v >= 0} in
\x . \y . 
    if y <= 0
      then x
      else 
        if x <= 0
          then y
          else 
            if (y != x) && (y <= x)
              then add y x
              else add zero ??
Adding constraint add, x, y C1, C3, C5, C6 |- {Int|_v == y - 1} <: {Int|_v >= 0} ()
Typing Constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == y - 1} <: {Int|_v >= 0} ()
Type assignment
Simple Constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == y - 1} <: {Int|_v >= 0} ()
Pred assignment
After process simple constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == y - 1} <: {Int|_v >= 0} ()
Constraints
  C1 && (C3 && (C5 && (C6 && (_v == y - 1 && (x >= 0 && y >= 0))))) ==> _v >= 0
QMap
  C0 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C1 -> {!(y <= 0)}
  C2 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C3 -> {!(x <= 0)}
  C4 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C5 -> {!(y != x && y <= x)}
  C6 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
Checking consistency
Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (10 0)
Remaining Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (10 0)
Synthesized argument dec
                       y of type {Int|_v == y - 1}
Checking add zero (dec
                     y) :: {Int|_v == x + y} in
\x . \y . 
    if y <= 0
      then x
      else 
        if x <= 0
          then y
          else 
            if (y != x) && (y <= x)
              then add y x
              else ??
Adding constraint add, x, y C1, C3, C5, C6 |- LET x4:({Int|_v == y - 1}) IN {Int|_v == zero + x4} <: {Int|_v == x + y} ()
Typing Constraints
add, x, y C1, C3, C5, C6 |- LET x4:({Int|_v == y - 1}) IN {Int|_v == zero + x4} <: {Int|_v == x + y} ()
Type assignment
Simple Constraints
add, x, x4, y C1, C3, C5, C6 |- {Int|_v == zero + x4} <: {Int|_v == x + y} ()
Pred assignment
After process simple constraints
add, x, x4, y C1, C3, C5, C6 |- {Int|_v == zero + x4} <: {Int|_v == x + y} ()
Constraints
  C1 && (C3 && (C5 && (C6 && (_v == zero + x4 && (x4 == y - 1 && (zero == 0 && (x >= 0 && y >= 0))))))) ==> _v == x + y
QMap
  C0 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C1 -> {!(y <= 0)}
  C2 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C3 -> {!(x <= 0)}
  C4 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C5 -> {!(y != x && y <= x)}
  C6 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (10 1)
Chosen candidate: 0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (10 1)
Invalid Constraint: C1 && (C3 && (C5 && (C6 && (_v == zero + x4 && (x4 == y - 1 && (zero == 0 && (x >= 0 && y >= 0))))))) ==> _v == x + y
Strengthening: C1 && (C3 && (C5 && (C6 && (_v == zero + x4 && (x4 == y - 1 && (zero == 0 && (x >= 0 && y >= 0))))))) ==> _v == x + y
Instantiated axioms:
All assumptions:
!(x <= 0), !(y <= 0), !(y != x && y <= x), _v == zero + x4, x4 == y - 1, zero == 0, x >= 0, y >= 0
RHS: _v == x + y
assumption !(x <= 0) && (!(y <= 0) && (!(y != x && y <= x) && (_v == zero + x4 && (x4 == y - 1 && (zero == 0 && (x >= 0 && y >= 0))))))
mustHave !(_v == x + y)
qualsList [0 != x
          ,0 != y
          ,y != x
          ,0 <= x
          ,0 <= y
          ,x <= y
          ,y <= x]
Optimal valuations:
Pruned valuations:
Diffs: (0)
TYPE ERROR: Cannot find sufficiently strong refinements
when checking add zero (dec y)
:: {Int|_v == x + y} in
\x . \y . 
    if y <= 0
      then x
      else 
        if x <= 0
          then y
          else 
            if (y != x) && (y <= x)
              then add y x
              else add zero (dec y)
Trying zero
Checking zero :: {Int|_v >= 0} in
\x . \y . 
    if y <= 0
      then x
      else 
        if x <= 0
          then y
          else 
            if (y != x) && (y <= x)
              then add y x
              else add zero (dec ??)
Adding constraint add, x, y C1, C3, C5, C6 |- {Int|_v == zero} <: {Int|_v >= 0} ()
Typing Constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == zero} <: {Int|_v >= 0} ()
Type assignment
Simple Constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == zero} <: {Int|_v >= 0} ()
Pred assignment
After process simple constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == zero} <: {Int|_v >= 0} ()
Constraints
  C1 && (C3 && (C5 && (C6 && (_v == zero && (zero == 0 && (x >= 0 && y >= 0)))))) ==> _v >= 0
QMap
  C0 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C1 -> {!(y <= 0)}
  C2 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C3 -> {!(x <= 0)}
  C4 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C5 -> {!(y != x && y <= x)}
  C6 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
Checking consistency
Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (9 0)
Remaining Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (9 0)
Synthesized argument zero of type {Int|_v == zero}
Checking dec
           zero :: {Int|_v >= 0} in
\x . \y . 
    if y <= 0
      then x
      else 
        if x <= 0
          then y
          else 
            if (y != x) && (y <= x)
              then add y x
              else add zero ??
Adding constraint add, x, y C1, C3, C5, C6 |- {Int|_v == zero - 1} <: {Int|_v >= 0} ()
Typing Constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == zero - 1} <: {Int|_v >= 0} ()
Type assignment
Simple Constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == zero - 1} <: {Int|_v >= 0} ()
Pred assignment
After process simple constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == zero - 1} <: {Int|_v >= 0} ()
Constraints
  C1 && (C3 && (C5 && (C6 && (_v == zero - 1 && (zero == 0 && (x >= 0 && y >= 0)))))) ==> _v >= 0
QMap
  C0 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C1 -> {!(y <= 0)}
  C2 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C3 -> {!(x <= 0)}
  C4 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C5 -> {!(y != x && y <= x)}
  C6 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (9 1)
Chosen candidate: 0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (9 1)
Invalid Constraint: C1 && (C3 && (C5 && (C6 && (_v == zero - 1 && (zero == 0 && (x >= 0 && y >= 0)))))) ==> _v >= 0
Strengthening: C1 && (C3 && (C5 && (C6 && (_v == zero - 1 && (zero == 0 && (x >= 0 && y >= 0)))))) ==> _v >= 0
Instantiated axioms:
All assumptions:
!(x <= 0), !(y <= 0), !(y != x && y <= x), _v == zero - 1, zero == 0, x >= 0, y >= 0
RHS: _v >= 0
assumption !(x <= 0) && (!(y <= 0) && (!(y != x && y <= x) && (_v == zero - 1 && (zero == 0 && (x >= 0 && y >= 0)))))
mustHave !(_v >= 0)
qualsList [0 != x
          ,0 != y
          ,y != x
          ,0 <= x
          ,0 <= y
          ,x <= y
          ,y <= x]
Optimal valuations:
Pruned valuations:
Diffs: (0)
TYPE ERROR: Cannot find sufficiently strong refinements
when checking dec zero ::
{Int|_v >= 0} in
\x . \y . 
    if y <= 0
      then x
      else 
        if x <= 0
          then y
          else 
            if (y != x) && (y <= x)
              then add y x
              else add zero (dec zero)
INSTANTIATE x:{Int|_v >= 0} -> {Int|_v == x + 1}
INTO x5:{Int|_v >= 0} -> {Int|_v == x5 + 1}
Trying inc
Checking inc :: X4:_ -> {Int|_v >= 0} in
\x . \y . 
    if y <= 0
      then x
      else 
        if x <= 0
          then y
          else 
            if (y != x) && (y <= x)
              then add y x
              else add zero (?? ??)
Adding constraint add, x, y C1, C3, C5, C6 |- x5:{Int|_v >= 0} -> {Int|_v == x5 + 1} <: X4:_ -> {Int|_v >= 0} ()
Adding constraint add, x, y C1, C3, C5, C6 |- x5:{Int|_v >= 0} -> {Int|_v == x5 + 1} /\ X4:_ -> {Int|_v >= 0} ()
Typing Constraints
add, x, y C1, C3, C5, C6 |- x5:{Int|_v >= 0} -> {Int|_v == x5 + 1} /\ X4:_ -> {Int|_v >= 0} ()
add, x, y C1, C3, C5, C6 |- x5:{Int|_v >= 0} -> {Int|_v == x5 + 1} <: X4:_ -> {Int|_v >= 0} ()
Type assignment
Simple Constraints
X4, add, x, y C1, C3, C5, C6 |- {Int|_v == X4 + 1} <: {Int|_v >= 0} ()
add, x, x5, y C1, C3, C5, C6 |- {Int|_v == x5 + 1} /\ {Int|_v >= 0} ()
Pred assignment
After process simple constraints
add, x, x5, y C1, C3, C5, C6 |- {Int|_v == x5 + 1} /\ {Int|_v >= 0} ()
X4, add, x, y C1, C3, C5, C6 |- {Int|_v == X4 + 1} <: {Int|_v >= 0} ()
Constraints
  False ==> _v >= 0
QMap
  C0 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C1 -> {!(y <= 0)}
  C2 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C3 -> {!(x <= 0)}
  C4 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C5 -> {!(y != x && y <= x)}
  C6 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
Checking consistency
  C1 && (C3 && (C5 && (C6 && (_v == x5 + 1 && (_v >= 0 && (x >= 0 && (x5 >= 0 && y >= 0)))))))
Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (8 0)
Remaining Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (8 0)
Trying x
Checking x :: {Int|_v >= 0} in
\x . \y . 
    if y <= 0
      then x
      else 
        if x <= 0
          then y
          else 
            if (y != x) && (y <= x)
              then add y x
              else add zero (inc ??)
Adding constraint add, x, y C1, C3, C5, C6 |- {Int|_v == x} <: {Int|_v >= 0} ()
Typing Constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == x} <: {Int|_v >= 0} ()
Type assignment
Simple Constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == x} <: {Int|_v >= 0} ()
Pred assignment
After process simple constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == x} <: {Int|_v >= 0} ()
Constraints
  C1 && (C3 && (C5 && (C6 && (_v == x && (x >= 0 && y >= 0))))) ==> _v >= 0
QMap
  C0 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C1 -> {!(y <= 0)}
  C2 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C3 -> {!(x <= 0)}
  C4 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C5 -> {!(y != x && y <= x)}
  C6 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
Checking consistency
Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (9 0)
Remaining Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (9 0)
Synthesized argument x of type {Int|_v == x}
Checking inc
           x :: {Int|_v >= 0} in
\x . \y . 
    if y <= 0
      then x
      else 
        if x <= 0
          then y
          else 
            if (y != x) && (y <= x)
              then add y x
              else add zero ??
Adding constraint add, x, y C1, C3, C5, C6 |- {Int|_v == x + 1} <: {Int|_v >= 0} ()
Typing Constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == x + 1} <: {Int|_v >= 0} ()
Type assignment
Simple Constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == x + 1} <: {Int|_v >= 0} ()
Pred assignment
After process simple constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == x + 1} <: {Int|_v >= 0} ()
Constraints
  C1 && (C3 && (C5 && (C6 && (_v == x + 1 && (x >= 0 && y >= 0))))) ==> _v >= 0
QMap
  C0 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C1 -> {!(y <= 0)}
  C2 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C3 -> {!(x <= 0)}
  C4 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C5 -> {!(y != x && y <= x)}
  C6 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
Checking consistency
Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (10 0)
Remaining Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (10 0)
Synthesized argument inc
                       x of type {Int|_v == x + 1}
Checking add zero (inc
                     x) :: {Int|_v == x + y} in
\x . \y . 
    if y <= 0
      then x
      else 
        if x <= 0
          then y
          else 
            if (y != x) && (y <= x)
              then add y x
              else ??
Adding constraint add, x, y C1, C3, C5, C6 |- LET x4:({Int|_v == x + 1}) IN {Int|_v == zero + x4} <: {Int|_v == x + y} ()
Typing Constraints
add, x, y C1, C3, C5, C6 |- LET x4:({Int|_v == x + 1}) IN {Int|_v == zero + x4} <: {Int|_v == x + y} ()
Type assignment
Simple Constraints
add, x, x4, y C1, C3, C5, C6 |- {Int|_v == zero + x4} <: {Int|_v == x + y} ()
Pred assignment
After process simple constraints
add, x, x4, y C1, C3, C5, C6 |- {Int|_v == zero + x4} <: {Int|_v == x + y} ()
Constraints
  C1 && (C3 && (C5 && (C6 && (_v == zero + x4 && (x4 == x + 1 && (zero == 0 && (x >= 0 && y >= 0))))))) ==> _v == x + y
QMap
  C0 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C1 -> {!(y <= 0)}
  C2 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C3 -> {!(x <= 0)}
  C4 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C5 -> {!(y != x && y <= x)}
  C6 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (10 1)
Chosen candidate: 0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (10 1)
Invalid Constraint: C1 && (C3 && (C5 && (C6 && (_v == zero + x4 && (x4 == x + 1 && (zero == 0 && (x >= 0 && y >= 0))))))) ==> _v == x + y
Strengthening: C1 && (C3 && (C5 && (C6 && (_v == zero + x4 && (x4 == x + 1 && (zero == 0 && (x >= 0 && y >= 0))))))) ==> _v == x + y
Instantiated axioms:
All assumptions:
!(x <= 0), !(y <= 0), !(y != x && y <= x), _v == zero + x4, x4 == x + 1, zero == 0, x >= 0, y >= 0
RHS: _v == x + y
assumption !(x <= 0) && (!(y <= 0) && (!(y != x && y <= x) && (_v == zero + x4 && (x4 == x + 1 && (zero == 0 && (x >= 0 && y >= 0))))))
mustHave !(_v == x + y)
qualsList [0 != x
          ,0 != y
          ,y != x
          ,0 <= x
          ,0 <= y
          ,x <= y
          ,y <= x]
Optimal valuations:
Pruned valuations:
Diffs: (0)
TYPE ERROR: Cannot find sufficiently strong refinements
when checking add zero (inc x)
:: {Int|_v == x + y} in
\x . \y . 
    if y <= 0
      then x
      else 
        if x <= 0
          then y
          else 
            if (y != x) && (y <= x)
              then add y x
              else add zero (inc x)
Trying y
Checking y :: {Int|_v >= 0} in
\x . \y . 
    if y <= 0
      then x
      else 
        if x <= 0
          then y
          else 
            if (y != x) && (y <= x)
              then add y x
              else add zero (inc ??)
Adding constraint add, x, y C1, C3, C5, C6 |- {Int|_v == y} <: {Int|_v >= 0} ()
Typing Constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == y} <: {Int|_v >= 0} ()
Type assignment
Simple Constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == y} <: {Int|_v >= 0} ()
Pred assignment
After process simple constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == y} <: {Int|_v >= 0} ()
Constraints
  C1 && (C3 && (C5 && (C6 && (_v == y && (x >= 0 && y >= 0))))) ==> _v >= 0
QMap
  C0 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C1 -> {!(y <= 0)}
  C2 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C3 -> {!(x <= 0)}
  C4 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C5 -> {!(y != x && y <= x)}
  C6 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
Checking consistency
Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (9 0)
Remaining Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (9 0)
Synthesized argument y of type {Int|_v == y}
Checking inc
           y :: {Int|_v >= 0} in
\x . \y . 
    if y <= 0
      then x
      else 
        if x <= 0
          then y
          else 
            if (y != x) && (y <= x)
              then add y x
              else add zero ??
Adding constraint add, x, y C1, C3, C5, C6 |- {Int|_v == y + 1} <: {Int|_v >= 0} ()
Typing Constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == y + 1} <: {Int|_v >= 0} ()
Type assignment
Simple Constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == y + 1} <: {Int|_v >= 0} ()
Pred assignment
After process simple constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == y + 1} <: {Int|_v >= 0} ()
Constraints
  C1 && (C3 && (C5 && (C6 && (_v == y + 1 && (x >= 0 && y >= 0))))) ==> _v >= 0
QMap
  C0 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C1 -> {!(y <= 0)}
  C2 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C3 -> {!(x <= 0)}
  C4 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C5 -> {!(y != x && y <= x)}
  C6 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
Checking consistency
Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (10 0)
Remaining Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (10 0)
Synthesized argument inc
                       y of type {Int|_v == y + 1}
Checking add zero (inc
                     y) :: {Int|_v == x + y} in
\x . \y . 
    if y <= 0
      then x
      else 
        if x <= 0
          then y
          else 
            if (y != x) && (y <= x)
              then add y x
              else ??
Adding constraint add, x, y C1, C3, C5, C6 |- LET x4:({Int|_v == y + 1}) IN {Int|_v == zero + x4} <: {Int|_v == x + y} ()
Typing Constraints
add, x, y C1, C3, C5, C6 |- LET x4:({Int|_v == y + 1}) IN {Int|_v == zero + x4} <: {Int|_v == x + y} ()
Type assignment
Simple Constraints
add, x, x4, y C1, C3, C5, C6 |- {Int|_v == zero + x4} <: {Int|_v == x + y} ()
Pred assignment
After process simple constraints
add, x, x4, y C1, C3, C5, C6 |- {Int|_v == zero + x4} <: {Int|_v == x + y} ()
Constraints
  C1 && (C3 && (C5 && (C6 && (_v == zero + x4 && (x4 == y + 1 && (zero == 0 && (x >= 0 && y >= 0))))))) ==> _v == x + y
QMap
  C0 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C1 -> {!(y <= 0)}
  C2 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C3 -> {!(x <= 0)}
  C4 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C5 -> {!(y != x && y <= x)}
  C6 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (10 1)
Chosen candidate: 0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (10 1)
Invalid Constraint: C1 && (C3 && (C5 && (C6 && (_v == zero + x4 && (x4 == y + 1 && (zero == 0 && (x >= 0 && y >= 0))))))) ==> _v == x + y
Strengthening: C1 && (C3 && (C5 && (C6 && (_v == zero + x4 && (x4 == y + 1 && (zero == 0 && (x >= 0 && y >= 0))))))) ==> _v == x + y
Instantiated axioms:
All assumptions:
!(x <= 0), !(y <= 0), !(y != x && y <= x), _v == zero + x4, x4 == y + 1, zero == 0, x >= 0, y >= 0
RHS: _v == x + y
assumption !(x <= 0) && (!(y <= 0) && (!(y != x && y <= x) && (_v == zero + x4 && (x4 == y + 1 && (zero == 0 && (x >= 0 && y >= 0))))))
mustHave !(_v == x + y)
qualsList [0 != x
          ,0 != y
          ,y != x
          ,0 <= x
          ,0 <= y
          ,x <= y
          ,y <= x]
Optimal valuations:
Pruned valuations:
Diffs: (0)
TYPE ERROR: Cannot find sufficiently strong refinements
when checking add zero (inc y)
:: {Int|_v == x + y} in
\x . \y . 
    if y <= 0
      then x
      else 
        if x <= 0
          then y
          else 
            if (y != x) && (y <= x)
              then add y x
              else add zero (inc y)
Trying zero
Checking zero :: {Int|_v >= 0} in
\x . \y . 
    if y <= 0
      then x
      else 
        if x <= 0
          then y
          else 
            if (y != x) && (y <= x)
              then add y x
              else add zero (inc ??)
Adding constraint add, x, y C1, C3, C5, C6 |- {Int|_v == zero} <: {Int|_v >= 0} ()
Typing Constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == zero} <: {Int|_v >= 0} ()
Type assignment
Simple Constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == zero} <: {Int|_v >= 0} ()
Pred assignment
After process simple constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == zero} <: {Int|_v >= 0} ()
Constraints
  C1 && (C3 && (C5 && (C6 && (_v == zero && (zero == 0 && (x >= 0 && y >= 0)))))) ==> _v >= 0
QMap
  C0 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C1 -> {!(y <= 0)}
  C2 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C3 -> {!(x <= 0)}
  C4 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C5 -> {!(y != x && y <= x)}
  C6 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
Checking consistency
Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (9 0)
Remaining Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (9 0)
Synthesized argument zero of type {Int|_v == zero}
Checking inc
           zero :: {Int|_v >= 0} in
\x . \y . 
    if y <= 0
      then x
      else 
        if x <= 0
          then y
          else 
            if (y != x) && (y <= x)
              then add y x
              else add zero ??
Adding constraint add, x, y C1, C3, C5, C6 |- {Int|_v == zero + 1} <: {Int|_v >= 0} ()
Typing Constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == zero + 1} <: {Int|_v >= 0} ()
Type assignment
Simple Constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == zero + 1} <: {Int|_v >= 0} ()
Pred assignment
After process simple constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == zero + 1} <: {Int|_v >= 0} ()
Constraints
  C1 && (C3 && (C5 && (C6 && (_v == zero + 1 && (zero == 0 && (x >= 0 && y >= 0)))))) ==> _v >= 0
QMap
  C0 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C1 -> {!(y <= 0)}
  C2 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C3 -> {!(x <= 0)}
  C4 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C5 -> {!(y != x && y <= x)}
  C6 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
Checking consistency
Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (10 0)
Remaining Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (10 0)
Synthesized argument inc
                       zero of type {Int|_v == zero + 1}
Checking add zero (inc
                     zero) :: {Int|_v == x + y} in
\x . \y . 
    if y <= 0
      then x
      else 
        if x <= 0
          then y
          else 
            if (y != x) && (y <= x)
              then add y x
              else ??
Adding constraint add, x, y C1, C3, C5, C6 |- LET x4:({Int|_v == zero + 1}) IN {Int|_v == zero + x4} <: {Int|_v == x + y} ()
Typing Constraints
add, x, y C1, C3, C5, C6 |- LET x4:({Int|_v == zero + 1}) IN {Int|_v == zero + x4} <: {Int|_v == x + y} ()
Type assignment
Simple Constraints
add, x, x4, y C1, C3, C5, C6 |- {Int|_v == zero + x4} <: {Int|_v == x + y} ()
Pred assignment
After process simple constraints
add, x, x4, y C1, C3, C5, C6 |- {Int|_v == zero + x4} <: {Int|_v == x + y} ()
Constraints
  C1 && (C3 && (C5 && (C6 && (_v == zero + x4 && (x4 == zero + 1 && (zero == 0 && (x >= 0 && y >= 0))))))) ==> _v == x + y
QMap
  C0 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C1 -> {!(y <= 0)}
  C2 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C3 -> {!(x <= 0)}
  C4 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C5 -> {!(y != x && y <= x)}
  C6 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (10 1)
Chosen candidate: 0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (10 1)
Invalid Constraint: C1 && (C3 && (C5 && (C6 && (_v == zero + x4 && (x4 == zero + 1 && (zero == 0 && (x >= 0 && y >= 0))))))) ==> _v == x + y
Strengthening: C1 && (C3 && (C5 && (C6 && (_v == zero + x4 && (x4 == zero + 1 && (zero == 0 && (x >= 0 && y >= 0))))))) ==> _v == x + y
Instantiated axioms:
All assumptions:
!(x <= 0), !(y <= 0), !(y != x && y <= x), _v == zero + x4, x4 == zero + 1, zero == 0, x >= 0, y >= 0
RHS: _v == x + y
assumption !(x <= 0) && (!(y <= 0) && (!(y != x && y <= x) && (_v == zero + x4 && (x4 == zero + 1 && (zero == 0 && (x >= 0 && y >= 0))))))
mustHave !(_v == x + y)
qualsList [0 != x
          ,0 != y
          ,y != x
          ,0 <= x
          ,0 <= y
          ,x <= y
          ,y <= x]
Optimal valuations:
Pruned valuations:
Diffs: (0)
TYPE ERROR: Cannot find sufficiently strong refinements
when checking add zero (inc
                          zero) :: {Int|_v == x + y} in
\x . \y . 
    if y <= 0
      then x
      else 
        if x <= 0
          then y
          else 
            if (y != x) && (y <= x)
              then add y x
              else add zero (inc zero)
INSTANTIATE x0:{Int|_v >= 0 && (_v >= 0 && _v < x)} -> y:{Int|_v >= 0} -> {Int|_v == x0 + y}
INTO x5:{Int|_v >= 0 && (_v >= 0 && _v < x)} -> x6:{Int|_v >= 0} -> {Int|_v == x5 + x6}
Trying add
Adding constraint add, x, y C1, C3, C5, C6 |- x5:Int -> x6:Int -> {Int|False} <: x:{Int|False} -> y:{Int|False} -> Int ()
Checking add :: X5:_ -> X4:_ -> {Int|_v >= 0} in
\x . \y . 
    if y <= 0
      then x
      else 
        if x <= 0
          then y
          else 
            if (y != x) && (y <= x)
              then add y x
              else add zero (?? ?? ??)
Adding constraint add, x, y C1, C3, C5, C6 |- x5:{Int|_v >= 0 && (_v >= 0 && _v < x)} -> x6:{Int|_v >= 0} -> {Int|_v == x5 + x6} <: X5:_ -> X4:_ -> {Int|_v >= 0} ()
Adding constraint add, x, y C1, C3, C5, C6 |- x5:{Int|_v >= 0 && (_v >= 0 && _v < x)} -> x6:{Int|_v >= 0} -> {Int|_v == x5 + x6} /\ X5:_ -> X4:_ -> {Int|_v >= 0} ()
Typing Constraints
add, x, y C1, C3, C5, C6 |- x5:{Int|_v >= 0 && (_v >= 0 && _v < x)} -> x6:{Int|_v >= 0} -> {Int|_v == x5 + x6} /\ X5:_ -> X4:_ -> {Int|_v >= 0} ()
add, x, y C1, C3, C5, C6 |- x5:{Int|_v >= 0 && (_v >= 0 && _v < x)} -> x6:{Int|_v >= 0} -> {Int|_v == x5 + x6} <: X5:_ -> X4:_ -> {Int|_v >= 0} ()
add, x, y C1, C3, C5, C6 |- x5:Int -> x6:Int -> {Int|False} <: x:{Int|False} -> y:{Int|False} -> Int ()
Type assignment
Simple Constraints
add, x, y C1, C3, C5, C6 |- {Int|False} <: Int ()
add, x, y C1, C3, C5, C6 |- {Int|False} <: Int ()
add, x, y C1, C3, C5, C6 |- {Int|False} <: Int ()
X4, X5, add, x, y C1, C3, C5, C6 |- {Int|_v == X5 + X4} <: {Int|_v >= 0} ()
add, x, x5, x6, y C1, C3, C5, C6 |- {Int|_v == x5 + x6} /\ {Int|_v >= 0} ()
Pred assignment
After process simple constraints
add, x, x5, x6, y C1, C3, C5, C6 |- {Int|_v == x5 + x6} /\ {Int|_v >= 0} ()
X4, X5, add, x, y C1, C3, C5, C6 |- {Int|_v == X5 + X4} <: {Int|_v >= 0} ()
Constraints
  False ==> _v >= 0
QMap
  C0 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C1 -> {!(y <= 0)}
  C2 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C3 -> {!(x <= 0)}
  C4 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C5 -> {!(y != x && y <= x)}
  C6 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
Checking consistency
  C1 && (C3 && (C5 && (C6 && (_v == x5 + x6 && (_v >= 0 && (x >= 0 && (x6 >= 0 && (y >= 0 && (x5 >= 0 && (x5 >= 0 && x5 < x))))))))))
Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (8 0)
Remaining Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (8 0)
Trying x
Checking x :: {Int|_v >= 0 && (_v >= 0 && _v < x)} in
\x . \y . 
    if y <= 0
      then x
      else 
        if x <= 0
          then y
          else 
            if (y != x) && (y <= x)
              then add y x
              else add zero (add ?? ??)
Adding constraint add, x, y C1, C3, C5, C6 |- {Int|_v == x} <: {Int|_v >= 0 && (_v >= 0 && _v < x)} ()
Typing Constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == x} <: {Int|_v >= 0 && (_v >= 0 && _v < x)} ()
Type assignment
Simple Constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == x} <: {Int|_v >= 0 && (_v >= 0 && _v < x)} ()
Pred assignment
After process simple constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == x} <: {Int|_v >= 0 && (_v >= 0 && _v < x)} ()
Constraints
  C1 && (C3 && (C5 && (C6 && (_v == x && (x >= 0 && y >= 0))))) ==> _v >= 0 && (_v >= 0 && _v < x)
QMap
  C0 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C1 -> {!(y <= 0)}
  C2 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C3 -> {!(x <= 0)}
  C4 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C5 -> {!(y != x && y <= x)}
  C6 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (8 1)
Chosen candidate: 0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (8 1)
Invalid Constraint: C1 && (C3 && (C5 && (C6 && (_v == x && (x >= 0 && y >= 0))))) ==> _v >= 0 && (_v >= 0 && _v < x)
Strengthening: C1 && (C3 && (C5 && (C6 && (_v == x && (x >= 0 && y >= 0))))) ==> _v >= 0 && (_v >= 0 && _v < x)
Instantiated axioms:
All assumptions:
!(x <= 0), !(y <= 0), !(y != x && y <= x), _v == x, x >= 0, y >= 0
RHS: _v >= 0 && (_v >= 0 && _v < x)
assumption !(x <= 0) && (!(y <= 0) && (!(y != x && y <= x) && (_v == x && (x >= 0 && y >= 0))))
mustHave !(_v >= 0 && (_v >= 0 && _v < x))
qualsList [0 != x
          ,0 != y
          ,y != x
          ,0 <= x
          ,0 <= y
          ,x <= y
          ,y <= x]
Optimal valuations:
Pruned valuations:
Diffs: (0)
TYPE ERROR: Cannot find sufficiently strong refinements
when checking x ::
{Int|_v >= 0 && (_v >= 0 && _v < x)}
in
\x . \y . 
    if y <= 0
      then x
      else 
        if x <= 0
          then y
          else 
            if (y != x) && (y <= x)
              then add y x
              else add zero (add x ??)
Trying y
Checking y :: {Int|_v >= 0 && (_v >= 0 && _v < x)} in
\x . \y . 
    if y <= 0
      then x
      else 
        if x <= 0
          then y
          else 
            if (y != x) && (y <= x)
              then add y x
              else add zero (add ?? ??)
Adding constraint add, x, y C1, C3, C5, C6 |- {Int|_v == y} <: {Int|_v >= 0 && (_v >= 0 && _v < x)} ()
Typing Constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == y} <: {Int|_v >= 0 && (_v >= 0 && _v < x)} ()
Type assignment
Simple Constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == y} <: {Int|_v >= 0 && (_v >= 0 && _v < x)} ()
Pred assignment
After process simple constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == y} <: {Int|_v >= 0 && (_v >= 0 && _v < x)} ()
Constraints
  C1 && (C3 && (C5 && (C6 && (_v == y && (x >= 0 && y >= 0))))) ==> _v >= 0 && (_v >= 0 && _v < x)
QMap
  C0 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C1 -> {!(y <= 0)}
  C2 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C3 -> {!(x <= 0)}
  C4 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C5 -> {!(y != x && y <= x)}
  C6 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (8 1)
Chosen candidate: 0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (8 1)
Invalid Constraint: C1 && (C3 && (C5 && (C6 && (_v == y && (x >= 0 && y >= 0))))) ==> _v >= 0 && (_v >= 0 && _v < x)
Strengthening: C1 && (C3 && (C5 && (C6 && (_v == y && (x >= 0 && y >= 0))))) ==> _v >= 0 && (_v >= 0 && _v < x)
Instantiated axioms:
All assumptions:
!(x <= 0), !(y <= 0), !(y != x && y <= x), _v == y, x >= 0, y >= 0
RHS: _v >= 0 && (_v >= 0 && _v < x)
assumption !(x <= 0) && (!(y <= 0) && (!(y != x && y <= x) && (_v == y && (x >= 0 && y >= 0))))
mustHave !(_v >= 0 && (_v >= 0 && _v < x))
qualsList [0 != x
          ,0 != y
          ,y != x
          ,0 <= x
          ,0 <= y
          ,x <= y
          ,y <= x]
Optimal valuations:
Pruned valuations:
Diffs: (0)
TYPE ERROR: Cannot find sufficiently strong refinements
when checking y ::
{Int|_v >= 0 && (_v >= 0 && _v < x)}
in
\x . \y . 
    if y <= 0
      then x
      else 
        if x <= 0
          then y
          else 
            if (y != x) && (y <= x)
              then add y x
              else add zero (add y ??)
Trying zero
Checking zero :: {Int|_v >= 0 && (_v >= 0 && _v < x)} in
\x . \y . 
    if y <= 0
      then x
      else 
        if x <= 0
          then y
          else 
            if (y != x) && (y <= x)
              then add y x
              else add zero (add ?? ??)
Adding constraint add, x, y C1, C3, C5, C6 |- {Int|_v == zero} <: {Int|_v >= 0 && (_v >= 0 && _v < x)} ()
Typing Constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == zero} <: {Int|_v >= 0 && (_v >= 0 && _v < x)} ()
Type assignment
Simple Constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == zero} <: {Int|_v >= 0 && (_v >= 0 && _v < x)} ()
Pred assignment
After process simple constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == zero} <: {Int|_v >= 0 && (_v >= 0 && _v < x)} ()
Constraints
  C1 && (C3 && (C5 && (C6 && (_v == zero && (zero == 0 && (x >= 0 && y >= 0)))))) ==> _v >= 0 && (_v >= 0 && _v < x)
QMap
  C0 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C1 -> {!(y <= 0)}
  C2 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C3 -> {!(x <= 0)}
  C4 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C5 -> {!(y != x && y <= x)}
  C6 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
Checking consistency
Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (8 0)
Remaining Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (8 0)
Synthesized argument zero of type {Int|_v == zero}
Checking add
           zero :: X4:_ -> {Int|_v >= 0} in
\x . \y . 
    if y <= 0
      then x
      else 
        if x <= 0
          then y
          else 
            if (y != x) && (y <= x)
              then add y x
              else add zero (?? ??)
Adding constraint add, x, y C1, C3, C5, C6 |- x6:{Int|_v >= 0} -> {Int|_v == zero + x6} <: X4:_ -> {Int|_v >= 0} ()
Adding constraint add, x, y C1, C3, C5, C6 |- x6:{Int|_v >= 0} -> {Int|_v == zero + x6} /\ X4:_ -> {Int|_v >= 0} ()
Typing Constraints
add, x, y C1, C3, C5, C6 |- x6:{Int|_v >= 0} -> {Int|_v == zero + x6} /\ X4:_ -> {Int|_v >= 0} ()
add, x, y C1, C3, C5, C6 |- x6:{Int|_v >= 0} -> {Int|_v == zero + x6} <: X4:_ -> {Int|_v >= 0} ()
Type assignment
Simple Constraints
X4, add, x, y C1, C3, C5, C6 |- {Int|_v == zero + X4} <: {Int|_v >= 0} ()
add, x, x6, y C1, C3, C5, C6 |- {Int|_v == zero + x6} /\ {Int|_v >= 0} ()
Pred assignment
After process simple constraints
add, x, x6, y C1, C3, C5, C6 |- {Int|_v == zero + x6} /\ {Int|_v >= 0} ()
X4, add, x, y C1, C3, C5, C6 |- {Int|_v == zero + X4} <: {Int|_v >= 0} ()
Constraints
  False ==> _v >= 0
QMap
  C0 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C1 -> {!(y <= 0)}
  C2 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C3 -> {!(x <= 0)}
  C4 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C5 -> {!(y != x && y <= x)}
  C6 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
Checking consistency
  C1 && (C3 && (C5 && (C6 && (_v == zero + x6 && (zero == 0 && (_v >= 0 && (x >= 0 && (x6 >= 0 && y >= 0))))))))
Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (8 0)
Remaining Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (8 0)
Trying x
Checking x :: {Int|_v >= 0} in
\x . \y . 
    if y <= 0
      then x
      else 
        if x <= 0
          then y
          else 
            if (y != x) && (y <= x)
              then add y x
              else add zero (add zero ??)
Adding constraint add, x, y C1, C3, C5, C6 |- {Int|_v == x} <: {Int|_v >= 0} ()
Typing Constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == x} <: {Int|_v >= 0} ()
Type assignment
Simple Constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == x} <: {Int|_v >= 0} ()
Pred assignment
After process simple constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == x} <: {Int|_v >= 0} ()
Constraints
  C1 && (C3 && (C5 && (C6 && (_v == x && (x >= 0 && y >= 0))))) ==> _v >= 0
QMap
  C0 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C1 -> {!(y <= 0)}
  C2 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C3 -> {!(x <= 0)}
  C4 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C5 -> {!(y != x && y <= x)}
  C6 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
Checking consistency
Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (9 0)
Remaining Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (9 0)
Synthesized argument x of type {Int|_v == x}
Checking add zero
           x :: {Int|_v >= 0} in
\x . \y . 
    if y <= 0
      then x
      else 
        if x <= 0
          then y
          else 
            if (y != x) && (y <= x)
              then add y x
              else add zero ??
Adding constraint add, x, y C1, C3, C5, C6 |- {Int|_v == zero + x} <: {Int|_v >= 0} ()
Typing Constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == zero + x} <: {Int|_v >= 0} ()
Type assignment
Simple Constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == zero + x} <: {Int|_v >= 0} ()
Pred assignment
After process simple constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == zero + x} <: {Int|_v >= 0} ()
Constraints
  C1 && (C3 && (C5 && (C6 && (_v == zero + x && (zero == 0 && (x >= 0 && y >= 0)))))) ==> _v >= 0
QMap
  C0 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C1 -> {!(y <= 0)}
  C2 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C3 -> {!(x <= 0)}
  C4 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C5 -> {!(y != x && y <= x)}
  C6 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
Checking consistency
Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (10 0)
Remaining Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (10 0)
Synthesized argument add zero
                       x of type {Int|_v == zero + x}
Checking add zero (add zero
                     x) :: {Int|_v == x + y} in
\x . \y . 
    if y <= 0
      then x
      else 
        if x <= 0
          then y
          else 
            if (y != x) && (y <= x)
              then add y x
              else ??
Adding constraint add, x, y C1, C3, C5, C6 |- LET x4:({Int|_v == zero + x}) IN {Int|_v == zero + x4} <: {Int|_v == x + y} ()
Typing Constraints
add, x, y C1, C3, C5, C6 |- LET x4:({Int|_v == zero + x}) IN {Int|_v == zero + x4} <: {Int|_v == x + y} ()
Type assignment
Simple Constraints
add, x, x4, y C1, C3, C5, C6 |- {Int|_v == zero + x4} <: {Int|_v == x + y} ()
Pred assignment
After process simple constraints
add, x, x4, y C1, C3, C5, C6 |- {Int|_v == zero + x4} <: {Int|_v == x + y} ()
Constraints
  C1 && (C3 && (C5 && (C6 && (_v == zero + x4 && (x4 == zero + x && (zero == 0 && (x >= 0 && y >= 0))))))) ==> _v == x + y
QMap
  C0 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C1 -> {!(y <= 0)}
  C2 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C3 -> {!(x <= 0)}
  C4 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C5 -> {!(y != x && y <= x)}
  C6 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (10 1)
Chosen candidate: 0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (10 1)
Invalid Constraint: C1 && (C3 && (C5 && (C6 && (_v == zero + x4 && (x4 == zero + x && (zero == 0 && (x >= 0 && y >= 0))))))) ==> _v == x + y
Strengthening: C1 && (C3 && (C5 && (C6 && (_v == zero + x4 && (x4 == zero + x && (zero == 0 && (x >= 0 && y >= 0))))))) ==> _v == x + y
Instantiated axioms:
All assumptions:
!(x <= 0), !(y <= 0), !(y != x && y <= x), _v == zero + x4, x4 == zero + x, zero == 0, x >= 0, y >= 0
RHS: _v == x + y
assumption !(x <= 0) && (!(y <= 0) && (!(y != x && y <= x) && (_v == zero + x4 && (x4 == zero + x && (zero == 0 && (x >= 0 && y >= 0))))))
mustHave !(_v == x + y)
qualsList [0 != x
          ,0 != y
          ,y != x
          ,0 <= x
          ,0 <= y
          ,x <= y
          ,y <= x]
Optimal valuations:
Pruned valuations:
Diffs: (0)
TYPE ERROR: Cannot find sufficiently strong refinements
when checking add zero (add zero
                          x) :: {Int|_v == x + y} in
\x . \y . 
    if y <= 0
      then x
      else 
        if x <= 0
          then y
          else 
            if (y != x) && (y <= x)
              then add y x
              else add zero (add zero x)
Trying y
Checking y :: {Int|_v >= 0} in
\x . \y . 
    if y <= 0
      then x
      else 
        if x <= 0
          then y
          else 
            if (y != x) && (y <= x)
              then add y x
              else add zero (add zero ??)
Adding constraint add, x, y C1, C3, C5, C6 |- {Int|_v == y} <: {Int|_v >= 0} ()
Typing Constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == y} <: {Int|_v >= 0} ()
Type assignment
Simple Constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == y} <: {Int|_v >= 0} ()
Pred assignment
After process simple constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == y} <: {Int|_v >= 0} ()
Constraints
  C1 && (C3 && (C5 && (C6 && (_v == y && (x >= 0 && y >= 0))))) ==> _v >= 0
QMap
  C0 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C1 -> {!(y <= 0)}
  C2 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C3 -> {!(x <= 0)}
  C4 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C5 -> {!(y != x && y <= x)}
  C6 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
Checking consistency
Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (9 0)
Remaining Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (9 0)
Synthesized argument y of type {Int|_v == y}
Checking add zero
           y :: {Int|_v >= 0} in
\x . \y . 
    if y <= 0
      then x
      else 
        if x <= 0
          then y
          else 
            if (y != x) && (y <= x)
              then add y x
              else add zero ??
Adding constraint add, x, y C1, C3, C5, C6 |- {Int|_v == zero + y} <: {Int|_v >= 0} ()
Typing Constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == zero + y} <: {Int|_v >= 0} ()
Type assignment
Simple Constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == zero + y} <: {Int|_v >= 0} ()
Pred assignment
After process simple constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == zero + y} <: {Int|_v >= 0} ()
Constraints
  C1 && (C3 && (C5 && (C6 && (_v == zero + y && (zero == 0 && (x >= 0 && y >= 0)))))) ==> _v >= 0
QMap
  C0 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C1 -> {!(y <= 0)}
  C2 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C3 -> {!(x <= 0)}
  C4 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C5 -> {!(y != x && y <= x)}
  C6 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
Checking consistency
Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (10 0)
Remaining Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (10 0)
Synthesized argument add zero
                       y of type {Int|_v == zero + y}
Checking add zero (add zero
                     y) :: {Int|_v == x + y} in
\x . \y . 
    if y <= 0
      then x
      else 
        if x <= 0
          then y
          else 
            if (y != x) && (y <= x)
              then add y x
              else ??
Adding constraint add, x, y C1, C3, C5, C6 |- LET x4:({Int|_v == zero + y}) IN {Int|_v == zero + x4} <: {Int|_v == x + y} ()
Typing Constraints
add, x, y C1, C3, C5, C6 |- LET x4:({Int|_v == zero + y}) IN {Int|_v == zero + x4} <: {Int|_v == x + y} ()
Type assignment
Simple Constraints
add, x, x4, y C1, C3, C5, C6 |- {Int|_v == zero + x4} <: {Int|_v == x + y} ()
Pred assignment
After process simple constraints
add, x, x4, y C1, C3, C5, C6 |- {Int|_v == zero + x4} <: {Int|_v == x + y} ()
Constraints
  C1 && (C3 && (C5 && (C6 && (_v == zero + x4 && (x4 == zero + y && (zero == 0 && (x >= 0 && y >= 0))))))) ==> _v == x + y
QMap
  C0 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C1 -> {!(y <= 0)}
  C2 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C3 -> {!(x <= 0)}
  C4 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C5 -> {!(y != x && y <= x)}
  C6 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (10 1)
Chosen candidate: 0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (10 1)
Invalid Constraint: C1 && (C3 && (C5 && (C6 && (_v == zero + x4 && (x4 == zero + y && (zero == 0 && (x >= 0 && y >= 0))))))) ==> _v == x + y
Strengthening: C1 && (C3 && (C5 && (C6 && (_v == zero + x4 && (x4 == zero + y && (zero == 0 && (x >= 0 && y >= 0))))))) ==> _v == x + y
Instantiated axioms:
All assumptions:
!(x <= 0), !(y <= 0), !(y != x && y <= x), _v == zero + x4, x4 == zero + y, zero == 0, x >= 0, y >= 0
RHS: _v == x + y
assumption !(x <= 0) && (!(y <= 0) && (!(y != x && y <= x) && (_v == zero + x4 && (x4 == zero + y && (zero == 0 && (x >= 0 && y >= 0))))))
mustHave !(_v == x + y)
qualsList [0 != x
          ,0 != y
          ,y != x
          ,0 <= x
          ,0 <= y
          ,x <= y
          ,y <= x]
Optimal valuations:
Pruned valuations:
Diffs: (0)
TYPE ERROR: Cannot find sufficiently strong refinements
when checking add zero (add zero
                          y) :: {Int|_v == x + y} in
\x . \y . 
    if y <= 0
      then x
      else 
        if x <= 0
          then y
          else 
            if (y != x) && (y <= x)
              then add y x
              else add zero (add zero y)
Trying zero
Checking zero :: {Int|_v >= 0} in
\x . \y . 
    if y <= 0
      then x
      else 
        if x <= 0
          then y
          else 
            if (y != x) && (y <= x)
              then add y x
              else add zero (add zero ??)
Adding constraint add, x, y C1, C3, C5, C6 |- {Int|_v == zero} <: {Int|_v >= 0} ()
Typing Constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == zero} <: {Int|_v >= 0} ()
Type assignment
Simple Constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == zero} <: {Int|_v >= 0} ()
Pred assignment
After process simple constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == zero} <: {Int|_v >= 0} ()
Constraints
  C1 && (C3 && (C5 && (C6 && (_v == zero && (zero == 0 && (x >= 0 && y >= 0)))))) ==> _v >= 0
QMap
  C0 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C1 -> {!(y <= 0)}
  C2 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C3 -> {!(x <= 0)}
  C4 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C5 -> {!(y != x && y <= x)}
  C6 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
Checking consistency
Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (9 0)
Remaining Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (9 0)
Synthesized argument zero of type {Int|_v == zero}
Checking add zero
           zero :: {Int|_v >= 0} in
\x . \y . 
    if y <= 0
      then x
      else 
        if x <= 0
          then y
          else 
            if (y != x) && (y <= x)
              then add y x
              else add zero ??
Adding constraint add, x, y C1, C3, C5, C6 |- {Int|_v == zero + zero} <: {Int|_v >= 0} ()
Typing Constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == zero + zero} <: {Int|_v >= 0} ()
Type assignment
Simple Constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == zero + zero} <: {Int|_v >= 0} ()
Pred assignment
After process simple constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == zero + zero} <: {Int|_v >= 0} ()
Constraints
  C1 && (C3 && (C5 && (C6 && (_v == zero + zero && (zero == 0 && (x >= 0 && y >= 0)))))) ==> _v >= 0
QMap
  C0 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C1 -> {!(y <= 0)}
  C2 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C3 -> {!(x <= 0)}
  C4 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C5 -> {!(y != x && y <= x)}
  C6 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
Checking consistency
Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (10 0)
Remaining Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (10 0)
Synthesized argument add zero
                       zero of type {Int|_v == zero + zero}
Checking add zero (add zero
                     zero) :: {Int|_v == x + y} in
\x . \y . 
    if y <= 0
      then x
      else 
        if x <= 0
          then y
          else 
            if (y != x) && (y <= x)
              then add y x
              else ??
Adding constraint add, x, y C1, C3, C5, C6 |- LET x4:({Int|_v == zero + zero}) IN {Int|_v == zero + x4} <: {Int|_v == x + y} ()
Typing Constraints
add, x, y C1, C3, C5, C6 |- LET x4:({Int|_v == zero + zero}) IN {Int|_v == zero + x4} <: {Int|_v == x + y} ()
Type assignment
Simple Constraints
add, x, x4, y C1, C3, C5, C6 |- {Int|_v == zero + x4} <: {Int|_v == x + y} ()
Pred assignment
After process simple constraints
add, x, x4, y C1, C3, C5, C6 |- {Int|_v == zero + x4} <: {Int|_v == x + y} ()
Constraints
  C1 && (C3 && (C5 && (C6 && (_v == zero + x4 && (x4 == zero + zero && (zero == 0 && (x >= 0 && y >= 0))))))) ==> _v == x + y
QMap
  C0 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C1 -> {!(y <= 0)}
  C2 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C3 -> {!(x <= 0)}
  C4 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C5 -> {!(y != x && y <= x)}
  C6 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (10 1)
Chosen candidate: 0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (10 1)
Invalid Constraint: C1 && (C3 && (C5 && (C6 && (_v == zero + x4 && (x4 == zero + zero && (zero == 0 && (x >= 0 && y >= 0))))))) ==> _v == x + y
Strengthening: C1 && (C3 && (C5 && (C6 && (_v == zero + x4 && (x4 == zero + zero && (zero == 0 && (x >= 0 && y >= 0))))))) ==> _v == x + y
Instantiated axioms:
All assumptions:
!(x <= 0), !(y <= 0), !(y != x && y <= x), _v == zero + x4, x4 == zero + zero, zero == 0, x >= 0, y >= 0
RHS: _v == x + y
assumption !(x <= 0) && (!(y <= 0) && (!(y != x && y <= x) && (_v == zero + x4 && (x4 == zero + zero && (zero == 0 && (x >= 0 && y >= 0))))))
mustHave !(_v == x + y)
qualsList [0 != x
          ,0 != y
          ,y != x
          ,0 <= x
          ,0 <= y
          ,x <= y
          ,y <= x]
Optimal valuations:
Pruned valuations:
Diffs: (0)
TYPE ERROR: Cannot find sufficiently strong refinements
when checking add zero (add zero
                          zero) :: {Int|_v == x + y} in
\x . \y . 
    if y <= 0
      then x
      else 
        if x <= 0
          then y
          else 
            if (y != x) && (y <= x)
              then add y x
              else add zero (add zero zero)
INSTANTIATE x0:{Int|_v >= 0 && (_v >= 0 && _v < x)} -> y:{Int|_v >= 0} -> {Int|_v == x0 + y}
INTO x3:{Int|_v >= 0 && (_v >= 0 && _v < x)} -> x4:{Int|_v >= 0} -> {Int|_v == x3 + x4}
Trying add
Adding constraint add, x, y C1, C3, C5, C6 |- x3:Int -> x4:Int -> {Int|False} <: x:{Int|False} -> y:{Int|False} -> Int ()
Checking add :: X3:_ -> X2:_ -> {Int|_v == x + y} in
\x . \y . 
    if y <= 0
      then x
      else 
        if x <= 0
          then y
          else 
            if (y != x) && (y <= x)
              then add y x
              else ?? ?? ??
Adding constraint add, x, y C1, C3, C5, C6 |- x3:{Int|_v >= 0 && (_v >= 0 && _v < x)} -> x4:{Int|_v >= 0} -> {Int|_v == x3 + x4} <: X3:_ -> X2:_ -> {Int|_v == x + y} ()
Adding constraint add, x, y C1, C3, C5, C6 |- x3:{Int|_v >= 0 && (_v >= 0 && _v < x)} -> x4:{Int|_v >= 0} -> {Int|_v == x3 + x4} /\ X3:_ -> X2:_ -> {Int|_v == x + y} ()
Typing Constraints
add, x, y C1, C3, C5, C6 |- x3:{Int|_v >= 0 && (_v >= 0 && _v < x)} -> x4:{Int|_v >= 0} -> {Int|_v == x3 + x4} /\ X3:_ -> X2:_ -> {Int|_v == x + y} ()
add, x, y C1, C3, C5, C6 |- x3:{Int|_v >= 0 && (_v >= 0 && _v < x)} -> x4:{Int|_v >= 0} -> {Int|_v == x3 + x4} <: X3:_ -> X2:_ -> {Int|_v == x + y} ()
add, x, y C1, C3, C5, C6 |- x3:Int -> x4:Int -> {Int|False} <: x:{Int|False} -> y:{Int|False} -> Int ()
add, x, y |- C6
Type assignment
Simple Constraints
add, x, y |- C6
add, x, y C1, C3, C5, C6 |- {Int|False} <: Int ()
add, x, y C1, C3, C5, C6 |- {Int|False} <: Int ()
add, x, y C1, C3, C5, C6 |- {Int|False} <: Int ()
X2, X3, add, x, y C1, C3, C5, C6 |- {Int|_v == X3 + X2} <: {Int|_v == x + y} ()
add, x, x3, x4, y C1, C3, C5, C6 |- {Int|_v == x3 + x4} /\ {Int|_v == x + y} ()
Pred assignment
After process simple constraints
add, x, x3, x4, y C1, C3, C5, C6 |- {Int|_v == x3 + x4} /\ {Int|_v == x + y} ()
X2, X3, add, x, y C1, C3, C5, C6 |- {Int|_v == X3 + X2} <: {Int|_v == x + y} ()
Constraints
  False ==> _v == x + y
QMap
  C0 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C1 -> {!(y <= 0)}
  C2 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C3 -> {!(x <= 0)}
  C4 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C5 -> {!(y != x && y <= x)}
  C6 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
Checking consistency
  C1 && (C3 && (C5 && (C6 && (_v == x + y && (_v == x3 + x4 && (x >= 0 && (x4 >= 0 && (y >= 0 && (x3 >= 0 && (x3 >= 0 && x3 < x))))))))))
Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (6 0)
Remaining Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (6 0)
INSTANTIATE x:{Int|_v >= 0} -> {Int|_v == x - 1}
INTO x5:{Int|_v >= 0} -> {Int|_v == x5 - 1}
Trying dec
Checking dec :: X4:_ -> {Int|_v >= 0 && (_v >= 0 && _v < x)} in
\x . \y . 
    if y <= 0
      then x
      else 
        if x <= 0
          then y
          else 
            if (y != x) && (y <= x)
              then add y x
              else add (?? ??) ??
Adding constraint add, x, y C1, C3, C5, C6 |- x5:{Int|_v >= 0} -> {Int|_v == x5 - 1} <: X4:_ -> {Int|_v >= 0 && (_v >= 0 && _v < x)} ()
Adding constraint add, x, y C1, C3, C5, C6 |- x5:{Int|_v >= 0} -> {Int|_v == x5 - 1} /\ X4:_ -> {Int|_v >= 0 && (_v >= 0 && _v < x)} ()
Typing Constraints
add, x, y C1, C3, C5, C6 |- x5:{Int|_v >= 0} -> {Int|_v == x5 - 1} /\ X4:_ -> {Int|_v >= 0 && (_v >= 0 && _v < x)} ()
add, x, y C1, C3, C5, C6 |- x5:{Int|_v >= 0} -> {Int|_v == x5 - 1} <: X4:_ -> {Int|_v >= 0 && (_v >= 0 && _v < x)} ()
Type assignment
Simple Constraints
X4, add, x, y C1, C3, C5, C6 |- {Int|_v == X4 - 1} <: {Int|_v >= 0 && (_v >= 0 && _v < x)} ()
add, x, x5, y C1, C3, C5, C6 |- {Int|_v == x5 - 1} /\ {Int|_v >= 0 && (_v >= 0 && _v < x)} ()
Pred assignment
After process simple constraints
add, x, x5, y C1, C3, C5, C6 |- {Int|_v == x5 - 1} /\ {Int|_v >= 0 && (_v >= 0 && _v < x)} ()
X4, add, x, y C1, C3, C5, C6 |- {Int|_v == X4 - 1} <: {Int|_v >= 0 && (_v >= 0 && _v < x)} ()
Constraints
  False ==> _v >= 0 && (_v >= 0 && _v < x)
QMap
  C0 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C1 -> {!(y <= 0)}
  C2 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C3 -> {!(x <= 0)}
  C4 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C5 -> {!(y != x && y <= x)}
  C6 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
Checking consistency
  C1 && (C3 && (C5 && (C6 && (_v == x5 - 1 && (x >= 0 && (x5 >= 0 && (y >= 0 && (_v >= 0 && (_v >= 0 && _v < x)))))))))
Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (7 0)
Remaining Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (7 0)
Trying x
Checking x :: {Int|_v >= 0} in
\x . \y . 
    if y <= 0
      then x
      else 
        if x <= 0
          then y
          else 
            if (y != x) && (y <= x)
              then add y x
              else add (dec ??) ??
Adding constraint add, x, y C1, C3, C5, C6 |- {Int|_v == x} <: {Int|_v >= 0} ()
Typing Constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == x} <: {Int|_v >= 0} ()
Type assignment
Simple Constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == x} <: {Int|_v >= 0} ()
Pred assignment
After process simple constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == x} <: {Int|_v >= 0} ()
Constraints
  C1 && (C3 && (C5 && (C6 && (_v == x && (x >= 0 && y >= 0))))) ==> _v >= 0
QMap
  C0 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C1 -> {!(y <= 0)}
  C2 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C3 -> {!(x <= 0)}
  C4 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C5 -> {!(y != x && y <= x)}
  C6 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
Checking consistency
Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (8 0)
Remaining Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (8 0)
Synthesized argument x of type {Int|_v == x}
Checking dec
           x :: {Int|_v >= 0 && (_v >= 0 && _v < x)} in
\x . \y . 
    if y <= 0
      then x
      else 
        if x <= 0
          then y
          else 
            if (y != x) && (y <= x)
              then add y x
              else add ?? ??
Adding constraint add, x, y C1, C3, C5, C6 |- {Int|_v == x - 1} <: {Int|_v >= 0 && (_v >= 0 && _v < x)} ()
Typing Constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == x - 1} <: {Int|_v >= 0 && (_v >= 0 && _v < x)} ()
Type assignment
Simple Constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == x - 1} <: {Int|_v >= 0 && (_v >= 0 && _v < x)} ()
Pred assignment
After process simple constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == x - 1} <: {Int|_v >= 0 && (_v >= 0 && _v < x)} ()
Constraints
  C1 && (C3 && (C5 && (C6 && (_v == x - 1 && (x >= 0 && y >= 0))))) ==> _v >= 0 && (_v >= 0 && _v < x)
QMap
  C0 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C1 -> {!(y <= 0)}
  C2 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C3 -> {!(x <= 0)}
  C4 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C5 -> {!(y != x && y <= x)}
  C6 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
Checking consistency
Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (9 0)
Remaining Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (9 0)
Synthesized argument dec
                       x of type {Int|_v == x - 1}
Checking add (dec
                x) :: X2:_ -> {Int|_v == x + y} in
\x . \y . 
    if y <= 0
      then x
      else 
        if x <= 0
          then y
          else 
            if (y != x) && (y <= x)
              then add y x
              else ?? ??
Adding constraint add, x, y C1, C3, C5, C6 |- x4:LET x3:({Int|_v == x - 1}) IN {Int|_v >= 0} -> LET x3:({Int|_v == x - 1}) IN {Int|_v == x3 + x4} <: X2:_ -> {Int|_v == x + y} ()
Adding constraint add, x, y C1, C3, C5, C6 |- x4:LET x3:({Int|_v == x - 1}) IN {Int|_v >= 0} -> LET x3:({Int|_v == x - 1}) IN {Int|_v == x3 + x4} /\ X2:_ -> {Int|_v == x + y} ()
Typing Constraints
add, x, y C1, C3, C5, C6 |- x4:LET x3:({Int|_v == x - 1}) IN {Int|_v >= 0} -> LET x3:({Int|_v == x - 1}) IN {Int|_v == x3 + x4} /\ X2:_ -> {Int|_v == x + y} ()
add, x, y C1, C3, C5, C6 |- x4:LET x3:({Int|_v == x - 1}) IN {Int|_v >= 0} -> LET x3:({Int|_v == x - 1}) IN {Int|_v == x3 + x4} <: X2:_ -> {Int|_v == x + y} ()
Type assignment
Simple Constraints
X2, add, x, x3, y C1, C3, C5, C6 |- {Int|_v == x3 + X2} <: {Int|_v == x + y} ()
add, x, x3, x4, y C1, C3, C5, C6 |- {Int|_v == x3 + x4} /\ {Int|_v == x + y} ()
Pred assignment
After process simple constraints
add, x, x3, x4, y C1, C3, C5, C6 |- {Int|_v == x3 + x4} /\ {Int|_v == x + y} ()
X2, add, x, x3, y C1, C3, C5, C6 |- {Int|_v == x3 + X2} <: {Int|_v == x + y} ()
Constraints
  False ==> _v == x + y
QMap
  C0 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C1 -> {!(y <= 0)}
  C2 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C3 -> {!(x <= 0)}
  C4 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C5 -> {!(y != x && y <= x)}
  C6 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
Checking consistency
  C1 && (C3 && (C5 && (C6 && (_v == x + y && (_v == x3 + x4 && (x3 == x - 1 && (x >= 0 && (x4 >= 0 && y >= 0))))))))
Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (9 0)
Remaining Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (9 0)
Trying y
Checking y :: LET x3:({Int|_v == x - 1}) IN {Int|_v >= 0} in
\x . \y . 
    if y <= 0
      then x
      else 
        if x <= 0
          then y
          else 
            if (y != x) && (y <= x)
              then add y x
              else add (dec x) ??
Adding constraint add, x, y C1, C3, C5, C6 |- {Int|_v == y} <: LET x3:({Int|_v == x - 1}) IN {Int|_v >= 0} ()
Typing Constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == y} <: LET x3:({Int|_v == x - 1}) IN {Int|_v >= 0} ()
Type assignment
Simple Constraints
add, x, x3, y C1, C3, C5, C6 |- {Int|_v == y} <: {Int|_v >= 0} ()
Pred assignment
After process simple constraints
add, x, x3, y C1, C3, C5, C6 |- {Int|_v == y} <: {Int|_v >= 0} ()
Constraints
  C1 && (C3 && (C5 && (C6 && (_v == y && (x >= 0 && y >= 0))))) ==> _v >= 0
QMap
  C0 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C1 -> {!(y <= 0)}
  C2 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C3 -> {!(x <= 0)}
  C4 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C5 -> {!(y != x && y <= x)}
  C6 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
Checking consistency
Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (10 0)
Remaining Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (10 0)
Synthesized argument y of type {Int|_v == y}
Checking add (dec x)
           y :: {Int|_v == x + y} in
\x . \y . 
    if y <= 0
      then x
      else 
        if x <= 0
          then y
          else 
            if (y != x) && (y <= x)
              then add y x
              else ??
Adding constraint add, x, y C1, C3, C5, C6 |- LET x3:({Int|_v == x - 1}) IN {Int|_v == x3 + y} <: {Int|_v == x + y} ()
Typing Constraints
add, x, y C1, C3, C5, C6 |- LET x3:({Int|_v == x - 1}) IN {Int|_v == x3 + y} <: {Int|_v == x + y} ()
Type assignment
Simple Constraints
add, x, x3, y C1, C3, C5, C6 |- {Int|_v == x3 + y} <: {Int|_v == x + y} ()
Pred assignment
After process simple constraints
add, x, x3, y C1, C3, C5, C6 |- {Int|_v == x3 + y} <: {Int|_v == x + y} ()
Constraints
  C1 && (C3 && (C5 && (C6 && (_v == x3 + y && (x3 == x - 1 && (x >= 0 && y >= 0)))))) ==> _v == x + y
QMap
  C0 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C1 -> {!(y <= 0)}
  C2 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C3 -> {!(x <= 0)}
  C4 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C5 -> {!(y != x && y <= x)}
  C6 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (10 1)
Chosen candidate: 0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (10 1)
Invalid Constraint: C1 && (C3 && (C5 && (C6 && (_v == x3 + y && (x3 == x - 1 && (x >= 0 && y >= 0)))))) ==> _v == x + y
Strengthening: C1 && (C3 && (C5 && (C6 && (_v == x3 + y && (x3 == x - 1 && (x >= 0 && y >= 0)))))) ==> _v == x + y
Instantiated axioms:
All assumptions:
!(x <= 0), !(y <= 0), !(y != x && y <= x), _v == x3 + y, x3 == x - 1, x >= 0, y >= 0
RHS: _v == x + y
assumption !(x <= 0) && (!(y <= 0) && (!(y != x && y <= x) && (_v == x3 + y && (x3 == x - 1 && (x >= 0 && y >= 0)))))
mustHave !(_v == x + y)
qualsList [0 != x
          ,0 != y
          ,y != x
          ,0 <= x
          ,0 <= y
          ,x <= y
          ,y <= x]
Optimal valuations:
Pruned valuations:
Diffs: (0)
TYPE ERROR: Cannot find sufficiently strong refinements
when checking add (dec x) y ::
{Int|_v == x + y} in
\x . \y . 
    if y <= 0
      then x
      else 
        if x <= 0
          then y
          else 
            if (y != x) && (y <= x)
              then add y x
              else add (dec x) y
Trying x
Checking x :: LET x3:({Int|_v == x - 1}) IN {Int|_v >= 0} in
\x . \y . 
    if y <= 0
      then x
      else 
        if x <= 0
          then y
          else 
            if (y != x) && (y <= x)
              then add y x
              else add (dec x) ??
Adding constraint add, x, y C1, C3, C5, C6 |- {Int|_v == x} <: LET x3:({Int|_v == x - 1}) IN {Int|_v >= 0} ()
Typing Constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == x} <: LET x3:({Int|_v == x - 1}) IN {Int|_v >= 0} ()
Type assignment
Simple Constraints
add, x, x3, y C1, C3, C5, C6 |- {Int|_v == x} <: {Int|_v >= 0} ()
Pred assignment
After process simple constraints
add, x, x3, y C1, C3, C5, C6 |- {Int|_v == x} <: {Int|_v >= 0} ()
Constraints
  C1 && (C3 && (C5 && (C6 && (_v == x && (x >= 0 && y >= 0))))) ==> _v >= 0
QMap
  C0 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C1 -> {!(y <= 0)}
  C2 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C3 -> {!(x <= 0)}
  C4 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C5 -> {!(y != x && y <= x)}
  C6 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
Checking consistency
Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (9 0)
Remaining Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (9 0)
Synthesized argument x of type {Int|_v == x}
Checking add (dec x)
           x :: {Int|_v == x + y} in
\x . \y . 
    if y <= 0
      then x
      else 
        if x <= 0
          then y
          else 
            if (y != x) && (y <= x)
              then add y x
              else ??
Adding constraint add, x, y C1, C3, C5, C6 |- LET x3:({Int|_v == x - 1}) IN {Int|_v == x3 + x} <: {Int|_v == x + y} ()
Typing Constraints
add, x, y C1, C3, C5, C6 |- LET x3:({Int|_v == x - 1}) IN {Int|_v == x3 + x} <: {Int|_v == x + y} ()
Type assignment
Simple Constraints
add, x, x3, y C1, C3, C5, C6 |- {Int|_v == x3 + x} <: {Int|_v == x + y} ()
Pred assignment
After process simple constraints
add, x, x3, y C1, C3, C5, C6 |- {Int|_v == x3 + x} <: {Int|_v == x + y} ()
Constraints
  C1 && (C3 && (C5 && (C6 && (_v == x3 + x && (x3 == x - 1 && (x >= 0 && y >= 0)))))) ==> _v == x + y
QMap
  C0 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C1 -> {!(y <= 0)}
  C2 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C3 -> {!(x <= 0)}
  C4 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C5 -> {!(y != x && y <= x)}
  C6 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (9 1)
Chosen candidate: 0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (9 1)
Invalid Constraint: C1 && (C3 && (C5 && (C6 && (_v == x3 + x && (x3 == x - 1 && (x >= 0 && y >= 0)))))) ==> _v == x + y
Strengthening: C1 && (C3 && (C5 && (C6 && (_v == x3 + x && (x3 == x - 1 && (x >= 0 && y >= 0)))))) ==> _v == x + y
Instantiated axioms:
All assumptions:
!(x <= 0), !(y <= 0), !(y != x && y <= x), _v == x3 + x, x3 == x - 1, x >= 0, y >= 0
RHS: _v == x + y
assumption !(x <= 0) && (!(y <= 0) && (!(y != x && y <= x) && (_v == x3 + x && (x3 == x - 1 && (x >= 0 && y >= 0)))))
mustHave !(_v == x + y)
qualsList [0 != x
          ,0 != y
          ,y != x
          ,0 <= x
          ,0 <= y
          ,x <= y
          ,y <= x]
Optimal valuations:
Pruned valuations:
Diffs: (0)
TYPE ERROR: Cannot find sufficiently strong refinements
when checking add (dec x) x ::
{Int|_v == x + y} in
\x . \y . 
    if y <= 0
      then x
      else 
        if x <= 0
          then y
          else 
            if (y != x) && (y <= x)
              then add y x
              else add (dec x) x
Trying zero
Checking zero :: LET x3:({Int|_v == x - 1}) IN {Int|_v >= 0} in
\x . \y . 
    if y <= 0
      then x
      else 
        if x <= 0
          then y
          else 
            if (y != x) && (y <= x)
              then add y x
              else add (dec x) ??
Adding constraint add, x, y C1, C3, C5, C6 |- {Int|_v == zero} <: LET x3:({Int|_v == x - 1}) IN {Int|_v >= 0} ()
Typing Constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == zero} <: LET x3:({Int|_v == x - 1}) IN {Int|_v >= 0} ()
Type assignment
Simple Constraints
add, x, x3, y C1, C3, C5, C6 |- {Int|_v == zero} <: {Int|_v >= 0} ()
Pred assignment
After process simple constraints
add, x, x3, y C1, C3, C5, C6 |- {Int|_v == zero} <: {Int|_v >= 0} ()
Constraints
  C1 && (C3 && (C5 && (C6 && (_v == zero && (zero == 0 && (x >= 0 && y >= 0)))))) ==> _v >= 0
QMap
  C0 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C1 -> {!(y <= 0)}
  C2 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C3 -> {!(x <= 0)}
  C4 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C5 -> {!(y != x && y <= x)}
  C6 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
Checking consistency
Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (10 0)
Remaining Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (10 0)
Synthesized argument zero of type {Int|_v == zero}
Checking add (dec x)
           zero :: {Int|_v == x + y} in
\x . \y . 
    if y <= 0
      then x
      else 
        if x <= 0
          then y
          else 
            if (y != x) && (y <= x)
              then add y x
              else ??
Adding constraint add, x, y C1, C3, C5, C6 |- LET x3:({Int|_v == x - 1}) IN {Int|_v == x3 + zero} <: {Int|_v == x + y} ()
Typing Constraints
add, x, y C1, C3, C5, C6 |- LET x3:({Int|_v == x - 1}) IN {Int|_v == x3 + zero} <: {Int|_v == x + y} ()
Type assignment
Simple Constraints
add, x, x3, y C1, C3, C5, C6 |- {Int|_v == x3 + zero} <: {Int|_v == x + y} ()
Pred assignment
After process simple constraints
add, x, x3, y C1, C3, C5, C6 |- {Int|_v == x3 + zero} <: {Int|_v == x + y} ()
Constraints
  C1 && (C3 && (C5 && (C6 && (_v == x3 + zero && (x3 == x - 1 && (zero == 0 && (x >= 0 && y >= 0))))))) ==> _v == x + y
QMap
  C0 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C1 -> {!(y <= 0)}
  C2 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C3 -> {!(x <= 0)}
  C4 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C5 -> {!(y != x && y <= x)}
  C6 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (10 1)
Chosen candidate: 0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (10 1)
Invalid Constraint: C1 && (C3 && (C5 && (C6 && (_v == x3 + zero && (x3 == x - 1 && (zero == 0 && (x >= 0 && y >= 0))))))) ==> _v == x + y
Strengthening: C1 && (C3 && (C5 && (C6 && (_v == x3 + zero && (x3 == x - 1 && (zero == 0 && (x >= 0 && y >= 0))))))) ==> _v == x + y
Instantiated axioms:
All assumptions:
!(x <= 0), !(y <= 0), !(y != x && y <= x), _v == x3 + zero, x3 == x - 1, zero == 0, x >= 0, y >= 0
RHS: _v == x + y
assumption !(x <= 0) && (!(y <= 0) && (!(y != x && y <= x) && (_v == x3 + zero && (x3 == x - 1 && (zero == 0 && (x >= 0 && y >= 0))))))
mustHave !(_v == x + y)
qualsList [0 != x
          ,0 != y
          ,y != x
          ,0 <= x
          ,0 <= y
          ,x <= y
          ,y <= x]
Optimal valuations:
Pruned valuations:
Diffs: (0)
TYPE ERROR: Cannot find sufficiently strong refinements
when checking add (dec x) zero
:: {Int|_v == x + y} in
\x . \y . 
    if y <= 0
      then x
      else 
        if x <= 0
          then y
          else 
            if (y != x) && (y <= x)
              then add y x
              else add (dec x) zero
INSTANTIATE x:{Int|_v >= 0} -> {Int|_v == x + 1}
INTO x6:{Int|_v >= 0} -> {Int|_v == x6 + 1}
Trying inc
Checking inc :: X5:_ -> LET x3:({Int|_v == x - 1}) IN {Int|_v >= 0} in
\x . \y . 
    if y <= 0
      then x
      else 
        if x <= 0
          then y
          else 
            if (y != x) && (y <= x)
              then add y x
              else add (dec x) (?? ??)
Adding constraint add, x, y C1, C3, C5, C6 |- x6:{Int|_v >= 0} -> {Int|_v == x6 + 1} <: X5:_ -> LET x3:({Int|_v == x - 1}) IN {Int|_v >= 0} ()
Adding constraint add, x, y C1, C3, C5, C6 |- x6:{Int|_v >= 0} -> {Int|_v == x6 + 1} /\ X5:_ -> LET x3:({Int|_v == x - 1}) IN {Int|_v >= 0} ()
Typing Constraints
add, x, y C1, C3, C5, C6 |- x6:{Int|_v >= 0} -> {Int|_v == x6 + 1} /\ X5:_ -> LET x3:({Int|_v == x - 1}) IN {Int|_v >= 0} ()
add, x, y C1, C3, C5, C6 |- x6:{Int|_v >= 0} -> {Int|_v == x6 + 1} <: X5:_ -> LET x3:({Int|_v == x - 1}) IN {Int|_v >= 0} ()
Type assignment
Simple Constraints
X5, add, x, x3, y C1, C3, C5, C6 |- {Int|_v == X5 + 1} <: {Int|_v >= 0} ()
add, x, x3, x6, y C1, C3, C5, C6 |- {Int|_v == x6 + 1} /\ {Int|_v >= 0} ()
Pred assignment
After process simple constraints
add, x, x3, x6, y C1, C3, C5, C6 |- {Int|_v == x6 + 1} /\ {Int|_v >= 0} ()
X5, add, x, x3, y C1, C3, C5, C6 |- {Int|_v == X5 + 1} <: {Int|_v >= 0} ()
Constraints
  False ==> _v >= 0
QMap
  C0 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C1 -> {!(y <= 0)}
  C2 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C3 -> {!(x <= 0)}
  C4 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C5 -> {!(y != x && y <= x)}
  C6 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
Checking consistency
  C1 && (C3 && (C5 && (C6 && (_v == x6 + 1 && (_v >= 0 && (x >= 0 && (x6 >= 0 && y >= 0)))))))
Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (10 0)
Remaining Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (10 0)
Trying y
Checking y :: {Int|_v >= 0} in
\x . \y . 
    if y <= 0
      then x
      else 
        if x <= 0
          then y
          else 
            if (y != x) && (y <= x)
              then add y x
              else add (dec x) (inc ??)
Adding constraint add, x, y C1, C3, C5, C6 |- {Int|_v == y} <: {Int|_v >= 0} ()
Typing Constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == y} <: {Int|_v >= 0} ()
Type assignment
Simple Constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == y} <: {Int|_v >= 0} ()
Pred assignment
After process simple constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == y} <: {Int|_v >= 0} ()
Constraints
  C1 && (C3 && (C5 && (C6 && (_v == y && (x >= 0 && y >= 0))))) ==> _v >= 0
QMap
  C0 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C1 -> {!(y <= 0)}
  C2 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C3 -> {!(x <= 0)}
  C4 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C5 -> {!(y != x && y <= x)}
  C6 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
Checking consistency
Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (11 0)
Remaining Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (11 0)
Synthesized argument y of type {Int|_v == y}
Checking inc
           y :: LET x3:({Int|_v == x - 1}) IN {Int|_v >= 0} in
\x . \y . 
    if y <= 0
      then x
      else 
        if x <= 0
          then y
          else 
            if (y != x) && (y <= x)
              then add y x
              else add (dec x) ??
Adding constraint add, x, y C1, C3, C5, C6 |- {Int|_v == y + 1} <: LET x3:({Int|_v == x - 1}) IN {Int|_v >= 0} ()
Typing Constraints
add, x, y C1, C3, C5, C6 |- {Int|_v == y + 1} <: LET x3:({Int|_v == x - 1}) IN {Int|_v >= 0} ()
Type assignment
Simple Constraints
add, x, x3, y C1, C3, C5, C6 |- {Int|_v == y + 1} <: {Int|_v >= 0} ()
Pred assignment
After process simple constraints
add, x, x3, y C1, C3, C5, C6 |- {Int|_v == y + 1} <: {Int|_v >= 0} ()
Constraints
  C1 && (C3 && (C5 && (C6 && (_v == y + 1 && (x >= 0 && y >= 0))))) ==> _v >= 0
QMap
  C0 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C1 -> {!(y <= 0)}
  C2 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C3 -> {!(x <= 0)}
  C4 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C5 -> {!(y != x && y <= x)}
  C6 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
Checking consistency
Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (12 0)
Remaining Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (12 0)
Synthesized argument inc
                       y of type {Int|_v == y + 1}
Checking add (dec x) (inc
                        y) :: {Int|_v == x + y} in
\x . \y . 
    if y <= 0
      then x
      else 
        if x <= 0
          then y
          else 
            if (y != x) && (y <= x)
              then add y x
              else ??
Adding constraint add, x, y C1, C3, C5, C6 |- LET x4:({Int|_v == y + 1}) IN LET x3:({Int|_v == x - 1}) IN {Int|_v == x3 + x4} <: {Int|_v == x + y} ()
Typing Constraints
add, x, y C1, C3, C5, C6 |- LET x4:({Int|_v == y + 1}) IN LET x3:({Int|_v == x - 1}) IN {Int|_v == x3 + x4} <: {Int|_v == x + y} ()
Type assignment
Simple Constraints
add, x, x3, x4, y C1, C3, C5, C6 |- {Int|_v == x3 + x4} <: {Int|_v == x + y} ()
Pred assignment
After process simple constraints
add, x, x3, x4, y C1, C3, C5, C6 |- {Int|_v == x3 + x4} <: {Int|_v == x + y} ()
Constraints
  C1 && (C3 && (C5 && (C6 && (_v == x3 + x4 && (x3 == x - 1 && (x4 == y + 1 && (x >= 0 && y >= 0))))))) ==> _v == x + y
QMap
  C0 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C1 -> {!(y <= 0)}
  C2 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C3 -> {!(x <= 0)}
  C4 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C5 -> {!(y != x && y <= x)}
  C6 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
Checking consistency
Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (13 0)
Remaining Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (13 0)
Typing Constraints
Type assignment
Simple Constraints
Pred assignment
After process simple constraints
Constraints
QMap
  C0 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C1 -> {!(y <= 0)}
  C2 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C3 -> {!(x <= 0)}
  C4 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
  C5 -> {!(y != x && y <= x)}
  C6 -> {0 <= y, y != x, 0 != x, 0 != y, x <= y, x <= 0, y <= x, y <= 0, 0 <= x}
Checking consistency
Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (13 0)
Remaining Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {!(y != x && y <= x)}, C6 -> {}] (13 0)
Auxiliary goals are:
Re-checking candidates after updating C5
Checking validity
  C1 && (C3 && (C5 && (C6 && (_v == x && (x >= 0 && y >= 0))))) ==> _v >= 0
  C1 && (C3 && (C5 && (C6 && (_v == y && (x >= 0 && y >= 0))))) ==> _v >= 0
  C1 && (C3 && (C5 && (C6 && (_v == x3 + x4 && (x3 == x - 1 && (x4 == y + 1 && (x >= 0 && y >= 0))))))) ==> _v == x + y
  C1 && (C3 && (C5 && (C6 && (_v == y + 1 && (x >= 0 && y >= 0))))) ==> _v >= 0
  C1 && (C3 && (C5 && (C6 && (_v == x - 1 && (x >= 0 && y >= 0))))) ==> _v >= 0 && (_v >= 0 && _v < x)
Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {}, C6 -> {}] (13 0)
Remaining Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {}, C6 -> {}] (13 0)
Re-checking candidates after updating C3
Checking validity
  C1 && (C3 && (C5 && (C6 && (_v == x && (x >= 0 && y >= 0))))) ==> _v >= 0
  C1 && (C3 && (C5 && (C6 && (_v == y && (x >= 0 && y >= 0))))) ==> _v >= 0
  C1 && (C3 && (C5 && (C6 && (_v == x3 + x4 && (x3 == x - 1 && (x4 == y + 1 && (x >= 0 && y >= 0))))))) ==> _v == x + y
  C1 && (C3 && (C5 && (C6 && (_v == y + 1 && (x >= 0 && y >= 0))))) ==> _v >= 0
  C1 && (C3 && (C5 && (C6 && (_v == x - 1 && (x >= 0 && y >= 0))))) ==> _v >= 0 && (_v >= 0 && _v < x)
Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {!(y <= 0)}, C2 -> {x <= 0}, C3 -> {}, C4 -> {y != x, y <= x}, C5 -> {}, C6 -> {}] (10 0)
Remaining Candidates (0)
TYPE ERROR: Re-checking candidates failed
Re-checking candidates after updating C1
Checking validity
  C1 && (C2 && (_v == y && (x >= 0 && y >= 0))) ==> _v == x + y
  C1 && (C3 && (C5 && (C6 && (_v == x && (x >= 0 && y >= 0))))) ==> _v >= 0
  C1 && (C3 && (C5 && (C6 && (_v == y && (x >= 0 && y >= 0))))) ==> _v >= 0
  C1 && (C3 && (C5 && (C6 && (_v == x3 + x4 && (x3 == x - 1 && (x4 == y + 1 && (x >= 0 && y >= 0))))))) ==> _v == x + y
  C1 && (C3 && (C5 && (C6 && (_v == y + 1 && (x >= 0 && y >= 0))))) ==> _v >= 0
  C1 && (C3 && (C5 && (C6 && (_v == x - 1 && (x >= 0 && y >= 0))))) ==> _v >= 0 && (_v >= 0 && _v < x)
Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {}, C6 -> {}] (10 0)
Remaining Candidates (1)
  0: [C0 -> {y <= 0}, C1 -> {}, C2 -> {x <= 0}, C3 -> {!(x <= 0)}, C4 -> {y != x, y <= x}, C5 -> {}, C6 -> {}] (10 0)
