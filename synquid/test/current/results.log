add :: x:Nat -> y:Nat -> {Int|_v == x + y}
add = \x . \y . 
    if y <= 0
      then x
      else inc (add x (dec y))

null :: xs:List a -> {Bool|_v == (len xs == 0)}
null = \xs . 
  match xs with
    Nil -> true
    Cons x8 x9 -> false

elem :: x:a -> xs:List a -> {Bool|_v == (x in elems xs)}
elem = \x . \xs . 
    match xs with
      Nil -> false
      Cons x11 x12 -> 
        if x11 == x
          then true
          else elem x x12

stutter :: xs:List a -> {List a|len _v == 2 * len xs}
stutter = \xs . 
  match xs with
    Nil -> xs
    Cons x8 x9 -> Cons x8 (Cons x8
                             (stutter x9))

replicate :: n:Nat -> x:a -> {List a|len _v == n}
replicate = \n . \x . 
    if n <= 0
      then Nil
      else Cons x (replicate (dec n)
                     x)

append :: xs:List a -> ys:List a -> {List a|len _v == len xs + len ys && elems _v == elems xs + elems ys}
append = \xs . \ys . 
    match xs with
      Nil -> ys
      Cons x19 x20 -> Cons x19 (append
                                  x20 ys)

concat :: xss:ListOfLists a -> {List a|len _v == sumLen xss}
concat = \xss . 
  match xss with
    Nil2 -> Nil
    Cons2 x14 x15 -> append x14
                       (concat x15)

take :: n:Nat -> xs:{List a|len _v >= n} -> {List a|len _v == n}
take = \n . \xs . 
    if 0 != n
      then 
        match xs with
          Nil -> error
          Cons x11 x12 -> Cons x11 (take
                                      (dec n) x12)
      else Nil

drop :: n:Nat -> xs:{List a|len _v >= n} -> {List a|len _v == len xs - n}
drop = \n . \xs . 
    if 0 != n
      then 
        match xs with
          Nil -> error
          Cons x11 x12 -> drop (dec n) x12
      else xs

delete :: x:a -> xs:List a -> {List a|elems _v == elems xs - [x]}
delete = \x . \xs . 
    match xs with
      Nil -> xs
      Cons x13 x14 -> 
        if x13 == x
          then delete x x14
          else Cons x13 (delete x x14)

map :: f:(arg0:a -> b) -> xs:List a -> {List b|len _v == len xs}
map = \f . \xs . 
    match xs with
      Nil -> Nil
      Cons x15 x16 -> Cons (f x15)
                        (map f x16)

zipWith :: f:(arg1:a -> arg0:b -> c) -> xs:List a -> ys:{List b|len _v == len xs} -> {List c|len _v == len xs}
zipWith = \f . \xs . \ys . 
      match xs with
        Nil -> Nil
        Cons x22 x23 -> 
          match ys with
            Nil -> error
            Cons x26 x27 -> Cons (f x22 x26)
                              (zipWith f x23 x27)

zip :: xs:List a -> ys:{List b|len _v == len xs} -> {List Pair a b|len _v == len xs}
zip = \xs . \ys . 
    match xs with
      Nil -> Nil
      Cons x17 x18 -> 
        match ys with
          Nil -> error
          Cons x21 x22 -> Cons (Pair x17
                                  x21) (zip x18 x22)

toNat :: xs:List Int -> {List Nat|len _v == len xs}
toNat = \xs . 
  let f0 = \x20 . 
      if x20 <= 0
        then neg x20
        else x20 in
  map f0 xs

product :: xs:List a -> ys:List b -> {List Pair a b|len _v == len xs * len ys}
product = \xs . \ys . 
    match xs with
      Nil -> Nil
      Cons x25 x26 -> 
        let f89 = \x7443 . Pair x25
                             x7443 in
        map (\x45 . x45) (append
                            (product x26 ys) (map f89 ys))

extractMin :: xs:{List a|len _v > 0} -> {MinPair a|elems xs == [min _v] + elems (rest _v) && len xs == 1 + len (rest _v)}
extractMin = \xs . 
  match xs with
    Nil -> error
    Cons x9 x10 -> 
      match x10 with
        Nil -> MinPair x9 Nil
        Cons x18 x19 -> 
          match extractMin x10 with
            MinPair x23 x24 -> 
              if x23 <= x9
                then MinPair x23 (Cons x9 x24)
                else MinPair x9 (Cons x23 x24)

member :: x:a -> xs:List a -> {Bool|_v == (x in elems xs)}
member = \x . \xs . 
    match xs with
      Nil -> false
      Cons x15 x16 -> 
        if x15 == x
          then true
          else member x x16

coincidence :: xs:List a -> ys:List a -> {List a|elems _v == elems xs * elems ys}
coincidence = \xs . \ys . 
    match xs with
      Nil -> xs
      Cons x15 x16 -> 
        if member x15 ys
          then Cons x15 (coincidence x16
                           ys)
          else coincidence x16 ys

foldr :: <p :: List (a) -> b -> Bool> . f:(xs:List a -> x:a -> acc:{b|p xs _v} -> {b|p ((Cons x xs)) _v}) -> seed:{b|p (Nil) _v} -> ys:List a -> {b|p ys _v}
foldr = \f . \seed . \ys . 
      match ys with
        Nil -> seed
        Cons x26 x27 -> f x27 x26 (foldr
                                     f seed x27)

length :: xs:List a -> {Int|_v == len xs}
length = \xs . 
  let f0 = \x15 . \x16 . \x17 .
          inc x17 in
  foldr f0 zero xs

append :: xs:List a -> ys:List a -> {List a|len _v == len xs + len ys}
append = \xs . \ys . 
    let f0 = \x14 . \x15 . \x16 .
            Cons x15 x16 in
    foldr f0 xs ys

ith :: <p :: Int -> a -> Bool> . xs:List a <p> -> i:{Int|0 <= _v && _v < len xs} -> {a|p i _v}
ith = \xs . \i . 
    match xs with
      Nil -> error
      Cons x11 x12 -> 
        if 0 == i
          then x11
          else ith x12 (dec i)

elemIndex :: <p :: Int -> a -> Bool> . x:a -> xs:{List a <p>|x in elems _v} -> {Int|p _v x}
elemIndex = \x . \xs . 
    match xs with
      Nil -> error
      Cons x11 x12 -> 
        if x11 == x
          then zero
          else inc (elemIndex x x12)

snoc :: <p :: a -> a -> Bool> . x:a -> xs:List {a|p _v x} <p> -> {List a <p>|len _v == len xs + 1 && elems _v == elems xs + [x]}
snoc = \x . \xs . 
    match xs with
      Nil -> Cons x Nil
      Cons x17 x18 -> Cons x17 (snoc x
                                  x18)

reverse :: <p :: a -> a -> Bool> . xs:List a <p> -> {List a <p _1 _0>|len _v == len xs && elems _v == elems xs}
reverse = \xs . 
  match xs with
    Nil -> Nil
    Cons x10 x11 -> snoc x10
                      (reverse x11)

insert :: x:a -> xs:UList a -> {UList a|elems _v == elems xs + [x]}
insert = \x . \xs . 
    match xs with
      Nil -> Cons x xs
      Cons x17 x18 -> 
        if x17 == x
          then xs
          else Cons x17 (insert x x18)

delete :: x:a -> xs:UList a -> {UList a|elems _v == elems xs - [x]}
delete = \x . \xs . 
    match xs with
      Nil -> xs
      Cons x13 x14 -> 
        if x13 == x
          then x14
          else Cons x13 (delete x x14)

range :: size:Nat -> lo:Int -> {UList {Int|lo <= _v && _v <= lo + size}|len _v == size}
range = \size . \lo . Cons lo
                        (range (dec size) (inc lo))

elem :: x:a -> xs:List a -> {Bool|_v == (x in elems xs)}
elem = \x . \xs . 
    match xs with
      Nil -> false
      Cons x11 x12 -> 
        if x11 == x
          then true
          else elem x x12

nub' :: xs:List a -> acc:UList a -> {UList a|elems _v == elems acc + elems xs}
nub' = \xs . \acc . 
    match xs with
      Nil -> acc
      Cons x13 x14 -> 
        if elem x13 acc
          then nub' x14 acc
          else 
            if elem x13 x14
              then nub' x14 acc
              else Cons x13 (nub' x14 acc)

nub :: xs:List a -> {UList a|elems _v == elems xs}
nub = \xs . nub' xs Nil

compress :: xs:List a -> {CList a|elems _v == elems xs}
compress = \xs . 
  match xs with
    Nil -> Nil
    Cons x8 x9 -> 
      match compress x9 with
        Nil -> Cons x8 Nil
        Cons x22 x23 -> 
          if x8 == x22
            then compress x9
            else Cons x8 (Cons x22 x23)

insert :: x:a -> xs:IList a -> {IList a|ielems _v == ielems xs + [x]}
insert = \x . \xs . 
    match xs with
      INil -> ICons x INil
      ICons x19 x20 -> 
        if x19 <= x
          then ICons x19 (insert x x20)
          else ICons x (insert x19 x20)

insertSort :: xs:List a -> {IList a|ielems _v == elems xs}
insertSort = \xs . 
  match xs with
    Nil -> INil
    Cons x12 x13 -> insert x12
                      (insertSort x13)

sort :: xs:List a -> {IncList a|elems _v == elems xs && len _v == len xs}
sort = \xs . 
  let f0 = \x12 . \x13 . \x14 . 
          match x14 with
            Nil -> Cons x13 Nil
            Cons x104 x105 -> 
              if x13 <= x104
                then Cons x13 (Cons x104 x105)
                else Cons x104 (f0 x105 x13
                                  x105) in
  foldr f0 Nil xs

split :: xs:List a -> {Pair {List a|abs (len xs - len _v * 2) <= 1} List a|len xs == len (fst _v) + len (snd _v) && elems xs == elems (fst _v) + elems (snd _v)}
split = \xs . 
  match xs with
    Nil -> Pair xs Nil
    Cons x12 x13 -> 
      match x13 with
        Nil -> Pair x13 xs
        Cons x25 x26 -> 
          match split x26 with
            Pair x30 x31 -> Pair (Cons x12
                                    x30) (Cons x25 x31)

merge :: xs:IList a -> ys:IList a -> {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys}
merge = \xs . \ys . 
    match ys with
      INil -> xs
      ICons x12 x13 -> 
        match xs with
          INil -> ys
          ICons x20 x21 -> 
            if x20 <= x12
              then ICons x20 (merge x21 (ICons
                                           x12 x13))
              else ICons x12 (merge (ICons x20
                                       x21) x13)

mergeSort :: xs:List a -> {IList a|ilen _v == len xs && ielems _v == elems xs}
mergeSort = \xs . 
  match xs with
    Nil -> INil
    Cons x17 x18 -> 
      match x18 with
        Nil -> ICons x17 INil
        Cons x41 x42 -> 
          match split xs with
            Pair x46 x47 -> merge (mergeSort
                                     x46) (mergeSort x47)

partition :: p:a -> xs:List a -> {Pair List {a|_v <= p} List {a|_v > p}|len (fst _v) + len (snd _v) == len xs && elems (fst _v) + elems (snd _v) == elems xs}
partition = \p . \xs . 
    match xs with
      Nil -> Pair Nil Nil
      Cons x27 x28 -> 
        match partition p x28 with
          Pair x33 x34 -> 
            if p < x27
              then Pair x33 (Cons x27 x34)
              else Pair (Cons x27 x33) x34

pivotAppend :: p:a -> xs:IList {a|_v <= p} -> ys:IList {a|_v > p} -> {IList a|ilen _v == (ilen xs + ilen ys) + 1 && ielems _v == (ielems xs + ielems ys) + [p]}
pivotAppend = \p . \xs . \ys . 
      match xs with
        INil -> ICons p ys
        ICons x21 x22 -> ICons x21
                           (pivotAppend p x22 ys)

quickSort :: xs:List a -> {IList a|ilen _v == len xs && ielems _v == elems xs}
