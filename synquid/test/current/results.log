balL0 :: x:a -> l:{AVL {a|_v < x}|balFac _v == 0} -> r:{AVL {a|_v > x}|realHeight l - realHeight _v == 2} -> {AVL a|realHeight _v == 1 + realHeight l && elems _v == ([x] + elems l) + elems r}
balL0 = \x . \l . \r . 
      match l with
        Leaf -> error
        Node x16 x17 x18 x19 -> Node x16
                                  x17 (Node x x18 r x19) (inc x19)

balLL :: x:a -> l:{AVL {a|_v < x}|balFac _v > 0} -> r:{AVL {a|_v > x}|realHeight l - realHeight _v == 2} -> {AVL a|realHeight _v == realHeight l && elems _v == ([x] + elems l) + elems r}
balLL = \x . \l . \r . 
      match l with
        Leaf -> error
        Node x16 x17 x18 x19 -> 
          match x17 with
            Leaf -> error
            Node x24 x25 x26 x27 -> Node x16
                                      x17 (Node x x18 r x27) x19

balLR :: x:a -> l:{AVL {a|_v < x}|balFac _v < 0} -> r:{AVL {a|_v > x}|realHeight l - realHeight _v == 2} -> {AVL a|realHeight _v == realHeight l && elems _v == ([x] + elems l) + elems r}
balLR = \x . \l . \r . 
      match l with
        Leaf -> error
        Node x16 x17 x18 x19 -> 
          match x18 with
            Leaf -> error
            Node x24 x25 x26 x27 -> Node x24
                                      (Node x16 x17 x25 x27) (Node x
                                                                x26 r x27) x19

balR0 :: x:a -> l:AVL {a|_v < x} -> r:{AVL {a|_v > x}|realHeight _v - realHeight l == 2 && balFac _v == 0} -> {AVL a|realHeight _v == 1 + realHeight r && elems _v == ([x] + elems l) + elems r}
balR0 = \x . \l . \r . 
      match r with
        Leaf -> error
        Node x16 x17 x18 x19 -> Node x16
                                  (Node x l x17 x19) x18 (inc x19)

balRL :: x:a -> l:AVL {a|_v < x} -> r:{AVL {a|_v > x}|realHeight _v - realHeight l == 2 && balFac _v > 0} -> {AVL a|realHeight _v == realHeight r && elems _v == ([x] + elems l) + elems r}
balRL = \x . \l . \r . 
      match r with
        Leaf -> error
        Node x16 x17 x18 x19 -> 
          match x17 with
            Leaf -> error
            Node x24 x25 x26 x27 -> Node x24
                                      (Node x l x25 x27) (Node x16 x26
                                                            x18 x27) x19

balRR :: x:a -> l:AVL {a|_v < x} -> r:{AVL {a|_v > x}|realHeight _v - realHeight l == 2 && balFac _v < 0} -> {AVL a|realHeight _v == realHeight r && elems _v == ([x] + elems l) + elems r}
balRR = \x . \l . \r . 
      match r with
        Leaf -> error
        Node x16 x17 x18 x19 -> 
          match x18 with
            Leaf -> error
            Node x24 x25 x26 x27 -> Node x16
                                      (Node x l x17 x27) x18 x19

balance :: x:a -> l:AVL {a|_v < x} -> r:{AVL {a|_v > x}|abs (realHeight l - realHeight _v) <= 2} -> {AVL a|(balHt l r _v && bigHt l r _v) && elems _v == ([x] + elems l) + elems r}
balance = \x . \l . \r . Node x
                           l r (nodeHeight r l)

insert :: y:a -> t:AVL a -> {AVL a|(realHeight t <= realHeight _v && realHeight _v <= realHeight t + 1) && elems _v == [y] + elems t}
insert = \y . \t . 
    match t with
      Leaf -> balance y Leaf Leaf
      Node x54 x55 x56 x57 -> 
        if x54 < y
          then balance x54 x55 (insert y
                                  x56)
          else 
            if y < x54
              then balance y x55 (insert x54
                                    x56)
              else Node x54 x55 x56 x57

extractMin :: t:AVL a -> {MinPair a|elems t == melems _v && eqOrOneLess (mheight _v) (realHeight t)}
extractMin = \t . 
  match t with
    Leaf -> Nothing
    Node x19 x20 x21 x22 -> 
      match extractMin x20 with
        Nothing -> MinPair x19 x21
        MinPair x43 x44 -> MinPair x43
                             (balance x19 x44 x21)

merge :: x:a -> l:AVL {a|_v < x} -> r:{AVL {a|_v > x}|isBal l _v 1} -> {AVL a|bigHt l r _v && elems _v == elems l + elems r}
merge = \x . \l . \r . 
      match extractMin r with
        Nothing -> l
        MinPair x26 x27 -> balance x26 l
                             x27

delete :: y:a -> t:AVL a -> {AVL a|eqOrOneLess (realHeight _v) (realHeight t) && elems t - [y] == elems _v}
delete = \y . \t . 
    match t with
      Leaf -> t
      Node x30 x31 x32 x33 -> 
        if x30 < y
          then balance x30 x31 (delete y
                                  x32)
          else 
            if y == x30
              then merge x30 x31 x32
              else balance x30 (delete y x31)
                     x32

