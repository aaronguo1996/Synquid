add :: x:Nat -> y:Nat -> {Int|_v == x + y}
add = \x . \y . 
    if x <= 0
      then y
      else add (dec x) (inc y)

null :: xs:List a -> {Bool|_v == (len xs == 0)}
null = \xs . 
  match xs with
    Nil -> true
    Cons x3 x4 -> false

elem :: x:a -> xs:List a -> {Bool|_v == (x in elems xs)}
elem = \x . \xs . 
    match xs with
      Nil -> false
      Cons x3 x4 -> 
        if x3 == x
          then true
          else elem x x4

stutter :: xs:List a -> {List a|len _v == 2 * len xs}
stutter = \xs . 
  match xs with
    Nil -> xs
    Cons x3 x4 -> Cons x3 (Cons x3
                             (stutter x4))

replicate :: n:Nat -> x:a -> {List a|len _v == n}
replicate = \n . \x . 
    if n <= 0
      then Nil
      else Cons x (replicate (dec n)
                     x)

append :: xs:List a -> ys:List a -> {List a|len _v == len xs + len ys && elems _v == elems xs + elems ys}
append = \xs . \ys . 
    match xs with
      Nil -> ys
      Cons x7 x8 -> Cons x7 (append x8
                               ys)

concat :: xss:ListOfLists a -> {List a|len _v == sumLen xss}
concat = \xss . 
  match xss with
    Nil2 -> Nil
    Cons2 x3 x4 -> append x3 (concat
                                x4)

take :: n:Nat -> xs:{List a|len _v >= n} -> {List a|len _v == n}
take = \n . \xs . 
    if 0 != n
      then 
        match xs with
          Nil -> error
          Cons x3 x4 -> Cons x3 (take (dec
                                         n) x4)
      else Nil

drop :: n:Nat -> xs:{List a|len _v >= n} -> {List a|len _v == len xs - n}
drop = \n . \xs . 
    if 0 != n
      then 
        match xs with
          Nil -> error
          Cons x3 x4 -> drop (dec n) x4
      else xs

delete :: x:a -> xs:List a -> {List a|elems _v == elems xs - [x]}
delete = \x . \xs . 
    match xs with
      Nil -> xs
      Cons x3 x4 -> 
        if x3 == x
          then delete x x4
          else Cons x3 (delete x x4)

map :: f:(arg0:a -> b) -> xs:List a -> {List b|len _v == len xs}
map = \f . \xs . 
    match xs with
      Nil -> Nil
      Cons x3 x4 -> Cons (f x3) (map f
                                   x4)

zipWith :: f:(arg1:a -> arg0:b -> c) -> xs:List a -> ys:{List b|len _v == len xs} -> {List c|len _v == len xs}
zipWith = \f . \xs . \ys . 
      match xs with
        Nil -> Nil
        Cons x3 x4 -> 
          match ys with
            Nil -> error
            Cons x7 x8 -> Cons (f x3 x7)
                            (zipWith f x4 x8)

zip :: xs:List a -> ys:{List b|len _v == len xs} -> {List Pair a b|len _v == len xs}
zip = \xs . \ys . 
    match xs with
      Nil -> Nil
      Cons x3 x4 -> 
        match ys with
          Nil -> error
          Cons x7 x8 -> Cons (Pair x3 x7)
                          (zip x4 x8)

toNat :: xs:List Int -> {List Nat|len _v == len xs}
toNat = \xs . 
  let f0 = \x2 . 
      if x2 <= 0
        then neg x2
        else x2 in
  map f0 xs

extractMin :: xs:{List a|len _v > 0} -> {MinPair a|elems xs == [min _v] + elems (rest _v) && len xs == 1 + len (rest _v)}
extractMin = \xs . 
  match xs with
    Nil -> error
    Cons x3 x4 -> 
      match x4 with
        Nil -> MinPair x3 Nil
        Cons x9 x10 -> 
          match extractMin x4 with
            MinPair x14 x15 -> 
              if x14 <= x3
                then MinPair x14 (Cons x3 x15)
                else MinPair x3 (Cons x14 x15)

foldr :: <p :: List (a) -> b -> Bool> . f:(xs:List a -> x:a -> acc:{b|p xs _v} -> {b|p ((Cons x xs)) _v}) -> seed:{b|p (Nil) _v} -> ys:List a -> {b|p ys _v}
foldr = \f . \seed . \ys . 
      match ys with
        Nil -> seed
        Cons x3 x4 -> f x4 x3 (foldr f
                                 seed x4)

length :: xs:List a -> {Int|_v == len xs}
length = \xs . 
  let f0 = \x2 . \x3 . \x4 . inc
                               x4 in
  foldr f0 zero xs

append :: xs:List a -> ys:List a -> {List a|len _v == len xs + len ys}
append = \xs . \ys . 
    let f0 = \x2 . \x3 . \x4 . Cons
                                 x3 x4 in
    foldr f0 xs ys

ith :: <p :: Int -> a -> Bool> . xs:List a <p> -> i:{Int|0 <= _v && _v < len xs} -> {a|p i _v}
ith = \xs . \i . 
    match xs with
      Nil -> error
      Cons x3 x4 -> 
        if 0 == i
          then x3
          else ith x4 (dec i)

elemIndex :: <p :: Int -> a -> Bool> . x:a -> xs:{List a <p>|x in elems _v} -> {Int|p _v x}
elemIndex = \x . \xs . 
    match xs with
      Nil -> error
      Cons x3 x4 -> 
        if x3 == x
          then zero
          else inc (elemIndex x x4)

snoc :: <p :: a -> a -> Bool> . x:a -> xs:List {a|p _v x} <p> -> {List a <p>|len _v == len xs + 1 && elems _v == elems xs + [x]}
snoc = \x . \xs . 
    match xs with
      Nil -> Cons x Nil
      Cons x5 x6 -> Cons x5 (snoc x
                               x6)

reverse :: <p :: a -> a -> Bool> . xs:List a <p> -> {List a <p _1 _0>|len _v == len xs && elems _v == elems xs}
reverse = \xs . 
  match xs with
    Nil -> Nil
    Cons x3 x4 -> snoc x3 (reverse
                             x4)

insert :: x:a -> xs:UList a -> {UList a|elems _v == elems xs + [x]}
insert = \x . \xs . 
    match xs with
      Nil -> Cons x xs
      Cons x5 x6 -> 
        if x5 == x
          then xs
          else Cons x5 (insert x x6)

delete :: x:a -> xs:UList a -> {UList a|elems _v == elems xs - [x]}
delete = \x . \xs . 
    match xs with
      Nil -> xs
      Cons x3 x4 -> 
        if x3 == x
          then x4
          else Cons x3 (delete x x4)

range :: size:Nat -> lo:Int -> {UList {Int|lo <= _v && _v <= lo + size}|len _v == size}
range = \size . \lo . 
    if size <= 0
      then Nil
      else Cons lo (range (dec size)
                      (inc lo))

elem :: x:a -> xs:List a -> {Bool|_v == (x in elems xs)}
elem = \x . \xs . 
    match xs with
      Nil -> false
      Cons x3 x4 -> 
        if x3 == x
          then true
          else elem x x4

nub' :: xs:List a -> acc:UList a -> {UList a|elems _v == elems acc + elems xs}
nub' = \xs . \acc . 
    match xs with
      Nil -> acc
      Cons x3 x4 -> 
        if elem x3 acc
          then nub' x4 acc
          else 
            if elem x3 x4
              then nub' x4 acc
              else Cons x3 (nub' x4 acc)

nub :: xs:List a -> {UList a|elems _v == elems xs}
nub = \xs . nub' xs Nil

compress :: xs:List a -> {CList a|elems _v == elems xs}
compress = \xs . 
  match xs with
    Nil -> Nil
    Cons x3 x4 -> 
      match compress x4 with
        Nil -> Cons x3 Nil
        Cons x10 x11 -> 
          if x3 == x10
            then compress x4
            else Cons x3 (Cons x10 x11)

insert :: x:a -> xs:IList a -> {IList a|ielems _v == ielems xs + [x]}
insert = \x . \xs . 
    match xs with
      INil -> ICons x INil
      ICons x5 x6 -> 
        if x5 <= x
          then ICons x5 (insert x x6)
          else ICons x (ICons x5 x6)

insertSort :: xs:List a -> {IList a|ielems _v == elems xs}
insertSort = \xs . 
  match xs with
    Nil -> INil
    Cons x3 x4 -> insert x3
                    (insertSort x4)

sort :: xs:List a -> {IncList a|elems _v == elems xs && len _v == len xs}
sort = \xs . 
  let f0 = \x2 . \x3 . \x4 . 
          match x4 with
            Nil -> Cons x3 Nil
            Cons x12 x13 -> 
              if x3 <= x12
                then Cons x3 (Cons x12 x13)
                else Cons x12 (f0 x13 x3 x13) in
  foldr f0 Nil xs

split :: xs:List a -> {Pair {List a|abs (len xs - len _v * 2) <= 1} List a|len xs == len (fst _v) + len (snd _v) && elems xs == elems (fst _v) + elems (snd _v)}
split = \xs . 
  match xs with
    Nil -> Pair xs xs
    Cons x5 x6 -> 
      match x6 with
        Nil -> Pair x6 xs
        Cons x11 x12 -> 
          match split x12 with
            Pair x16 x17 -> Pair (Cons x11
                                    x16) (Cons x5 x17)

merge :: xs:IList a -> ys:IList a -> {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys}
merge = \xs . \ys . 
    match ys with
      INil -> xs
      ICons x4 x5 -> 
        match xs with
          INil -> ys
          ICons x8 x9 -> 
            if x4 <= x8
              then ICons x4 (merge (ICons x8
                                      x9) x5)
              else ICons x8 (merge x9 (ICons
                                         x4 x5))

mergeSort :: xs:List a -> {IList a|ilen _v == len xs && ielems _v == elems xs}
mergeSort = \xs . 
  match xs with
    Nil -> INil
    Cons x3 x4 -> 
      match x4 with
        Nil -> ICons x3 INil
        Cons x9 x10 -> 
          match split xs with
            Pair x14 x15 -> merge (mergeSort
                                     x14) (mergeSort x15)

partition :: p:a -> xs:List a -> {Pair List {a|_v <= p} List {a|_v > p}|len (fst _v) + len (snd _v) == len xs && elems (fst _v) + elems (snd _v) == elems xs}
partition = \p . \xs . 
    match xs with
      Nil -> Pair Nil Nil
      Cons x5 x6 -> 
        match partition p x6 with
          Pair x11 x12 -> 
            if p < x5
              then Pair x11 (Cons x5 x12)
              else Pair (Cons x5 x11) x12

pivotAppend :: p:a -> xs:IList {a|_v <= p} -> ys:IList {a|_v > p} -> {IList a|ilen _v == (ilen xs + ilen ys) + 1 && ielems _v == (ielems xs + ielems ys) + [p]}
pivotAppend = \p . \xs . \ys . 
      match xs with
        INil -> ICons p ys
        ICons x5 x6 -> ICons x5
                         (pivotAppend p x6 ys)

quickSort :: xs:List a -> {IList a|ilen _v == len xs && ielems _v == elems xs}
quickSort = \xs . 
  match xs with
    Nil -> INil
    Cons x3 x4 -> 
      match partition x3 x4 with
        Pair x9 x10 -> pivotAppend x3
                         (quickSort x9) (quickSort x10)

elem :: x:a -> t:Tree a -> {Bool|_v == (x in telems t)}
elem = \x . \t . 
    match t with
      Empty -> false
      Node x4 x5 x6 -> 
        if x4 == x
          then not false
          else or (elem x x5) (elem x x6)

flatten :: t:Tree a -> {List a|len _v == size t}
flatten = \t . 
  match t with
    Empty -> Nil
    Node x4 x5 x6 -> Cons x4 (append
                                (flatten x5) (flatten x6))

member :: x:a -> t:BST a -> {Bool|_v == (x in telems t)}
member = \x . \t . 
    match t with
      Empty -> false
      Node x4 x5 x6 -> 
        if (x <= x4) && (x4 <= x)
          then true
          else 
            if x <= x4
              then member x x5
              else member x x6

insert :: x:a -> t:BST a -> {BST a|telems _v == telems t + [x]}
insert = \x . \t . 
    match t with
      Empty -> Node x Empty Empty
      Node x7 x8 x9 -> 
        if (x <= x7) && (x7 <= x)
          then t
          else 
            if x7 <= x
              then Node x7 x8 (insert x x9)
              else Node x7 (insert x x8) x9

extractMin :: t:{BST a|size _v > 0} -> {MinPair a|telems t == [min _v] + telems (rest _v)}
extractMin = \t . 
  match t with
    Empty -> error
    Node x4 x5 x6 -> 
      match x5 with
        Empty -> MinPair x4 x6
        Node x12 x13 x14 -> 
          match extractMin x5 with
            MinPair x18 x19 -> MinPair x18
                                 (Node x4 x19 x6)

delete :: t:BST a -> x:a -> {BST a|telems _v == telems t - [x]}
delete = \t . \x . 
    match t with
      Empty -> t
      Node x4 x5 x6 -> 
        if (x4 != x) && (x4 <= x)
          then Node x4 x5 (delete x6 x)
          else 
            if x4 != x
              then Node x4 (delete x5 x) x6
              else 
                match x5 with
                  Empty -> x6
                  Node x20 x21 x22 -> Node x20 x21
                                        (delete (Node x x22 x6) x4)

