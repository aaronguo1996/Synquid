add :: x:Nat -> y:Nat -> {Int|_v == x + y}
add = \x . \y . 
    if x <= 0
      then y
      else add (dec x) (inc y)

null :: xs:List a -> {Bool|_v == (len xs == 0)}
null = \xs . 
  match xs with
    Nil -> true
    Cons x7 x8 -> false

elem :: x:a -> xs:List a -> {Bool|_v == (x in elems xs)}
elem = \x . \xs . 
    match xs with
      Nil -> false
      Cons x9 x10 -> 
        if x9 == x
          then true
          else elem x x10

stutter :: xs:List a -> {List a|len _v == 2 * len xs}
stutter = \xs . 
  match xs with
    Nil -> xs
    Cons x7 x8 -> Cons x7 (Cons x7
                             (stutter x8))

replicate :: n:Nat -> x:a -> {List a|len _v == n}
replicate = \n . \x . 
    if n <= 0
      then Nil
      else Cons x (replicate (dec n)
                     x)

append :: xs:List a -> ys:List a -> {List a|len _v == len xs + len ys && elems _v == elems xs + elems ys}
append = \xs . \ys . 
    match xs with
      Nil -> ys
      Cons x13 x14 -> Cons x13 (append
                                  x14 ys)

concat :: xss:ListOfLists a -> {List a|len _v == sumLen xss}
concat = \xss . 
  match xss with
    Nil2 -> Nil
    Cons2 x11 x12 -> append x11
                       (concat x12)

take :: n:Nat -> xs:{List a|len _v >= n} -> {List a|len _v == n}
take = \n . \xs . 
    if 0 != n
      then 
        match xs with
          Nil -> error
          Cons x11 x12 -> Cons x11 (take
                                      (dec n) x12)
      else Nil

drop :: n:Nat -> xs:{List a|len _v >= n} -> {List a|len _v == len xs - n}
drop = \n . \xs . 
    if 0 != n
      then 
        match xs with
          Nil -> error
          Cons x11 x12 -> drop (dec n) x12
      else xs

delete :: x:a -> xs:List a -> {List a|elems _v == elems xs - [x]}
delete = \x . \xs . 
    match xs with
      Nil -> xs
      Cons x9 x10 -> 
        if x9 == x
          then delete x x10
          else Cons x9 (delete x x10)

map :: f:(arg0:a -> b) -> xs:List a -> {List b|len _v == len xs}
map = \f . \xs . 
    match xs with
      Nil -> Nil
      Cons x12 x13 -> Cons (f x12)
                        (map f x13)

zipWith :: f:(arg1:a -> arg0:b -> c) -> xs:List a -> ys:{List b|len _v == len xs} -> {List c|len _v == len xs}
zipWith = \f . \xs . \ys . 
      match xs with
        Nil -> Nil
        Cons x17 x18 -> 
          match ys with
            Nil -> error
            Cons x21 x22 -> Cons (f x17 x21)
                              (zipWith f x18 x22)

zip :: xs:List a -> ys:{List b|len _v == len xs} -> {List Pair a b|len _v == len xs}
zip = \xs . \ys . 
    match xs with
      Nil -> Nil
      Cons x11 x12 -> 
        match ys with
          Nil -> error
          Cons x15 x16 -> Cons (Pair x11
                                  x15) (zip x12 x16)

toNat :: xs:List Int -> {List Nat|len _v == len xs}
toNat = \xs . 
  let f0 = \x10 . 
      if x10 <= 0
        then neg x10
        else x10 in
  map f0 xs

product :: xs:List a -> ys:List b -> {List Pair a b|len _v == len xs * len ys}
product = \xs . \ys . 
    match xs with
      Nil -> Nil
      Cons x16 x17 -> 
        let f0 = \x25 . Pair x16 x20 in
        append (map f0 ys) (product x17
                              ys)

extractMin :: xs:{List a|len _v > 0} -> {MinPair a|elems xs == [min _v] + elems (rest _v) && len xs == 1 + len (rest _v)}
extractMin = \xs . 
  match xs with
    Nil -> error
    Cons x9 x10 -> 
      match x10 with
        Nil -> MinPair x9 Nil
        Cons x15 x16 -> 
          match extractMin x10 with
            MinPair x20 x21 -> 
              if x9 <= x20
                then MinPair x9 (Cons x20 x21)
                else MinPair x20 (Cons x9 x21)

member :: x:a -> xs:List a -> {Bool|_v == (x in elems xs)}
member = \x . \xs . 
    match xs with
      Nil -> false
      Cons x11 x12 -> 
        if x11 == x
          then true
          else member x x12

coincidence :: xs:List a -> ys:List a -> {List a|elems _v == elems xs * elems ys}
coincidence = \xs . \ys . 
    match xs with
      Nil -> xs
      Cons x13 x14 -> 
        if member x13 ys
          then Cons x13 (coincidence x14
                           ys)
          else coincidence x14 ys

foldr :: <p :: List (a) -> b -> Bool> . f:(xs:List a -> x:a -> acc:{b|p xs _v} -> {b|p ((Cons x xs)) _v}) -> seed:{b|p (Nil) _v} -> ys:List a -> {b|p ys _v}
foldr = \f . \seed . \ys . 
      match ys with
        Nil -> seed
        Cons x20 x21 -> f x21 x20 (foldr
                                     f seed x21)

length :: xs:List a -> {Int|_v == len xs}
length = \xs . 
  let f0 = \x14 . \x15 . \x16 .
          inc x16 in
  foldr f0 zero xs

append :: xs:List a -> ys:List a -> {List a|len _v == len xs + len ys}
append = \xs . \ys . 
    let f0 = \x14 . \x15 . \x16 .
            Cons x15 x16 in
    foldr f0 xs ys

ith :: <p :: Int -> a -> Bool> . xs:List a <p> -> i:{Int|0 <= _v && _v < len xs} -> {a|p i _v}
ith = \xs . \i . 
    match xs with
      Nil -> error
      Cons x11 x12 -> 
        if 0 == i
          then x11
          else ith x12 (dec i)

elemIndex :: <p :: Int -> a -> Bool> . x:a -> xs:{List a <p>|x in elems _v} -> {Int|p _v x}
elemIndex = \x . \xs . 
    match xs with
      Nil -> error
      Cons x11 x12 -> 
        if x11 == x
          then zero
          else inc (elemIndex x x12)

snoc :: <p :: a -> a -> Bool> . x:a -> xs:List {a|p _v x} <p> -> {List a <p>|len _v == len xs + 1 && elems _v == elems xs + [x]}
snoc = \x . \xs . 
    match xs with
      Nil -> Cons x Nil
      Cons x11 x12 -> Cons x11 (snoc x
                                  x12)

reverse :: <p :: a -> a -> Bool> . xs:List a <p> -> {List a <p _1 _0>|len _v == len xs && elems _v == elems xs}
reverse = \xs . 
  match xs with
    Nil -> Nil
    Cons x9 x10 -> snoc x9 (reverse
                              x10)

insert :: x:a -> xs:UList a -> {UList a|elems _v == elems xs + [x]}
insert = \x . \xs . 
    match xs with
      Nil -> Cons x xs
      Cons x11 x12 -> 
        if x11 == x
          then xs
          else Cons x11 (insert x x12)

delete :: x:a -> xs:UList a -> {UList a|elems _v == elems xs - [x]}
delete = \x . \xs . 
    match xs with
      Nil -> xs
      Cons x9 x10 -> 
        if x9 == x
          then x10
          else Cons x9 (delete x x10)

range :: size:Nat -> lo:Int -> {UList {Int|lo <= _v && _v <= lo + size}|len _v == size}
range = \size . \lo . 
    if size <= 0
      then Nil
      else Cons lo (range (dec size)
                      (inc lo))

elem :: x:a -> xs:List a -> {Bool|_v == (x in elems xs)}
elem = \x . \xs . 
    match xs with
      Nil -> false
      Cons x9 x10 -> 
        if x9 == x
          then true
          else elem x x10

nub' :: xs:List a -> acc:UList a -> {UList a|elems _v == elems acc + elems xs}
nub' = \xs . \acc . 
    match xs with
      Nil -> acc
      Cons x11 x12 -> 
        if elem x11 acc
          then nub' x12 acc
          else 
            if elem x11 x12
              then nub' x12 acc
              else Cons x11 (nub' x12 acc)

nub :: xs:List a -> {UList a|elems _v == elems xs}
nub = \xs . nub' xs Nil

compress :: xs:List a -> {CList a|elems _v == elems xs}
compress = \xs . 
  match xs with
    Nil -> Nil
    Cons x7 x8 -> 
      match compress x8 with
        Nil -> Cons x7 Nil
        Cons x14 x15 -> 
          if x7 == x14
            then compress x8
            else Cons x7 (Cons x14 x15)

insert :: x:a -> xs:IList a -> {IList a|ielems _v == ielems xs + [x]}
insert = \x . \xs . 
    match xs with
      INil -> ICons x INil
      ICons x13 x14 -> 
        if x13 <= x
          then ICons x13 (insert x x14)
          else ICons x (ICons x13 x14)

insertSort :: xs:List a -> {IList a|ielems _v == elems xs}
insertSort = \xs . 
  match xs with
    Nil -> INil
    Cons x11 x12 -> insert x11
                      (insertSort x12)

sort :: xs:List a -> {IncList a|elems _v == elems xs && len _v == len xs}
sort = \xs . 
  let f0 = \x12 . \x13 . \x14 . 
          match x14 with
            Nil -> Cons x13 Nil
            Cons x37 x38 -> 
              if x37 <= x13
                then Cons x37 (f0 x38 x13 x38)
                else Cons x13 (Cons x37 x38) in
  foldr f0 Nil xs

split :: xs:List a -> {Pair {List a|abs (len xs - len _v * 2) <= 1} List a|len xs == len (fst _v) + len (snd _v) && elems xs == elems (fst _v) + elems (snd _v)}
split = \xs . 
  match xs with
    Nil -> Pair xs xs
    Cons x11 x12 -> 
      match x12 with
        Nil -> Pair x12 xs
        Cons x17 x18 -> 
          match split x18 with
            Pair x22 x23 -> Pair (Cons x11
                                    x22) (Cons x17 x23)

merge :: xs:IList a -> ys:IList a -> {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys}
merge = \xs . \ys . 
    match ys with
      INil -> xs
      ICons x10 x11 -> 
        match xs with
          INil -> ys
          ICons x14 x15 -> 
            if x10 <= x14
              then ICons x10 (merge (ICons x14
                                       x15) x11)
              else ICons x14 (merge x15 (ICons
                                           x10 x11))

mergeSort :: xs:List a -> {IList a|ilen _v == len xs && ielems _v == elems xs}
mergeSort = \xs . 
  match xs with
    Nil -> INil
    Cons x14 x15 -> 
      match x15 with
        Nil -> ICons x14 INil
        Cons x20 x21 -> 
          match split xs with
            Pair x25 x26 -> merge (mergeSort
                                     x25) (mergeSort x26)

partition :: p:a -> xs:List a -> {Pair List {a|_v <= p} List {a|_v > p}|len (fst _v) + len (snd _v) == len xs && elems (fst _v) + elems (snd _v) == elems xs}
partition = \p . \xs . 
    match xs with
      Nil -> Pair Nil Nil
      Cons x13 x14 -> 
        match partition p x14 with
          Pair x19 x20 -> 
            if x13 <= p
              then Pair (Cons x13 x19) x20
              else Pair x19 (Cons x13 x20)

pivotAppend :: p:a -> xs:IList {a|_v <= p} -> ys:IList {a|_v > p} -> {IList a|ilen _v == (ilen xs + ilen ys) + 1 && ielems _v == (ielems xs + ielems ys) + [p]}
pivotAppend = \p . \xs . \ys . 
      match xs with
        INil -> ICons p ys
        ICons x13 x14 -> ICons x13
                           (pivotAppend p x14 ys)

quickSort :: xs:List a -> {IList a|ilen _v == len xs && ielems _v == elems xs}
quickSort = \xs . 
  match xs with
    Nil -> INil
    Cons x16 x17 -> 
      match partition x16 x17 with
        Pair x22 x23 -> pivotAppend x16
                          (quickSort x22) (quickSort x23)

