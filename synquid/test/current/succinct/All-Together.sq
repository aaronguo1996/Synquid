-- data List a where
--   Nil :: List a
--   Cons :: x: a -> xs: List a -> List a
  
-- termination measure len :: List a -> {Int | _v >= 0} where
--   Nil -> 0
--   Cons x xs -> 1 + len xs  
  
data Info where
  Info :: streetAddr: Int -> zipcode: Int -> local: Bool -> Info
    
data Address where
  Address :: info: Info -> priv: Bool -> Address
  
measure isPriv :: Address -> Bool where
  Address info priv -> priv  
  
getPriv :: a:Address -> {Bool | _v == isPriv a}

data AddressBook where
  AddressBook :: business: List {Address | !(isPriv _v)} -> personal: List {Address | isPriv _v} -> AddressBook  
  
measure addressBookSize :: AddressBook -> {Int | _v >= 0} where
  AddressBook bs ps -> len bs + len ps
  
mkAddressBook :: adds: List Address -> {AddressBook | addressBookSize _v == len adds}
-- append :: xs: List a -> ys: List a -> {List a | len _v == len xs + len ys && elems _v == elems xs + elems ys}
-- mergeAddressBooks :: a: AddressBook -> b: AddressBook -> {AddressBook | addressBookSize _v == addressBookSize a + addressBookSize b}

data Heap a where
  HeapEmpty :: Heap a
  HeapNode :: x: a -> l: Heap {a | _v > x} -> r: Heap {a | _v > x} -> Heap a
                                                                              
termination measure heapSize :: Heap a -> {Int | _v >= 0} where
  HeapEmpty -> 0
  HeapNode x l r -> 1 + heapSize l + heapSize r  
  
measure heapElems :: Heap a -> Set a where
  HeapEmpty -> []
  HeapNode x l r -> heapElems l + heapElems r + [x]    

insertHeap :: t: Heap a -> x: a -> {Heap a | heapElems _v == heapElems t + [x]}

false :: {Bool | !_v}
not :: x: Bool -> {Bool | _v == !x}
or :: x: Bool -> y: Bool -> {Bool | _v == (x || y)}

memberHeap :: x: a -> t: Heap a -> {Bool | _v == (x in heapElems t)}

data BST a where
  BSTEmpty :: BST a
  BSTNode  :: x: a -> l: BST {a | _v < x} -> r: BST {a | x < _v} -> BST a
                          
termination measure bstSize :: BST a -> {Int | _v >= 0} where
  BSTEmpty -> 0
  BSTNode x l r -> bstSize l + bstSize r + 1
  
measure bstElems :: BST a -> Set a where
  BSTEmpty -> []
  BSTNode x l r -> bstElems l + bstElems r + [x]

deleteBST :: t: BST a -> x: a -> {BST a | bstElems _v == bstElems t - [x]}

data MinPairBST a where
  MinPairBST :: x: a -> t: BST {a | x < _v}  -> MinPairBST a
  
measure bstMin :: MinPairBST a -> a where
  MinPairBST x t -> x
  
measure bstRest :: MinPairBST a -> BST a where
  MinPairBST x t -> t  

extractMinBST :: t: {BST a | bstSize _v > 0} -> {MinPairBST a | bstElems t == [bstMin _v] + bstElems (bstRest _v)}
insertBST :: x: a -> t: BST a -> {BST a | bstElems _v == bstElems t + [x]}
memberBST :: x: a -> t: BST a -> {Bool | _v == (x in bstElems t)}

data IList a where
  INil :: IList a
  ICons :: x: a -> xs: IList {a | x < _v} -> IList a
  
termination measure ilen :: IList a -> {Int | _v >= 0} where
  INil -> 0
  ICons x xs -> 1 + ilen xs  

measure ielems :: IList a -> Set a where
  INil -> []
  ICons x xs -> [x] + ielems xs  

toBST :: xs: List a -> {BST a | bstElems _v == elems xs}
pivotAppendBST :: p: a -> xs: IList {a | _v < p} -> ys: IList {a | _v > p} -> {IList a | ilen _v == ilen xs + ilen ys + 1 && ielems _v == ielems xs + ielems ys + [p] }
flatten :: t: BST a -> {IList a | ielems _v == bstElems t}
sort :: xs: List a -> {IList a | ielems _v == elems xs}

inline bit b = if b then 1 else 0 

data BitVec where
  Bit :: x: Bool -> BitVec
  BitCons :: x: Bool -> xs: BitVec -> BitVec
  
termination measure bvLen :: BitVec -> {Int | _v > 0} where
  Bit x -> 1
  BitCons x xs -> 1 + bvLen xs   
  
measure value :: BitVec -> {Int | _v >= 0} where
  Bit x -> bit x
  BitCons x xs -> bit x + 2 * (value xs)
    
true :: {Bool | _v}
  
plus' :: x: BitVec -> y: {BitVec | bvLen _v == bvLen x} -> carry: Bool -> {BitVec | value _v == value x + value y + bit carry}
plus :: x: BitVec -> y: {BitVec | bvLen _v == bvLen x} -> {BitVec | value _v == value x + value y}
dec :: x: {BitVec | value _v > 0} -> {BitVec | value _v == value x - 1}
inc :: x: BitVec -> {BitVec | value _v == value x + 1}

-- zero :: {Int | _v == 0}
-- one :: {Int | _v == 1}
-- two :: {Int | _v == 2}
incInt :: x: Int -> {Int | _v == x + 1}
decInt :: x: Int -> {Int | _v == x - 1}

data AST where
  Zero :: AST
  One :: AST
  Two :: AST
  PlusNode :: l: AST -> r: AST -> AST
  MinusNode :: l: AST -> r: AST -> AST
  ProductNode :: l: AST -> r: AST -> AST
  
termination measure astSize :: AST -> {Int | _v >= 0} where
  Zero -> 1
  One -> 1
  Two -> 1
  PlusNode l r -> 1 + astSize l + astSize r + 1
  MinusNode l r -> 1 + astSize l + astSize r + 1
  ProductNode l r -> 1 + astSize l + astSize r + 1

measure result :: AST -> Int where
  Zero -> 0
  One -> 1
  Two -> 2
  PlusNode l r -> result l + result r
  MinusNode l r -> result l - result r
  ProductNode l r -> result l * result r

type OpCode = {Int | _v >= 0 && _v <= 2}

data PAST where
  IntNode :: x: Int -> PAST
  OpNode :: op: OpCode -> l: PAST -> r: PAST -> PAST
  
termination measure size2 :: PAST -> {Int | _v >= 0} where
  IntNode x -> 1
  OpNode op l r -> 1 + size2 l + size2 r

measure result2 :: PAST -> Int where
  IntNode x -> x
  OpNode op l r -> if op == 0 then result2 l + result2 r else (if op == 1 then result2 l - result2 r else result2 l * result2 r)

transform :: x: AST -> {PAST | result2 _v == result x}
merge :: xs: IList a -> ys: IList a -> {IList a | ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys}

data Pair a b where
  Pair :: x: a -> y: b -> Pair a b
  
measure fst :: Pair a b -> a where
  Pair x y -> x
  
measure snd :: Pair a b -> b where
  Pair x y -> y

inline abs x = if x >= 0 then x else -x  
  
-- split :: xs: List a -> {Pair {List a | abs (len xs - len _v * 2) <= 1} (List a) | len (fst _v) + len (snd _v) == len xs && elems (fst _v) + elems (snd _v) == elems xs }  
-- mergeForSort :: xs: IList a -> ys: {IList a | abs (ilen _v - ilen xs) <= 1 } -> {IList a | ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys}
-- mergeSort :: xs: List a -> {IList a | ilen _v == len xs && ielems _v == elems xs }
-- pivotAppend :: p: a -> xs: IList {a | _v <= p} -> ys: IList {a | _v > p} -> {IList a | ilen _v == ilen xs + ilen ys + 1 && ielems _v == ielems xs + ielems ys + [p] }
-- partition :: p: a -> xs: List a -> {Pair {List {a | _v <= p} | len _v >= 0} {List {a | _v > p} | len _v >= 0} | len (fst _v) + len (snd _v) == len xs && elems (fst _v) + elems (snd _v) == elems xs }
-- quickSort :: xs: List a -> {IList a | ilen _v == len xs && ielems _v == elems xs }

type Nat = {Int | _v >= 0}

add :: x:Nat -> y:Nat -> {Int | _v == x + y}

all :: <p :: a -> Bool> . 
  f:(x: a -> {Bool | _v == p x}) -> xs: List a -> { Bool | _v <==> (elems xs == [x | x in elems xs && p x]) }

any :: <p :: a -> Bool> . 
  f:(x: a -> {Bool | _v == p x}) -> xs: List a -> { Bool | _v <==> !([x | x in elems xs && p x] == []) }

data PList a <p :: a -> PList a -> Bool> where
  PNil :: PList a <p>
  PCons :: x: a -> xs: {PList a <p> | p x _v} -> PList a <p>
  
termination measure len :: PList a -> {Int | _v >= 0} where
  PNil -> 0
  PCons x xs -> 1 + len xs  

measure elems :: PList a -> Set a where
  PNil -> []
  PCons x xs -> [x] + elems xs

measure heads :: PList a -> Set a where
  PNil -> []
  PCons x xs -> [x]

type List a = PList a <{True}>  
type CList a = PList a <{!(_0 in heads _1)}>

compress :: xs: List a -> {CList a | elems _v == elems xs}

data ListOfLists a where
  Nil2 :: ListOfLists a
  Cons2 :: x: List a -> xs: ListOfLists a -> ListOfLists a
  
termination measure len2 :: ListOfLists a -> {Int | _v >= 0} where
  Nil2 -> 0
  Cons2 x xs -> 1 + len2 xs
  
measure sumLen :: ListOfLists a -> {Int | _v >= 0} where
  Nil2 -> 0
  Cons2 x xs -> sumLen xs + len x

concat :: xss: ListOfLists a -> { List a | len _v == sumLen xss }
delete :: x: a -> xs: List a -> {List a | elems _v == elems xs - [x]}
drop :: n: Nat -> xs: {List a | len _v >= n} -> {List a | len _v == len xs - n}
elem :: x: a -> xs: List a -> {Bool | _v == (x in elems xs)}
-- elemIndex :: <p :: Int -> a -> Bool> . x: a -> xs: {List a <p> | x in elems _v} -> {Int | p _v x}
-- appendFold :: xs: List a -> ys: List a -> {List a | len _v == len xs + len ys}
-- length :: xs: List a -> {Int | _v == len xs}
-- insert :: x: a -> xs: IList a -> {IList a | ielems _v == ielems xs + [x]}
-- insertSort :: xs: List a -> {IList a | ielems _v == elems xs}
-- eq :: x: a -> y: a -> {Bool | _v == (x == y)}
-- member :: x: a -> xs: List a -> {Bool | _v == (x in elems xs)}
-- coincidence :: xs: List a -> ys: List a -> {List a | elems _v == elems xs * elems ys}
-- ith :: <p :: Int -> a -> Bool> . xs: List a <p> -> i: {Int | 0 <= _v && _v < len xs} -> {a | p i _v}
-- map :: f: (a -> b) -> xs: List a -> {List b | len _v == len xs}

-- type UList a = PList a <{!(_0 in elems _1)}>

-- nub' :: xs: List a -> acc: UList a -> {UList a | elems _v == elems acc + elems xs}
-- nub :: xs: List a -> {UList a | elems _v == elems xs}
-- null :: xs: List a -> {Bool | _v == (len xs == 0)}
-- product :: xs: List a -> ys: List b -> {List (Pair (a) (b)) | len _v == len xs * len ys}
-- replicate :: n: Nat -> x: a -> {List a | len _v == n}
-- reverse :: <p :: a -> a -> Bool> . xs: List a <p> -> {List a <{p _1 _0}> | len _v == len xs && elems _v == elems xs}
-- snoc :: <p :: a -> a -> Bool> . x: a -> xs: List {a | p _v x} <p> -> {List a <p> | len _v == len xs + 1 && elems _v == elems xs + [x]}
-- stutter :: xs: List a -> {List a | len _v == 2 * len xs}
-- take :: n: Nat -> xs: {List a | len _v >= n} -> {List a | len _v == n}
-- neg :: x: Int -> {Int | _v == -x}
-- toNat :: xs: List Int -> {List Nat | len _v == len xs}
-- zip :: xs: List a -> ys: {List b | len _v == len xs} -> {List (Pair (a) (b)) | len _v == len xs}
-- zipWith :: f: (a -> b -> c) -> xs: List a -> ys: {List b | len _v == len xs} -> {List c | len _v == len xs}
-- udelete :: x: a -> xs: UList a -> {UList a | elems _v == elems xs - [x]}
-- uinsert :: x: a -> xs: UList a -> {UList a | elems _v == elems xs + [x]}
-- urange :: size: Nat -> lo: Int -> {UList {Int | lo <= _v && _v <= lo + size} | len _v == size}
mkAddressBook = ??