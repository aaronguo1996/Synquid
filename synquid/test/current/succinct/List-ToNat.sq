qualifier {x <= 0, x != 0}

type Nat = {Int | _v >= 0}

data List a where
	Nil :: List a
	Cons :: x: a -> xs: List a -> List a

termination measure len :: List a -> {Int | _v >= 0} where
  Nil -> 0
  Cons x xs -> 1 + len xs  

measure elems :: List a -> Set a where
  Nil -> []
  Cons x xs -> [x] + elems xs

data Char

magic :: x: Int -> y: Int -> z: Int -> xx:List Int -> yy: Char -> {List Nat | len _v >= len xx}
neg :: x: Int -> {Int | _v == -x}
inc :: x: Int -> {Int | _v == x + 1}
dec :: x: Int -> {Int | _v == x - 1}
-- map :: (a -> b) -> xs: List a -> {List b | len _v == len xs}

toNat :: xs: List Int -> {List Nat | len _v == len xs}
toNat = ??