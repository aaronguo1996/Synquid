qualifier {x <= y, x != y}

data Expr where
  IntNode :: n: Int -> Expr
  Plus :: l: Expr -> r: Expr -> Expr
  Minus :: l: Expr -> r: Expr -> Expr
  Product :: l: Expr -> r: Expr -> Expr
  
termination measure size :: Expr -> {Int | _v >= 0} where
  IntNode n -> 1
  Plus l r -> 1 + size l + size r + 1
  Minus l r -> 1 + size l + size r + 1
  Product l r -> 1 + size l + size r + 1

measure result :: Expr -> Int where
  IntNode n -> n
  Plus l r -> result l + result r
  Minus l r -> result l - result r
  Product l r -> result l * result r

measure ints :: Expr -> Set Int where
  IntNode n -> [n]
  Plus l r -> ints l + ints r
  Minus l r -> ints l + ints r
  Product l r -> ints l + ints r

puzzle :: a: {Expr | result _v == 1 && ints _v == [1]} -> 
          b: {Expr | result _v == 5 && ints _v == [5]} -> 
          c: {Expr | result _v == 3 && ints _v == [3]} -> 
          d: {Expr | result _v == 4 && ints _v == [4]} -> 
          {Expr | result _v == 24 && ints _v == [1,5,3,4]}
puzzle = ??