-- increase depth
--src, dst, lineweight, label, color, linestyle, arrowstyle, vertexstyle, vertexweight
List (Pair (Pair (Pair Int Int) Int) String) -- src, dst, weight, label
List (Pair Int (Pair (Int Int))) -- src, dst, weight
List (Pair Int Int) -- src, dst

type UnweightedGraph = Map Int (Map Int (List Int))
type WeightedGraph = Map Int (Map Int (List (Pair Int Int)))

measure mapLen :: Map a b -> {Int | _v >= 0} where
  Map k v -> 

assignWeight :: weights: List Int -> graph: UnweightedGraph -> {WeightedGraph}

data Wrapped a where
  Wrapped :: content: a -> Wrapped a

wrap :: f:(s -> Pair a s) -> state: s -> {Wrapped a | True}
wrap = ??

unwrap :: Wrapped a -> (s -> Pair a s)
compose :: f: (arg0: s -> Pair a s) ->         {- first function -}
           g: (arg1: a -> (arg2: s -> Pair b s)) ->  {- second function,  note type is similar to  (a,s) -> (b,s) -}
           state: s -> Pair b s              {- composed function -}
-- compose = ??

data IOMonad s where
  IOMonad :: state: s -> IOMonad s

measure ioState :: IOMonad s -> s where
  IOMonad state -> state

data MaybeMonad s where
  MaybeMonad :: state: s -> MaybeMonad s

measure maybeState :: MaybeMonad s -> s where
  MaybeMonad state -> state

data StateMonad s where
  StateMonad :: state: s -> StateMonad s

measure state :: StateMonad s -> s where
  StateMonad state -> state

getState :: m: StateMonad (IOMonad (MaybeMonad s)) -> {s | maybeState (ioState (state m)) == _v}
getState = ??

setState :: sm: StateMonad s1 -> im: IOMonad s2 -> mm: MaybeMonad s3 -> {StateMonad (IOMonad (MaybeMonad s1)) | True}
setState = ??