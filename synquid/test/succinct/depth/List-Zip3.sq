data Pair a b where
  Pair :: x: a -> y: b -> Pair a b

measure fst :: Pair a b -> a where
  Pair x y -> x
  
measure snd :: Pair a b -> b where
  Pair x y -> y

data List a where
  Nil :: List a
  Cons :: x: a -> xs: List a -> List a
  
termination measure len :: List a -> {Int | _v >= 0} where
  Nil -> 0
  Cons x xs -> 1 + len xs  

measure elems :: List a -> Set a where
  Nil -> []
  Cons x xs -> [x] + elems xs

type Nat = {Int | _v >= 0}

{- Useless components -}
replicate :: n: Nat -> x: a -> {List a | len _v == n}
partition :: p: a -> xs: List a -> {Pair (List {a | _v <= p}) (List {a | _v > p}) | len (fst _v) + len (snd _v) == len xs && elems (fst _v) + elems (snd _v) == elems xs }
drop :: n: Nat -> xs: {List a | len _v >= n} -> {List a | len _v == len xs - n}
delete :: x: a -> xs: List a -> {List a | elems _v == elems xs - [x]}
take :: n: Nat -> xs: {List a | len _v >= n} -> {List a | len _v == n}

{- Useful components -}
zip :: xs: List a -> ys: {List b | len _v == len xs} -> {List (Pair (a) (b)) | len _v == len xs}

{- Synthesis goal -}
zip3 :: xs: List a -> 
        ys: {List b | len _v == len xs} -> 
        zs: {List c | len _v == len xs} -> 
        {List ((Pair (Pair a b) c)) | len _v == len xs}
zip3 = ??