ADD __goal__ : All {a,}. {{IList |  | a, |  | },{IList |  | a, |  | },}->{IList |  | a, |  | }
ADD ICons : All {A0,}. {A0,{IList |  | A0, |  | },}->{IList |  | A0, |  | }
ADD INil : All {A1,}. {IList |  | A1, |  | }
ADD merge : All {A2,}. {{IList |  | A2, |  | },{IList |  | A2, |  | },}->{IList |  | A2, |  | }
Checking error in
error
TYPE ERROR: Cannot find sufficiently strong refinements
when checking error in
error
ADD xs : All {a,}. {IList |  | a, |  | }
ADD ys : All {a,}. {IList |  | a, |  | }
Checking error in
\xs . \ys . error
TYPE ERROR: Cannot find sufficiently strong refinements
when checking error in
\xs . \ys . error
Looking for type {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys}
Current queue size 0
Checking (?? :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys}) in
\xs . \ys . ??
*******************Filling holes in (?? :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys})
Looking for succinct type {IList |  | a, |  | }
Trying INil
Trying merge
Trying xs
Trying ys
Current queue size 3
Checking INil in
\xs . \ys . ??
TYPE ERROR: Cannot find sufficiently strong refinements
Current queue size 2
Checking xs in
\xs . \ys . ??
Checking program xs
Checking xs :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . ??
ADD x10 : All {a,}. a
ADD x11 : All {a,}. {IList |  | a, |  | }
Checking error in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> error
TYPE ERROR: Cannot find sufficiently strong refinements
when checking error in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> error
Checking error in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> error
TYPE ERROR: Cannot find sufficiently strong refinements
when checking error in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> error
Looking for type {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys}
Current queue size 0
Checking (?? :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys}) in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> ??
*******************Filling holes in (?? :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys})
Looking for succinct type {IList |  | a, |  | }
Trying ICons
Trying INil
Trying x11
Trying merge
Trying xs
Trying ys
Current queue size 5
Checking INil in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> ??
TYPE ERROR: Cannot find sufficiently strong refinements
Current queue size 4
Checking x11 in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> ??
TYPE ERROR: Cannot find sufficiently strong refinements
Current queue size 3
Checking xs in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> ??
TYPE ERROR: Cannot find sufficiently strong refinements
Current queue size 2
Checking ys in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> ??
Checking program ys
Checking ys :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> ??
ADD x14 : All {a,}. a
ADD x15 : All {a,}. {IList |  | a, |  | }
Checking error in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> error
TYPE ERROR: Cannot find sufficiently strong refinements
when checking error in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> error
Looking for type {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys}
Current queue size 0
Checking (?? :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys}) in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> ??
*******************Filling holes in (?? :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys})
Looking for succinct type {IList |  | a, |  | }
Trying ICons
Trying INil
Trying x15
Trying x11
Trying merge
Trying xs
Trying ys
Current queue size 6
Checking INil in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> ??
TYPE ERROR: Cannot find sufficiently strong refinements
Current queue size 5
Checking x15 in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> ??
TYPE ERROR: Cannot find sufficiently strong refinements
Current queue size 4
Checking x11 in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> ??
TYPE ERROR: Cannot find sufficiently strong refinements
Current queue size 3
Checking xs in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> ??
TYPE ERROR: Cannot find sufficiently strong refinements
Current queue size 2
Checking ys in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> ??
TYPE ERROR: Cannot find sufficiently strong refinements
Current queue size 1
Checking merge
           (?? :: {IList A5|ilen _v >= 0 && ilen _v <= ilen xs})
           (?? :: {IList A5|(ilen _v >= 0 && ilen _v <= ilen ys) && ((ilen x16 >= 0 && ilen x16 < ilen xs) || (ilen _v >= 0 && ilen _v < ilen ys))}) in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> ??
TYPE ERROR: Found inconsistent refinements
Current queue size 0
Checking ICons (?? :: A5)
           (?? :: IList {A5|x16 <= _v}) in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> ??
*******************Filling holes in ICons
                                      (?? :: A5)
                                      (?? :: IList {A5|x16 <= _v})
Looking for succinct type a
Trying x10
Trying x14
Current queue size 1
Checking ICons x14
           (?? :: IList {A5|x14 <= _v}) in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> ??
*******************Filling holes in ICons
                                      x14 (?? :: IList {A5|x14 <= _v})
Looking for succinct type {IList |  | a, |  | }
Trying ICons
Trying INil
Trying x15
Trying x11
Trying merge
Trying xs
Trying ys
Current queue size 7
Checking ICons x14 INil in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> ??
Checking program ICons x14 INil
Checking ICons x14
           INil :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> ??
TYPE ERROR: Cannot find sufficiently strong refinements
when checking ICons x14 INil ::
{IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys}
in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> ICons x14 INil
Current queue size 6
Checking ICons x14 x15 in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> ??
Checking program ICons x14 x15
Checking ICons x14
           x15 :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> ??
TYPE ERROR: Cannot find sufficiently strong refinements
when checking ICons x14 x15 ::
{IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys}
in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> ICons x14 x15
Current queue size 5
Checking ICons x14 x11 in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> ??
Checking program ICons x14 x11
Checking ICons x14
           x11 :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> ??
TYPE ERROR: Cannot find sufficiently strong refinements
when checking ICons x14 x11 ::
{IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys}
in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> ICons x14 x11
Current queue size 4
Checking ICons x14 xs in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> ??
TYPE ERROR: Cannot find sufficiently strong refinements
Current queue size 3
Checking ICons x14 ys in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> ??
TYPE ERROR: Cannot find sufficiently strong refinements
Current queue size 2
Checking ICons x10
           (?? :: IList {A5|x10 <= _v}) in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> ??
*******************Filling holes in ICons
                                      x10 (?? :: IList {A5|x10 <= _v})
Looking for succinct type {IList |  | a, |  | }
Trying ICons
Trying INil
Trying x15
Trying x11
Trying merge
Trying xs
Trying ys
Current queue size 8
Checking ICons x10 INil in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> ??
Checking program ICons x10 INil
Checking ICons x10
           INil :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> ??
TYPE ERROR: Cannot find sufficiently strong refinements
when checking ICons x10 INil ::
{IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys}
in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> ICons x10 INil
Current queue size 7
Checking ICons x10 x15 in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> ??
Checking program ICons x10 x15
Checking ICons x10
           x15 :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> ??
TYPE ERROR: Cannot find sufficiently strong refinements
when checking ICons x10 x15 ::
{IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys}
in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> ICons x10 x15
Current queue size 6
Checking ICons x10 x11 in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> ??
Checking program ICons x10 x11
Checking ICons x10
           x11 :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> ??
TYPE ERROR: Cannot find sufficiently strong refinements
when checking ICons x10 x11 ::
{IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys}
in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> ICons x10 x11
Current queue size 5
Checking ICons x10 xs in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> ??
TYPE ERROR: Cannot find sufficiently strong refinements
Current queue size 4
Checking ICons x10 ys in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> ??
TYPE ERROR: Cannot find sufficiently strong refinements
Current queue size 3
Checking ICons x14 (merge
                      (?? :: {IList A6|ilen _v >= 0 && ilen _v <= ilen xs})
                      (?? :: {IList A6|(ilen _v >= 0 && ilen _v <= ilen ys) && ((ilen x18 >= 0 && ilen x18 < ilen xs) || (ilen _v >= 0 && ilen _v < ilen ys))})) in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> ??
*******************Filling holes in ICons
                                      x14 (merge
                                             (?? :: {IList A6|ilen _v >= 0 && ilen _v <= ilen xs})
                                             (?? :: {IList A6|(ilen _v >= 0 && ilen _v <= ilen ys) && ((ilen x18 >= 0 && ilen x18 < ilen xs) || (ilen _v >= 0 && ilen _v < ilen ys))}))
Looking for succinct type {IList |  | a, |  | }
Trying ICons
Trying INil
Trying x15
Trying x11
Trying merge
Trying xs
Trying ys
Current queue size 9
Checking ICons x14 (ICons
                      (?? :: A6)
                      (?? :: IList {A6|x18 <= _v})) in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> ??
*******************Filling holes in ICons
                                      x14 (ICons (?? :: A6)
                                             (?? :: IList {A6|x18 <= _v}))
Looking for succinct type a
Trying x10
Trying x14
Current queue size 10
Checking ICons x10 (merge
                      (?? :: {IList A6|ilen _v >= 0 && ilen _v <= ilen xs})
                      (?? :: {IList A6|(ilen _v >= 0 && ilen _v <= ilen ys) && ((ilen x18 >= 0 && ilen x18 < ilen xs) || (ilen _v >= 0 && ilen _v < ilen ys))})) in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> ??
*******************Filling holes in ICons
                                      x10 (merge
                                             (?? :: {IList A6|ilen _v >= 0 && ilen _v <= ilen xs})
                                             (?? :: {IList A6|(ilen _v >= 0 && ilen _v <= ilen ys) && ((ilen x18 >= 0 && ilen x18 < ilen xs) || (ilen _v >= 0 && ilen _v < ilen ys))}))
Looking for succinct type {IList |  | a, |  | }
Trying ICons
Trying INil
Trying x15
Trying x11
Trying merge
Trying xs
Trying ys
Current queue size 16
Checking ICons x10 (ICons
                      (?? :: A6)
                      (?? :: IList {A6|x18 <= _v})) in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> ??
*******************Filling holes in ICons
                                      x10 (ICons (?? :: A6)
                                             (?? :: IList {A6|x18 <= _v}))
Looking for succinct type a
Trying x10
Trying x14
Current queue size 17
Checking ICons x14 (merge ys
                      (?? :: {IList A6|(ilen _v >= 0 && ilen _v <= ilen ys) && ((ilen ys >= 0 && ilen ys < ilen xs) || (ilen _v >= 0 && ilen _v < ilen ys))})) in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> ??
TYPE ERROR: Cannot find sufficiently strong refinements
Current queue size 16
Checking ICons x14 (merge xs
                      (?? :: {IList A6|(ilen _v >= 0 && ilen _v <= ilen ys) && ((ilen xs >= 0 && ilen xs < ilen xs) || (ilen _v >= 0 && ilen _v < ilen ys))})) in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> ??
TYPE ERROR: Cannot find sufficiently strong refinements
Current queue size 15
Checking ICons x14 (merge (merge
                             (?? :: {IList A7|ilen _v >= 0 && ilen _v <= ilen xs})
                             (?? :: {IList A7|(ilen _v >= 0 && ilen _v <= ilen ys) && ((ilen x20 >= 0 && ilen x20 < ilen xs) || (ilen _v >= 0 && ilen _v < ilen ys))}))
                      (?? :: LET x18:({IList A7|ilen _v == ilen x20 + ilen x21 && ielems _v == ielems x20 + ielems x21}) IN {IList A6|(ilen _v >= 0 && ilen _v <= ilen ys) && ((ilen x18 >= 0 && ilen x18 < ilen xs) || (ilen _v >= 0 && ilen _v < ilen ys))})) in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> ??
*******************Filling holes in ICons
                                      x14 (merge (merge
                                                    (?? :: {IList A7|ilen _v >= 0 && ilen _v <= ilen xs})
                                                    (?? :: {IList A7|(ilen _v >= 0 && ilen _v <= ilen ys) && ((ilen x20 >= 0 && ilen x20 < ilen xs) || (ilen _v >= 0 && ilen _v < ilen ys))}))
                                             (?? :: LET x18:({IList A7|ilen _v == ilen x20 + ilen x21 && ielems _v == ielems x20 + ielems x21}) IN {IList A6|(ilen _v >= 0 && ilen _v <= ilen ys) && ((ilen x18 >= 0 && ilen x18 < ilen xs) || (ilen _v >= 0 && ilen _v < ilen ys))}))
Looking for succinct type {IList |  | a, |  | }
Trying ICons
Trying INil
Trying x15
Trying x11
Trying merge
Trying xs
Trying ys
Current queue size 21
Checking ICons x14 (merge x11
                      (?? :: {IList A6|(ilen _v >= 0 && ilen _v <= ilen ys) && ((ilen x11 >= 0 && ilen x11 < ilen xs) || (ilen _v >= 0 && ilen _v < ilen ys))})) in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> ??
TYPE ERROR: Cannot find sufficiently strong refinements
Current queue size 20
Checking ICons x14 (merge x15
                      (?? :: {IList A6|(ilen _v >= 0 && ilen _v <= ilen ys) && ((ilen x15 >= 0 && ilen x15 < ilen xs) || (ilen _v >= 0 && ilen _v < ilen ys))})) in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> ??
*******************Filling holes in ICons
                                      x14 (merge x15
                                             (?? :: {IList A6|(ilen _v >= 0 && ilen _v <= ilen ys) && ((ilen x15 >= 0 && ilen x15 < ilen xs) || (ilen _v >= 0 && ilen _v < ilen ys))}))
Looking for succinct type {IList |  | a, |  | }
Trying ICons
Trying INil
Trying x15
Trying x11
Trying merge
Trying xs
Trying ys
Current queue size 26
Checking ICons x14 (merge x15
                      INil) in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> ??
Checking program ICons x14
                   (merge x15 INil)
Checking ICons x14 (merge x15
                      INil) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> ??
TYPE ERROR: Cannot find sufficiently strong refinements
when checking ICons x14 (merge
                           x15 INil) ::
{IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys}
in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> ICons x14
                             (merge x15 INil)
Current queue size 25
Checking ICons x14 (merge x15
                      x15) in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> ??
TYPE ERROR: Cannot find sufficiently strong refinements
Current queue size 24
Checking ICons x14 (merge x15
                      x11) in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> ??
Checking program ICons x14
                   (merge x15 x11)
Checking ICons x14 (merge x15
                      x11) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> ??
TYPE ERROR: Cannot find sufficiently strong refinements
when checking ICons x14 (merge
                           x15 x11) ::
{IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys}
in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> ICons x14
                             (merge x15 x11)
Current queue size 23
Checking ICons x14 (merge x15
                      xs) in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> ??
TYPE ERROR: Cannot find sufficiently strong refinements
Current queue size 22
Checking ICons x14 (merge x15
                      ys) in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> ??
TYPE ERROR: Cannot find sufficiently strong refinements
Current queue size 21
Checking ICons x14 (merge INil
                      (?? :: {IList A6|(ilen _v >= 0 && ilen _v <= ilen ys) && ((ilen (INil) >= 0 && ilen (INil) < ilen xs) || (ilen _v >= 0 && ilen _v < ilen ys))})) in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> ??
*******************Filling holes in ICons
                                      x14 (merge INil
                                             (?? :: {IList A6|(ilen _v >= 0 && ilen _v <= ilen ys) && ((ilen (INil) >= 0 && ilen (INil) < ilen xs) || (ilen _v >= 0 && ilen _v < ilen ys))}))
Looking for succinct type {IList |  | a, |  | }
Trying ICons
Trying INil
Trying x15
Trying x11
Trying merge
Trying xs
Trying ys
Current queue size 27
Checking ICons x14 (merge INil
                      INil) in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> ??
Checking program ICons x14
                   (merge INil INil)
Checking ICons x14 (merge INil
                      INil) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> ??
TYPE ERROR: Cannot find sufficiently strong refinements
when checking ICons x14 (merge
                           INil INil) ::
{IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys}
in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> ICons x14
                             (merge INil INil)
Current queue size 26
Checking ICons x14 (merge INil
                      x15) in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> ??
TYPE ERROR: Cannot find sufficiently strong refinements
Current queue size 25
Checking ICons x14 (merge INil
                      x11) in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> ??
Checking program ICons x14
                   (merge INil x11)
Checking ICons x14 (merge INil
                      x11) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> ??
TYPE ERROR: Cannot find sufficiently strong refinements
when checking ICons x14 (merge
                           INil x11) ::
{IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys}
in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> ICons x14
                             (merge INil x11)
Current queue size 24
Checking ICons x14 (merge INil
                      xs) in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> ??
TYPE ERROR: Cannot find sufficiently strong refinements
Current queue size 23
Checking ICons x14 (merge INil
                      ys) in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> ??
TYPE ERROR: Cannot find sufficiently strong refinements
Current queue size 22
Checking ICons x14 (merge (ICons
                             (?? :: A7)
                             (?? :: IList {A7|x20 <= _v}))
                      (?? :: LET x18:({IList A7|_v == (ICons x20 x21)}) IN {IList A6|(ilen _v >= 0 && ilen _v <= ilen ys) && ((ilen x18 >= 0 && ilen x18 < ilen xs) || (ilen _v >= 0 && ilen _v < ilen ys))})) in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> ??
*******************Filling holes in ICons
                                      x14 (merge (ICons (?? :: A7)
                                                    (?? :: IList {A7|x20 <= _v}))
                                             (?? :: LET x18:({IList A7|_v == (ICons x20 x21)}) IN {IList A6|(ilen _v >= 0 && ilen _v <= ilen ys) && ((ilen x18 >= 0 && ilen x18 < ilen xs) || (ilen _v >= 0 && ilen _v < ilen ys))}))
Looking for succinct type a
Trying x10
Trying x14
Current queue size 23
Checking ICons x14 (ICons x14
                      (?? :: IList {A6|x14 <= _v})) in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> ??
*******************Filling holes in ICons
                                      x14 (ICons x14
                                             (?? :: IList {A6|x14 <= _v}))
Looking for succinct type {IList |  | a, |  | }
Trying ICons
Trying INil
Trying x15
Trying x11
Trying merge
Trying xs
Trying ys
Current queue size 29
Checking ICons x14 (ICons x14
                      INil) in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> ??
Checking program ICons x14
                   (ICons x14 INil)
Checking ICons x14 (ICons x14
                      INil) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> ??
TYPE ERROR: Cannot find sufficiently strong refinements
when checking ICons x14 (ICons
                           x14 INil) ::
{IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys}
in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> ICons x14
                             (ICons x14 INil)
Current queue size 28
Checking ICons x14 (ICons x14
                      x15) in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> ??
Checking program ICons x14
                   (ICons x14 x15)
Checking ICons x14 (ICons x14
                      x15) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> ??
TYPE ERROR: Cannot find sufficiently strong refinements
when checking ICons x14 (ICons
                           x14 x15) ::
{IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys}
in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> ICons x14
                             (ICons x14 x15)
Current queue size 27
Checking ICons x14 (ICons x14
                      x11) in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> ??
Checking program ICons x14
                   (ICons x14 x11)
Checking ICons x14 (ICons x14
                      x11) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> ??
TYPE ERROR: Cannot find sufficiently strong refinements
when checking ICons x14 (ICons
                           x14 x11) ::
{IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys}
in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> ICons x14
                             (ICons x14 x11)
Current queue size 26
Checking ICons x14 (ICons x14
                      xs) in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> ??
TYPE ERROR: Cannot find sufficiently strong refinements
Current queue size 25
Checking ICons x14 (ICons x14
                      ys) in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> ??
TYPE ERROR: Cannot find sufficiently strong refinements
Current queue size 24
Checking ICons x14 (ICons x10
                      (?? :: IList {A6|x10 <= _v})) in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> ??
*******************Filling holes in ICons
                                      x14 (ICons x10
                                             (?? :: IList {A6|x10 <= _v}))
Looking for succinct type {IList |  | a, |  | }
Trying ICons
Trying INil
Trying x15
Trying x11
Trying merge
Trying xs
Trying ys
Current queue size 30
Checking ICons x14 (ICons x10
                      INil) in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> ??
Checking program ICons x14
                   (ICons x10 INil)
Checking ICons x14 (ICons x10
                      INil) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> ??
TYPE ERROR: Cannot find sufficiently strong refinements
when checking ICons x14 (ICons
                           x10 INil) ::
{IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys}
in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> ICons x14
                             (ICons x10 INil)
Current queue size 29
Checking ICons x14 (ICons x10
                      x15) in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> ??
Checking program ICons x14
                   (ICons x10 x15)
Checking ICons x14 (ICons x10
                      x15) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> ??
TYPE ERROR: Cannot find sufficiently strong refinements
when checking ICons x14 (ICons
                           x10 x15) ::
{IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys}
in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> ICons x14
                             (ICons x10 x15)
Current queue size 28
Checking ICons x14 (ICons x10
                      x11) in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> ??
Checking program ICons x14
                   (ICons x10 x11)
Checking ICons x14 (ICons x10
                      x11) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> ??
TYPE ERROR: Cannot find sufficiently strong refinements
when checking ICons x14 (ICons
                           x10 x11) ::
{IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys}
in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> ICons x14
                             (ICons x10 x11)
Current queue size 27
Checking ICons x14 (ICons x10
                      xs) in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> ??
TYPE ERROR: Cannot find sufficiently strong refinements
Current queue size 26
Checking ICons x14 (ICons x10
                      ys) in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> ??
TYPE ERROR: Cannot find sufficiently strong refinements
Current queue size 25
Checking ICons x10 (merge ys
                      (?? :: {IList A6|(ilen _v >= 0 && ilen _v <= ilen ys) && ((ilen ys >= 0 && ilen ys < ilen xs) || (ilen _v >= 0 && ilen _v < ilen ys))})) in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> ??
TYPE ERROR: Cannot find sufficiently strong refinements
Current queue size 24
Checking ICons x10 (merge xs
                      (?? :: {IList A6|(ilen _v >= 0 && ilen _v <= ilen ys) && ((ilen xs >= 0 && ilen xs < ilen xs) || (ilen _v >= 0 && ilen _v < ilen ys))})) in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> ??
TYPE ERROR: Cannot find sufficiently strong refinements
Current queue size 23
Checking ICons x10 (merge (merge
                             (?? :: {IList A7|ilen _v >= 0 && ilen _v <= ilen xs})
                             (?? :: {IList A7|(ilen _v >= 0 && ilen _v <= ilen ys) && ((ilen x20 >= 0 && ilen x20 < ilen xs) || (ilen _v >= 0 && ilen _v < ilen ys))}))
                      (?? :: LET x18:({IList A7|ilen _v == ilen x20 + ilen x21 && ielems _v == ielems x20 + ielems x21}) IN {IList A6|(ilen _v >= 0 && ilen _v <= ilen ys) && ((ilen x18 >= 0 && ilen x18 < ilen xs) || (ilen _v >= 0 && ilen _v < ilen ys))})) in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> ??
*******************Filling holes in ICons
                                      x10 (merge (merge
                                                    (?? :: {IList A7|ilen _v >= 0 && ilen _v <= ilen xs})
                                                    (?? :: {IList A7|(ilen _v >= 0 && ilen _v <= ilen ys) && ((ilen x20 >= 0 && ilen x20 < ilen xs) || (ilen _v >= 0 && ilen _v < ilen ys))}))
                                             (?? :: LET x18:({IList A7|ilen _v == ilen x20 + ilen x21 && ielems _v == ielems x20 + ielems x21}) IN {IList A6|(ilen _v >= 0 && ilen _v <= ilen ys) && ((ilen x18 >= 0 && ilen x18 < ilen xs) || (ilen _v >= 0 && ilen _v < ilen ys))}))
Looking for succinct type {IList |  | a, |  | }
Trying ICons
Trying INil
Trying x15
Trying x11
Trying merge
Trying xs
Trying ys
Current queue size 29
Checking ICons x10 (merge x11
                      (?? :: {IList A6|(ilen _v >= 0 && ilen _v <= ilen ys) && ((ilen x11 >= 0 && ilen x11 < ilen xs) || (ilen _v >= 0 && ilen _v < ilen ys))})) in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> ??
TYPE ERROR: Cannot find sufficiently strong refinements
Current queue size 28
Checking ICons x10 (merge x15
                      (?? :: {IList A6|(ilen _v >= 0 && ilen _v <= ilen ys) && ((ilen x15 >= 0 && ilen x15 < ilen xs) || (ilen _v >= 0 && ilen _v < ilen ys))})) in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> ??
*******************Filling holes in ICons
                                      x10 (merge x15
                                             (?? :: {IList A6|(ilen _v >= 0 && ilen _v <= ilen ys) && ((ilen x15 >= 0 && ilen x15 < ilen xs) || (ilen _v >= 0 && ilen _v < ilen ys))}))
Looking for succinct type {IList |  | a, |  | }
Trying ICons
Trying INil
Trying x15
Trying x11
Trying merge
Trying xs
Trying ys
Current queue size 34
Checking ICons x10 (merge x15
                      INil) in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> ??
Checking program ICons x10
                   (merge x15 INil)
Checking ICons x10 (merge x15
                      INil) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> ??
TYPE ERROR: Cannot find sufficiently strong refinements
when checking ICons x10 (merge
                           x15 INil) ::
{IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys}
in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> ICons x10
                             (merge x15 INil)
Current queue size 33
Checking ICons x10 (merge x15
                      x15) in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> ??
TYPE ERROR: Cannot find sufficiently strong refinements
Current queue size 32
Checking ICons x10 (merge x15
                      x11) in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> ??
Checking program ICons x10
                   (merge x15 x11)
Checking ICons x10 (merge x15
                      x11) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> ??
TYPE ERROR: Cannot find sufficiently strong refinements
when checking ICons x10 (merge
                           x15 x11) ::
{IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys}
in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> ICons x10
                             (merge x15 x11)
Current queue size 31
Checking ICons x10 (merge x15
                      xs) in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> ??
TYPE ERROR: Cannot find sufficiently strong refinements
Current queue size 30
Checking ICons x10 (merge x15
                      ys) in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> ??
TYPE ERROR: Cannot find sufficiently strong refinements
Current queue size 29
Checking ICons x10 (merge INil
                      (?? :: {IList A6|(ilen _v >= 0 && ilen _v <= ilen ys) && ((ilen (INil) >= 0 && ilen (INil) < ilen xs) || (ilen _v >= 0 && ilen _v < ilen ys))})) in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> ??
*******************Filling holes in ICons
                                      x10 (merge INil
                                             (?? :: {IList A6|(ilen _v >= 0 && ilen _v <= ilen ys) && ((ilen (INil) >= 0 && ilen (INil) < ilen xs) || (ilen _v >= 0 && ilen _v < ilen ys))}))
Looking for succinct type {IList |  | a, |  | }
Trying ICons
Trying INil
Trying x15
Trying x11
Trying merge
Trying xs
Trying ys
Current queue size 35
Checking ICons x10 (merge INil
                      INil) in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> ??
Checking program ICons x10
                   (merge INil INil)
Checking ICons x10 (merge INil
                      INil) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> ??
TYPE ERROR: Cannot find sufficiently strong refinements
when checking ICons x10 (merge
                           INil INil) ::
{IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys}
in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> ICons x10
                             (merge INil INil)
Current queue size 34
Checking ICons x10 (merge INil
                      x15) in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> ??
TYPE ERROR: Cannot find sufficiently strong refinements
Current queue size 33
Checking ICons x10 (merge INil
                      x11) in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> ??
Checking program ICons x10
                   (merge INil x11)
Checking ICons x10 (merge INil
                      x11) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> ??
TYPE ERROR: Cannot find sufficiently strong refinements
when checking ICons x10 (merge
                           INil x11) ::
{IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys}
in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> ICons x10
                             (merge INil x11)
Current queue size 32
Checking ICons x10 (merge INil
                      xs) in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> ??
TYPE ERROR: Cannot find sufficiently strong refinements
Current queue size 31
Checking ICons x10 (merge INil
                      ys) in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> ??
TYPE ERROR: Cannot find sufficiently strong refinements
Current queue size 30
Checking ICons x10 (merge (ICons
                             (?? :: A7)
                             (?? :: IList {A7|x20 <= _v}))
                      (?? :: LET x18:({IList A7|_v == (ICons x20 x21)}) IN {IList A6|(ilen _v >= 0 && ilen _v <= ilen ys) && ((ilen x18 >= 0 && ilen x18 < ilen xs) || (ilen _v >= 0 && ilen _v < ilen ys))})) in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> ??
*******************Filling holes in ICons
                                      x10 (merge (ICons (?? :: A7)
                                                    (?? :: IList {A7|x20 <= _v}))
                                             (?? :: LET x18:({IList A7|_v == (ICons x20 x21)}) IN {IList A6|(ilen _v >= 0 && ilen _v <= ilen ys) && ((ilen x18 >= 0 && ilen x18 < ilen xs) || (ilen _v >= 0 && ilen _v < ilen ys))}))
Looking for succinct type a
Trying x10
Trying x14
Current queue size 31
Checking ICons x10 (ICons x14
                      (?? :: IList {A6|x14 <= _v})) in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> ??
*******************Filling holes in ICons
                                      x10 (ICons x14
                                             (?? :: IList {A6|x14 <= _v}))
Looking for succinct type {IList |  | a, |  | }
Trying ICons
Trying INil
Trying x15
Trying x11
Trying merge
Trying xs
Trying ys
Current queue size 37
Checking ICons x10 (ICons x14
                      INil) in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> ??
Checking program ICons x10
                   (ICons x14 INil)
Checking ICons x10 (ICons x14
                      INil) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> ??
TYPE ERROR: Cannot find sufficiently strong refinements
when checking ICons x10 (ICons
                           x14 INil) ::
{IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys}
in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> ICons x10
                             (ICons x14 INil)
Current queue size 36
Checking ICons x10 (ICons x14
                      x15) in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> ??
Checking program ICons x10
                   (ICons x14 x15)
Checking ICons x10 (ICons x14
                      x15) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> ??
TYPE ERROR: Cannot find sufficiently strong refinements
when checking ICons x10 (ICons
                           x14 x15) ::
{IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys}
in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> ICons x10
                             (ICons x14 x15)
Current queue size 35
Checking ICons x10 (ICons x14
                      x11) in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> ??
Checking program ICons x10
                   (ICons x14 x11)
Checking ICons x10 (ICons x14
                      x11) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> ??
TYPE ERROR: Cannot find sufficiently strong refinements
when checking ICons x10 (ICons
                           x14 x11) ::
{IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys}
in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> ICons x10
                             (ICons x14 x11)
Current queue size 34
Checking ICons x10 (ICons x14
                      xs) in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> ??
TYPE ERROR: Cannot find sufficiently strong refinements
Current queue size 33
Checking ICons x10 (ICons x14
                      ys) in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> ??
TYPE ERROR: Cannot find sufficiently strong refinements
Current queue size 32
Checking ICons x10 (ICons x10
                      (?? :: IList {A6|x10 <= _v})) in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> ??
*******************Filling holes in ICons
                                      x10 (ICons x10
                                             (?? :: IList {A6|x10 <= _v}))
Looking for succinct type {IList |  | a, |  | }
Trying ICons
Trying INil
Trying x15
Trying x11
Trying merge
Trying xs
Trying ys
Current queue size 38
Checking ICons x10 (ICons x10
                      INil) in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> ??
Checking program ICons x10
                   (ICons x10 INil)
Checking ICons x10 (ICons x10
                      INil) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> ??
TYPE ERROR: Cannot find sufficiently strong refinements
when checking ICons x10 (ICons
                           x10 INil) ::
{IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys}
in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> ICons x10
                             (ICons x10 INil)
Current queue size 37
Checking ICons x10 (ICons x10
                      x15) in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> ??
Checking program ICons x10
                   (ICons x10 x15)
Checking ICons x10 (ICons x10
                      x15) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> ??
TYPE ERROR: Cannot find sufficiently strong refinements
when checking ICons x10 (ICons
                           x10 x15) ::
{IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys}
in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> ICons x10
                             (ICons x10 x15)
Current queue size 36
Checking ICons x10 (ICons x10
                      x11) in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> ??
Checking program ICons x10
                   (ICons x10 x11)
Checking ICons x10 (ICons x10
                      x11) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> ??
TYPE ERROR: Cannot find sufficiently strong refinements
when checking ICons x10 (ICons
                           x10 x11) ::
{IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys}
in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> ICons x10
                             (ICons x10 x11)
Current queue size 35
Checking ICons x10 (ICons x10
                      xs) in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> ??
TYPE ERROR: Cannot find sufficiently strong refinements
Current queue size 34
Checking ICons x10 (ICons x10
                      ys) in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> ??
TYPE ERROR: Cannot find sufficiently strong refinements
Current queue size 33
Checking ICons x14 (merge (merge
                             ys
                             (?? :: {IList A7|(ilen _v >= 0 && ilen _v <= ilen ys) && ((ilen ys >= 0 && ilen ys < ilen xs) || (ilen _v >= 0 && ilen _v < ilen ys))}))
                      (?? :: LET x18:(LET x21:({IList A7|(ilen _v >= 0 && ilen _v <= ilen ys) && ((ilen ys >= 0 && ilen ys < ilen xs) || (ilen _v >= 0 && ilen _v < ilen ys))}) IN {IList A7|ilen _v == ilen ys + ilen x21 && ielems _v == ielems ys + ielems x21}) IN {IList A6|(ilen _v >= 0 && ilen _v <= ilen ys) && ((ilen x18 >= 0 && ilen x18 < ilen xs) || (ilen _v >= 0 && ilen _v < ilen ys))})) in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> ??
TYPE ERROR: Cannot find sufficiently strong refinements
Current queue size 32
Checking ICons x14 (merge (merge
                             xs
                             (?? :: {IList A7|(ilen _v >= 0 && ilen _v <= ilen ys) && ((ilen xs >= 0 && ilen xs < ilen xs) || (ilen _v >= 0 && ilen _v < ilen ys))}))
                      (?? :: LET x18:(LET x21:({IList A7|(ilen _v >= 0 && ilen _v <= ilen ys) && ((ilen xs >= 0 && ilen xs < ilen xs) || (ilen _v >= 0 && ilen _v < ilen ys))}) IN {IList A7|ilen _v == ilen xs + ilen x21 && ielems _v == ielems xs + ielems x21}) IN {IList A6|(ilen _v >= 0 && ilen _v <= ilen ys) && ((ilen x18 >= 0 && ilen x18 < ilen xs) || (ilen _v >= 0 && ilen _v < ilen ys))})) in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> ??
TYPE ERROR: Cannot find sufficiently strong refinements
Current queue size 31
Checking ICons x14 (merge (merge
                             (merge
                                (?? :: {IList A8|ilen _v >= 0 && ilen _v <= ilen xs})
                                (?? :: {IList A8|(ilen _v >= 0 && ilen _v <= ilen ys) && ((ilen x22 >= 0 && ilen x22 < ilen xs) || (ilen _v >= 0 && ilen _v < ilen ys))}))
                             (?? :: LET x20:({IList A8|ilen _v == ilen x22 + ilen x23 && ielems _v == ielems x22 + ielems x23}) IN {IList A7|(ilen _v >= 0 && ilen _v <= ilen ys) && ((ilen x20 >= 0 && ilen x20 < ilen xs) || (ilen _v >= 0 && ilen _v < ilen ys))}))
                      (?? :: LET x18:(LET x21:(LET x20:({IList A8|ilen _v == ilen x22 + ilen x23 && ielems _v == ielems x22 + ielems x23}) IN {IList A7|(ilen _v >= 0 && ilen _v <= ilen ys) && ((ilen x20 >= 0 && ilen x20 < ilen xs) || (ilen _v >= 0 && ilen _v < ilen ys))}) IN LET x20:({IList A8|ilen _v == ilen x22 + ilen x23 && ielems _v == ielems x22 + ielems x23}) IN {IList A7|ilen _v == ilen x20 + ilen x21 && ielems _v == ielems x20 + ielems x21}) IN {IList A6|(ilen _v >= 0 && ilen _v <= ilen ys) && ((ilen x18 >= 0 && ilen x18 < ilen xs) || (ilen _v >= 0 && ilen _v < ilen ys))})) in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> ??
*******************Filling holes in ICons
                                      x14 (merge (merge (merge
                                                           (?? :: {IList A8|ilen _v >= 0 && ilen _v <= ilen xs})
                                                           (?? :: {IList A8|(ilen _v >= 0 && ilen _v <= ilen ys) && ((ilen x22 >= 0 && ilen x22 < ilen xs) || (ilen _v >= 0 && ilen _v < ilen ys))}))
                                                    (?? :: LET x20:({IList A8|ilen _v == ilen x22 + ilen x23 && ielems _v == ielems x22 + ielems x23}) IN {IList A7|(ilen _v >= 0 && ilen _v <= ilen ys) && ((ilen x20 >= 0 && ilen x20 < ilen xs) || (ilen _v >= 0 && ilen _v < ilen ys))}))
                                             (?? :: LET x18:(LET x21:(LET x20:({IList A8|ilen _v == ilen x22 + ilen x23 && ielems _v == ielems x22 + ielems x23}) IN {IList A7|(ilen _v >= 0 && ilen _v <= ilen ys) && ((ilen x20 >= 0 && ilen x20 < ilen xs) || (ilen _v >= 0 && ilen _v < ilen ys))}) IN LET x20:({IList A8|ilen _v == ilen x22 + ilen x23 && ielems _v == ielems x22 + ielems x23}) IN {IList A7|ilen _v == ilen x20 + ilen x21 && ielems _v == ielems x20 + ielems x21}) IN {IList A6|(ilen _v >= 0 && ilen _v <= ilen ys) && ((ilen x18 >= 0 && ilen x18 < ilen xs) || (ilen _v >= 0 && ilen _v < ilen ys))}))
Looking for succinct type {IList |  | a, |  | }
Trying ICons
Trying INil
Trying x15
Trying x11
Trying merge
Trying xs
Trying ys
Current queue size 37
Checking ICons x14 (merge (merge
                             x11
                             (?? :: {IList A7|(ilen _v >= 0 && ilen _v <= ilen ys) && ((ilen x11 >= 0 && ilen x11 < ilen xs) || (ilen _v >= 0 && ilen _v < ilen ys))}))
                      (?? :: LET x18:(LET x21:({IList A7|(ilen _v >= 0 && ilen _v <= ilen ys) && ((ilen x11 >= 0 && ilen x11 < ilen xs) || (ilen _v >= 0 && ilen _v < ilen ys))}) IN {IList A7|ilen _v == ilen x11 + ilen x21 && ielems _v == ielems x11 + ielems x21}) IN {IList A6|(ilen _v >= 0 && ilen _v <= ilen ys) && ((ilen x18 >= 0 && ilen x18 < ilen xs) || (ilen _v >= 0 && ilen _v < ilen ys))})) in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> ??
TYPE ERROR: Cannot find sufficiently strong refinements
Current queue size 36
Checking ICons x14 (merge (merge
                             x15
                             (?? :: {IList A7|(ilen _v >= 0 && ilen _v <= ilen ys) && ((ilen x15 >= 0 && ilen x15 < ilen xs) || (ilen _v >= 0 && ilen _v < ilen ys))}))
                      (?? :: LET x18:(LET x21:({IList A7|(ilen _v >= 0 && ilen _v <= ilen ys) && ((ilen x15 >= 0 && ilen x15 < ilen xs) || (ilen _v >= 0 && ilen _v < ilen ys))}) IN {IList A7|ilen _v == ilen x15 + ilen x21 && ielems _v == ielems x15 + ielems x21}) IN {IList A6|(ilen _v >= 0 && ilen _v <= ilen ys) && ((ilen x18 >= 0 && ilen x18 < ilen xs) || (ilen _v >= 0 && ilen _v < ilen ys))})) in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> ??
*******************Filling holes in ICons
                                      x14 (merge (merge x15
                                                    (?? :: {IList A7|(ilen _v >= 0 && ilen _v <= ilen ys) && ((ilen x15 >= 0 && ilen x15 < ilen xs) || (ilen _v >= 0 && ilen _v < ilen ys))}))
                                             (?? :: LET x18:(LET x21:({IList A7|(ilen _v >= 0 && ilen _v <= ilen ys) && ((ilen x15 >= 0 && ilen x15 < ilen xs) || (ilen _v >= 0 && ilen _v < ilen ys))}) IN {IList A7|ilen _v == ilen x15 + ilen x21 && ielems _v == ielems x15 + ielems x21}) IN {IList A6|(ilen _v >= 0 && ilen _v <= ilen ys) && ((ilen x18 >= 0 && ilen x18 < ilen xs) || (ilen _v >= 0 && ilen _v < ilen ys))}))
Looking for succinct type {IList |  | a, |  | }
Trying ICons
Trying INil
Trying x15
Trying x11
Trying merge
Trying xs
Trying ys
Current queue size 42
Checking ICons x14 (merge (merge
                             INil
                             (?? :: {IList A7|(ilen _v >= 0 && ilen _v <= ilen ys) && ((ilen (INil) >= 0 && ilen (INil) < ilen xs) || (ilen _v >= 0 && ilen _v < ilen ys))}))
                      (?? :: LET x18:(LET x21:({IList A7|(ilen _v >= 0 && ilen _v <= ilen ys) && ((ilen (INil) >= 0 && ilen (INil) < ilen xs) || (ilen _v >= 0 && ilen _v < ilen ys))}) IN {IList A7|ilen _v == ilen (INil) + ilen x21 && ielems _v == ielems (INil) + ielems x21}) IN {IList A6|(ilen _v >= 0 && ilen _v <= ilen ys) && ((ilen x18 >= 0 && ilen x18 < ilen xs) || (ilen _v >= 0 && ilen _v < ilen ys))})) in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> ??
*******************Filling holes in ICons
                                      x14 (merge (merge INil
                                                    (?? :: {IList A7|(ilen _v >= 0 && ilen _v <= ilen ys) && ((ilen (INil) >= 0 && ilen (INil) < ilen xs) || (ilen _v >= 0 && ilen _v < ilen ys))}))
                                             (?? :: LET x18:(LET x21:({IList A7|(ilen _v >= 0 && ilen _v <= ilen ys) && ((ilen (INil) >= 0 && ilen (INil) < ilen xs) || (ilen _v >= 0 && ilen _v < ilen ys))}) IN {IList A7|ilen _v == ilen (INil) + ilen x21 && ielems _v == ielems (INil) + ielems x21}) IN {IList A6|(ilen _v >= 0 && ilen _v <= ilen ys) && ((ilen x18 >= 0 && ilen x18 < ilen xs) || (ilen _v >= 0 && ilen _v < ilen ys))}))
Looking for succinct type {IList |  | a, |  | }
Trying ICons
Trying INil
Trying x15
Trying x11
Trying merge
Trying xs
Trying ys
Current queue size 48
Checking ICons x14 (merge (merge
                             (ICons (?? :: A8)
                                (?? :: IList {A8|x22 <= _v}))
                             (?? :: LET x20:({IList A8|_v == (ICons x22 x23)}) IN {IList A7|(ilen _v >= 0 && ilen _v <= ilen ys) && ((ilen x20 >= 0 && ilen x20 < ilen xs) || (ilen _v >= 0 && ilen _v < ilen ys))}))
                      (?? :: LET x18:(LET x21:(LET x20:({IList A8|_v == (ICons x22 x23)}) IN {IList A7|(ilen _v >= 0 && ilen _v <= ilen ys) && ((ilen x20 >= 0 && ilen x20 < ilen xs) || (ilen _v >= 0 && ilen _v < ilen ys))}) IN LET x20:({IList A8|_v == (ICons x22 x23)}) IN {IList A7|ilen _v == ilen x20 + ilen x21 && ielems _v == ielems x20 + ielems x21}) IN {IList A6|(ilen _v >= 0 && ilen _v <= ilen ys) && ((ilen x18 >= 0 && ilen x18 < ilen xs) || (ilen _v >= 0 && ilen _v < ilen ys))})) in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> ??
*******************Filling holes in ICons
                                      x14 (merge (merge (ICons
                                                           (?? :: A8)
                                                           (?? :: IList {A8|x22 <= _v}))
                                                    (?? :: LET x20:({IList A8|_v == (ICons x22 x23)}) IN {IList A7|(ilen _v >= 0 && ilen _v <= ilen ys) && ((ilen x20 >= 0 && ilen x20 < ilen xs) || (ilen _v >= 0 && ilen _v < ilen ys))}))
                                             (?? :: LET x18:(LET x21:(LET x20:({IList A8|_v == (ICons x22 x23)}) IN {IList A7|(ilen _v >= 0 && ilen _v <= ilen ys) && ((ilen x20 >= 0 && ilen x20 < ilen xs) || (ilen _v >= 0 && ilen _v < ilen ys))}) IN LET x20:({IList A8|_v == (ICons x22 x23)}) IN {IList A7|ilen _v == ilen x20 + ilen x21 && ielems _v == ielems x20 + ielems x21}) IN {IList A6|(ilen _v >= 0 && ilen _v <= ilen ys) && ((ilen x18 >= 0 && ilen x18 < ilen xs) || (ilen _v >= 0 && ilen _v < ilen ys))}))
Looking for succinct type a
Trying x10
Trying x14
Current queue size 49
Checking ICons x14 (merge x15
                      (merge
                         (?? :: {IList A7|ilen _v >= 0 && ilen _v <= ilen xs})
                         (?? :: {IList A7|(ilen _v >= 0 && ilen _v <= ilen ys) && ((ilen x20 >= 0 && ilen x20 < ilen xs) || (ilen _v >= 0 && ilen _v < ilen ys))}))) in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> ??
*******************Filling holes in ICons
                                      x14 (merge x15 (merge
                                                        (?? :: {IList A7|ilen _v >= 0 && ilen _v <= ilen xs})
                                                        (?? :: {IList A7|(ilen _v >= 0 && ilen _v <= ilen ys) && ((ilen x20 >= 0 && ilen x20 < ilen xs) || (ilen _v >= 0 && ilen _v < ilen ys))})))
Looking for succinct type {IList |  | a, |  | }
Trying ICons
Trying INil
Trying x15
Trying x11
Trying merge
Trying xs
Trying ys
Current queue size 55
Checking ICons x14 (merge x15
                      (ICons (?? :: A7)
                         (?? :: IList {A7|x20 <= _v}))) in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> ??
*******************Filling holes in ICons
                                      x14 (merge x15 (ICons (?? :: A7)
                                                        (?? :: IList {A7|x20 <= _v})))
Looking for succinct type a
Trying x10
Trying x14
Current queue size 56
Checking ICons x14 (merge INil
                      (merge
                         (?? :: {IList A8|ilen _v >= 0 && ilen _v <= ilen xs})
                         (?? :: {IList A8|(ilen _v >= 0 && ilen _v <= ilen ys) && ((ilen x20 >= 0 && ilen x20 < ilen xs) || (ilen _v >= 0 && ilen _v < ilen ys))}))) in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> ??
*******************Filling holes in ICons
                                      x14 (merge INil (merge
                                                         (?? :: {IList A8|ilen _v >= 0 && ilen _v <= ilen xs})
                                                         (?? :: {IList A8|(ilen _v >= 0 && ilen _v <= ilen ys) && ((ilen x20 >= 0 && ilen x20 < ilen xs) || (ilen _v >= 0 && ilen _v < ilen ys))})))
Looking for succinct type {IList |  | a, |  | }
Trying ICons
Trying INil
Trying x15
Trying x11
Trying merge
Trying xs
Trying ys
Current queue size 62
Checking ICons x14 (merge INil
                      (ICons (?? :: A8)
                         (?? :: IList {A8|x20 <= _v}))) in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> ??
*******************Filling holes in ICons
                                      x14 (merge INil (ICons
                                                         (?? :: A8)
                                                         (?? :: IList {A8|x20 <= _v})))
Looking for succinct type a
Trying x10
Trying x14
Current queue size 63
Checking ICons x14 (merge (ICons
                             x14
                             (?? :: IList {A7|x14 <= _v}))
                      (?? :: LET x18:(LET x21:(IList {A7|x14 <= _v}) IN {IList A7|_v == (ICons x14 x21)}) IN {IList A6|(ilen _v >= 0 && ilen _v <= ilen ys) && ((ilen x18 >= 0 && ilen x18 < ilen xs) || (ilen _v >= 0 && ilen _v < ilen ys))})) in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> ??
*******************Filling holes in ICons
                                      x14 (merge (ICons x14
                                                    (?? :: IList {A7|x14 <= _v}))
                                             (?? :: LET x18:(LET x21:(IList {A7|x14 <= _v}) IN {IList A7|_v == (ICons x14 x21)}) IN {IList A6|(ilen _v >= 0 && ilen _v <= ilen ys) && ((ilen x18 >= 0 && ilen x18 < ilen xs) || (ilen _v >= 0 && ilen _v < ilen ys))}))
Looking for succinct type {IList |  | a, |  | }
Trying ICons
Trying INil
Trying x15
Trying x11
Trying merge
Trying xs
Trying ys
Current queue size 69
Checking ICons x14 (merge (ICons
                             x10
                             (?? :: IList {A7|x10 <= _v}))
                      (?? :: LET x18:(LET x21:(IList {A7|x10 <= _v}) IN {IList A7|_v == (ICons x10 x21)}) IN {IList A6|(ilen _v >= 0 && ilen _v <= ilen ys) && ((ilen x18 >= 0 && ilen x18 < ilen xs) || (ilen _v >= 0 && ilen _v < ilen ys))})) in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> ??
*******************Filling holes in ICons
                                      x14 (merge (ICons x10
                                                    (?? :: IList {A7|x10 <= _v}))
                                             (?? :: LET x18:(LET x21:(IList {A7|x10 <= _v}) IN {IList A7|_v == (ICons x10 x21)}) IN {IList A6|(ilen _v >= 0 && ilen _v <= ilen ys) && ((ilen x18 >= 0 && ilen x18 < ilen xs) || (ilen _v >= 0 && ilen _v < ilen ys))}))
Looking for succinct type {IList |  | a, |  | }
Trying ICons
Trying INil
Trying x15
Trying x11
Trying merge
Trying xs
Trying ys
Current queue size 75
Checking ICons x14 (ICons x14
                      (merge
                         (?? :: {IList A7|ilen _v >= 0 && ilen _v <= ilen xs})
                         (?? :: {IList A7|(ilen _v >= 0 && ilen _v <= ilen ys) && ((ilen x20 >= 0 && ilen x20 < ilen xs) || (ilen _v >= 0 && ilen _v < ilen ys))}))) in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> ??
*******************Filling holes in ICons
                                      x14 (ICons x14 (merge
                                                        (?? :: {IList A7|ilen _v >= 0 && ilen _v <= ilen xs})
                                                        (?? :: {IList A7|(ilen _v >= 0 && ilen _v <= ilen ys) && ((ilen x20 >= 0 && ilen x20 < ilen xs) || (ilen _v >= 0 && ilen _v < ilen ys))})))
Looking for succinct type {IList |  | a, |  | }
Trying ICons
Trying INil
Trying x15
Trying x11
Trying merge
Trying xs
Trying ys
Current queue size 81
Checking ICons x14 (ICons x14
                      (ICons (?? :: A7)
                         (?? :: IList {A7|x20 <= _v}))) in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> ??
*******************Filling holes in ICons
                                      x14 (ICons x14 (ICons (?? :: A7)
                                                        (?? :: IList {A7|x20 <= _v})))
Looking for succinct type a
Trying x10
Trying x14
Current queue size 82
Checking ICons x14 (ICons x10
                      (merge
                         (?? :: {IList A7|ilen _v >= 0 && ilen _v <= ilen xs})
                         (?? :: {IList A7|(ilen _v >= 0 && ilen _v <= ilen ys) && ((ilen x20 >= 0 && ilen x20 < ilen xs) || (ilen _v >= 0 && ilen _v < ilen ys))}))) in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> ??
*******************Filling holes in ICons
                                      x14 (ICons x10 (merge
                                                        (?? :: {IList A7|ilen _v >= 0 && ilen _v <= ilen xs})
                                                        (?? :: {IList A7|(ilen _v >= 0 && ilen _v <= ilen ys) && ((ilen x20 >= 0 && ilen x20 < ilen xs) || (ilen _v >= 0 && ilen _v < ilen ys))})))
Looking for succinct type {IList |  | a, |  | }
Trying ICons
Trying INil
Trying x15
Trying x11
Trying merge
Trying xs
Trying ys
Current queue size 88
Checking ICons x14 (ICons x10
                      (ICons (?? :: A7)
                         (?? :: IList {A7|x20 <= _v}))) in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> ??
*******************Filling holes in ICons
                                      x14 (ICons x10 (ICons (?? :: A7)
                                                        (?? :: IList {A7|x20 <= _v})))
Looking for succinct type a
Trying x10
Trying x14
Current queue size 89
Checking ICons x10 (merge (merge
                             ys
                             (?? :: {IList A7|(ilen _v >= 0 && ilen _v <= ilen ys) && ((ilen ys >= 0 && ilen ys < ilen xs) || (ilen _v >= 0 && ilen _v < ilen ys))}))
                      (?? :: LET x18:(LET x21:({IList A7|(ilen _v >= 0 && ilen _v <= ilen ys) && ((ilen ys >= 0 && ilen ys < ilen xs) || (ilen _v >= 0 && ilen _v < ilen ys))}) IN {IList A7|ilen _v == ilen ys + ilen x21 && ielems _v == ielems ys + ielems x21}) IN {IList A6|(ilen _v >= 0 && ilen _v <= ilen ys) && ((ilen x18 >= 0 && ilen x18 < ilen xs) || (ilen _v >= 0 && ilen _v < ilen ys))})) in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> ??
TYPE ERROR: Cannot find sufficiently strong refinements
Current queue size 88
Checking ICons x10 (merge (merge
                             xs
                             (?? :: {IList A7|(ilen _v >= 0 && ilen _v <= ilen ys) && ((ilen xs >= 0 && ilen xs < ilen xs) || (ilen _v >= 0 && ilen _v < ilen ys))}))
                      (?? :: LET x18:(LET x21:({IList A7|(ilen _v >= 0 && ilen _v <= ilen ys) && ((ilen xs >= 0 && ilen xs < ilen xs) || (ilen _v >= 0 && ilen _v < ilen ys))}) IN {IList A7|ilen _v == ilen xs + ilen x21 && ielems _v == ielems xs + ielems x21}) IN {IList A6|(ilen _v >= 0 && ilen _v <= ilen ys) && ((ilen x18 >= 0 && ilen x18 < ilen xs) || (ilen _v >= 0 && ilen _v < ilen ys))})) in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> ??
TYPE ERROR: Cannot find sufficiently strong refinements
Current queue size 87
Checking ICons x10 (merge (merge
                             (merge
                                (?? :: {IList A8|ilen _v >= 0 && ilen _v <= ilen xs})
                                (?? :: {IList A8|(ilen _v >= 0 && ilen _v <= ilen ys) && ((ilen x22 >= 0 && ilen x22 < ilen xs) || (ilen _v >= 0 && ilen _v < ilen ys))}))
                             (?? :: LET x20:({IList A8|ilen _v == ilen x22 + ilen x23 && ielems _v == ielems x22 + ielems x23}) IN {IList A7|(ilen _v >= 0 && ilen _v <= ilen ys) && ((ilen x20 >= 0 && ilen x20 < ilen xs) || (ilen _v >= 0 && ilen _v < ilen ys))}))
                      (?? :: LET x18:(LET x21:(LET x20:({IList A8|ilen _v == ilen x22 + ilen x23 && ielems _v == ielems x22 + ielems x23}) IN {IList A7|(ilen _v >= 0 && ilen _v <= ilen ys) && ((ilen x20 >= 0 && ilen x20 < ilen xs) || (ilen _v >= 0 && ilen _v < ilen ys))}) IN LET x20:({IList A8|ilen _v == ilen x22 + ilen x23 && ielems _v == ielems x22 + ielems x23}) IN {IList A7|ilen _v == ilen x20 + ilen x21 && ielems _v == ielems x20 + ielems x21}) IN {IList A6|(ilen _v >= 0 && ilen _v <= ilen ys) && ((ilen x18 >= 0 && ilen x18 < ilen xs) || (ilen _v >= 0 && ilen _v < ilen ys))})) in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> ??
*******************Filling holes in ICons
                                      x10 (merge (merge (merge
                                                           (?? :: {IList A8|ilen _v >= 0 && ilen _v <= ilen xs})
                                                           (?? :: {IList A8|(ilen _v >= 0 && ilen _v <= ilen ys) && ((ilen x22 >= 0 && ilen x22 < ilen xs) || (ilen _v >= 0 && ilen _v < ilen ys))}))
                                                    (?? :: LET x20:({IList A8|ilen _v == ilen x22 + ilen x23 && ielems _v == ielems x22 + ielems x23}) IN {IList A7|(ilen _v >= 0 && ilen _v <= ilen ys) && ((ilen x20 >= 0 && ilen x20 < ilen xs) || (ilen _v >= 0 && ilen _v < ilen ys))}))
                                             (?? :: LET x18:(LET x21:(LET x20:({IList A8|ilen _v == ilen x22 + ilen x23 && ielems _v == ielems x22 + ielems x23}) IN {IList A7|(ilen _v >= 0 && ilen _v <= ilen ys) && ((ilen x20 >= 0 && ilen x20 < ilen xs) || (ilen _v >= 0 && ilen _v < ilen ys))}) IN LET x20:({IList A8|ilen _v == ilen x22 + ilen x23 && ielems _v == ielems x22 + ielems x23}) IN {IList A7|ilen _v == ilen x20 + ilen x21 && ielems _v == ielems x20 + ielems x21}) IN {IList A6|(ilen _v >= 0 && ilen _v <= ilen ys) && ((ilen x18 >= 0 && ilen x18 < ilen xs) || (ilen _v >= 0 && ilen _v < ilen ys))}))
Looking for succinct type {IList |  | a, |  | }
Trying ICons
Trying INil
Trying x15
Trying x11
Trying merge
Trying xs
Trying ys
Current queue size 93
Checking ICons x10 (merge (merge
                             x11
                             (?? :: {IList A7|(ilen _v >= 0 && ilen _v <= ilen ys) && ((ilen x11 >= 0 && ilen x11 < ilen xs) || (ilen _v >= 0 && ilen _v < ilen ys))}))
                      (?? :: LET x18:(LET x21:({IList A7|(ilen _v >= 0 && ilen _v <= ilen ys) && ((ilen x11 >= 0 && ilen x11 < ilen xs) || (ilen _v >= 0 && ilen _v < ilen ys))}) IN {IList A7|ilen _v == ilen x11 + ilen x21 && ielems _v == ielems x11 + ielems x21}) IN {IList A6|(ilen _v >= 0 && ilen _v <= ilen ys) && ((ilen x18 >= 0 && ilen x18 < ilen xs) || (ilen _v >= 0 && ilen _v < ilen ys))})) in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> ??
TYPE ERROR: Cannot find sufficiently strong refinements
Current queue size 92
Checking ICons x10 (merge (merge
                             x15
                             (?? :: {IList A7|(ilen _v >= 0 && ilen _v <= ilen ys) && ((ilen x15 >= 0 && ilen x15 < ilen xs) || (ilen _v >= 0 && ilen _v < ilen ys))}))
                      (?? :: LET x18:(LET x21:({IList A7|(ilen _v >= 0 && ilen _v <= ilen ys) && ((ilen x15 >= 0 && ilen x15 < ilen xs) || (ilen _v >= 0 && ilen _v < ilen ys))}) IN {IList A7|ilen _v == ilen x15 + ilen x21 && ielems _v == ielems x15 + ielems x21}) IN {IList A6|(ilen _v >= 0 && ilen _v <= ilen ys) && ((ilen x18 >= 0 && ilen x18 < ilen xs) || (ilen _v >= 0 && ilen _v < ilen ys))})) in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> ??
*******************Filling holes in ICons
                                      x10 (merge (merge x15
                                                    (?? :: {IList A7|(ilen _v >= 0 && ilen _v <= ilen ys) && ((ilen x15 >= 0 && ilen x15 < ilen xs) || (ilen _v >= 0 && ilen _v < ilen ys))}))
                                             (?? :: LET x18:(LET x21:({IList A7|(ilen _v >= 0 && ilen _v <= ilen ys) && ((ilen x15 >= 0 && ilen x15 < ilen xs) || (ilen _v >= 0 && ilen _v < ilen ys))}) IN {IList A7|ilen _v == ilen x15 + ilen x21 && ielems _v == ielems x15 + ielems x21}) IN {IList A6|(ilen _v >= 0 && ilen _v <= ilen ys) && ((ilen x18 >= 0 && ilen x18 < ilen xs) || (ilen _v >= 0 && ilen _v < ilen ys))}))
Looking for succinct type {IList |  | a, |  | }
Trying ICons
Trying INil
Trying x15
Trying x11
Trying merge
Trying xs
Trying ys
Current queue size 98
Checking ICons x10 (merge (merge
                             INil
                             (?? :: {IList A7|(ilen _v >= 0 && ilen _v <= ilen ys) && ((ilen (INil) >= 0 && ilen (INil) < ilen xs) || (ilen _v >= 0 && ilen _v < ilen ys))}))
                      (?? :: LET x18:(LET x21:({IList A7|(ilen _v >= 0 && ilen _v <= ilen ys) && ((ilen (INil) >= 0 && ilen (INil) < ilen xs) || (ilen _v >= 0 && ilen _v < ilen ys))}) IN {IList A7|ilen _v == ilen (INil) + ilen x21 && ielems _v == ielems (INil) + ielems x21}) IN {IList A6|(ilen _v >= 0 && ilen _v <= ilen ys) && ((ilen x18 >= 0 && ilen x18 < ilen xs) || (ilen _v >= 0 && ilen _v < ilen ys))})) in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> ??
*******************Filling holes in ICons
                                      x10 (merge (merge INil
                                                    (?? :: {IList A7|(ilen _v >= 0 && ilen _v <= ilen ys) && ((ilen (INil) >= 0 && ilen (INil) < ilen xs) || (ilen _v >= 0 && ilen _v < ilen ys))}))
                                             (?? :: LET x18:(LET x21:({IList A7|(ilen _v >= 0 && ilen _v <= ilen ys) && ((ilen (INil) >= 0 && ilen (INil) < ilen xs) || (ilen _v >= 0 && ilen _v < ilen ys))}) IN {IList A7|ilen _v == ilen (INil) + ilen x21 && ielems _v == ielems (INil) + ielems x21}) IN {IList A6|(ilen _v >= 0 && ilen _v <= ilen ys) && ((ilen x18 >= 0 && ilen x18 < ilen xs) || (ilen _v >= 0 && ilen _v < ilen ys))}))
Looking for succinct type {IList |  | a, |  | }
Trying ICons
Trying INil
Trying x15
Trying x11
Trying merge
Trying xs
Trying ys
Current queue size 104
Checking ICons x10 (merge (merge
                             (ICons (?? :: A8)
                                (?? :: IList {A8|x22 <= _v}))
                             (?? :: LET x20:({IList A8|_v == (ICons x22 x23)}) IN {IList A7|(ilen _v >= 0 && ilen _v <= ilen ys) && ((ilen x20 >= 0 && ilen x20 < ilen xs) || (ilen _v >= 0 && ilen _v < ilen ys))}))
                      (?? :: LET x18:(LET x21:(LET x20:({IList A8|_v == (ICons x22 x23)}) IN {IList A7|(ilen _v >= 0 && ilen _v <= ilen ys) && ((ilen x20 >= 0 && ilen x20 < ilen xs) || (ilen _v >= 0 && ilen _v < ilen ys))}) IN LET x20:({IList A8|_v == (ICons x22 x23)}) IN {IList A7|ilen _v == ilen x20 + ilen x21 && ielems _v == ielems x20 + ielems x21}) IN {IList A6|(ilen _v >= 0 && ilen _v <= ilen ys) && ((ilen x18 >= 0 && ilen x18 < ilen xs) || (ilen _v >= 0 && ilen _v < ilen ys))})) in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> ??
*******************Filling holes in ICons
                                      x10 (merge (merge (ICons
                                                           (?? :: A8)
                                                           (?? :: IList {A8|x22 <= _v}))
                                                    (?? :: LET x20:({IList A8|_v == (ICons x22 x23)}) IN {IList A7|(ilen _v >= 0 && ilen _v <= ilen ys) && ((ilen x20 >= 0 && ilen x20 < ilen xs) || (ilen _v >= 0 && ilen _v < ilen ys))}))
                                             (?? :: LET x18:(LET x21:(LET x20:({IList A8|_v == (ICons x22 x23)}) IN {IList A7|(ilen _v >= 0 && ilen _v <= ilen ys) && ((ilen x20 >= 0 && ilen x20 < ilen xs) || (ilen _v >= 0 && ilen _v < ilen ys))}) IN LET x20:({IList A8|_v == (ICons x22 x23)}) IN {IList A7|ilen _v == ilen x20 + ilen x21 && ielems _v == ielems x20 + ielems x21}) IN {IList A6|(ilen _v >= 0 && ilen _v <= ilen ys) && ((ilen x18 >= 0 && ilen x18 < ilen xs) || (ilen _v >= 0 && ilen _v < ilen ys))}))
Looking for succinct type a
Trying x10
Trying x14
Current queue size 105
Checking ICons x10 (merge x15
                      (merge
                         (?? :: {IList A7|ilen _v >= 0 && ilen _v <= ilen xs})
                         (?? :: {IList A7|(ilen _v >= 0 && ilen _v <= ilen ys) && ((ilen x20 >= 0 && ilen x20 < ilen xs) || (ilen _v >= 0 && ilen _v < ilen ys))}))) in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> ??
*******************Filling holes in ICons
                                      x10 (merge x15 (merge
                                                        (?? :: {IList A7|ilen _v >= 0 && ilen _v <= ilen xs})
                                                        (?? :: {IList A7|(ilen _v >= 0 && ilen _v <= ilen ys) && ((ilen x20 >= 0 && ilen x20 < ilen xs) || (ilen _v >= 0 && ilen _v < ilen ys))})))
Looking for succinct type {IList |  | a, |  | }
Trying ICons
Trying INil
Trying x15
Trying x11
Trying merge
Trying xs
Trying ys
Current queue size 111
Checking ICons x10 (merge x15
                      (ICons (?? :: A7)
                         (?? :: IList {A7|x20 <= _v}))) in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> ??
*******************Filling holes in ICons
                                      x10 (merge x15 (ICons (?? :: A7)
                                                        (?? :: IList {A7|x20 <= _v})))
Looking for succinct type a
Trying x10
Trying x14
Current queue size 112
Checking ICons x10 (merge INil
                      (merge
                         (?? :: {IList A8|ilen _v >= 0 && ilen _v <= ilen xs})
                         (?? :: {IList A8|(ilen _v >= 0 && ilen _v <= ilen ys) && ((ilen x20 >= 0 && ilen x20 < ilen xs) || (ilen _v >= 0 && ilen _v < ilen ys))}))) in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> ??
*******************Filling holes in ICons
                                      x10 (merge INil (merge
                                                         (?? :: {IList A8|ilen _v >= 0 && ilen _v <= ilen xs})
                                                         (?? :: {IList A8|(ilen _v >= 0 && ilen _v <= ilen ys) && ((ilen x20 >= 0 && ilen x20 < ilen xs) || (ilen _v >= 0 && ilen _v < ilen ys))})))
Looking for succinct type {IList |  | a, |  | }
Trying ICons
Trying INil
Trying x15
Trying x11
Trying merge
Trying xs
Trying ys
Current queue size 118
Checking ICons x10 (merge INil
                      (ICons (?? :: A8)
                         (?? :: IList {A8|x20 <= _v}))) in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> ??
*******************Filling holes in ICons
                                      x10 (merge INil (ICons
                                                         (?? :: A8)
                                                         (?? :: IList {A8|x20 <= _v})))
Looking for succinct type a
Trying x10
Trying x14
Current queue size 119
Checking ICons x10 (merge (ICons
                             x14
                             (?? :: IList {A7|x14 <= _v}))
                      (?? :: LET x18:(LET x21:(IList {A7|x14 <= _v}) IN {IList A7|_v == (ICons x14 x21)}) IN {IList A6|(ilen _v >= 0 && ilen _v <= ilen ys) && ((ilen x18 >= 0 && ilen x18 < ilen xs) || (ilen _v >= 0 && ilen _v < ilen ys))})) in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> ??
*******************Filling holes in ICons
                                      x10 (merge (ICons x14
                                                    (?? :: IList {A7|x14 <= _v}))
                                             (?? :: LET x18:(LET x21:(IList {A7|x14 <= _v}) IN {IList A7|_v == (ICons x14 x21)}) IN {IList A6|(ilen _v >= 0 && ilen _v <= ilen ys) && ((ilen x18 >= 0 && ilen x18 < ilen xs) || (ilen _v >= 0 && ilen _v < ilen ys))}))
Looking for succinct type {IList |  | a, |  | }
Trying ICons
Trying INil
Trying x15
Trying x11
Trying merge
Trying xs
Trying ys
Current queue size 125
Checking ICons x10 (merge (ICons
                             x10
                             (?? :: IList {A7|x10 <= _v}))
                      (?? :: LET x18:(LET x21:(IList {A7|x10 <= _v}) IN {IList A7|_v == (ICons x10 x21)}) IN {IList A6|(ilen _v >= 0 && ilen _v <= ilen ys) && ((ilen x18 >= 0 && ilen x18 < ilen xs) || (ilen _v >= 0 && ilen _v < ilen ys))})) in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> ??
*******************Filling holes in ICons
                                      x10 (merge (ICons x10
                                                    (?? :: IList {A7|x10 <= _v}))
                                             (?? :: LET x18:(LET x21:(IList {A7|x10 <= _v}) IN {IList A7|_v == (ICons x10 x21)}) IN {IList A6|(ilen _v >= 0 && ilen _v <= ilen ys) && ((ilen x18 >= 0 && ilen x18 < ilen xs) || (ilen _v >= 0 && ilen _v < ilen ys))}))
Looking for succinct type {IList |  | a, |  | }
Trying ICons
Trying INil
Trying x15
Trying x11
Trying merge
Trying xs
Trying ys
Current queue size 131
Checking ICons x10 (ICons x14
                      (merge
                         (?? :: {IList A7|ilen _v >= 0 && ilen _v <= ilen xs})
                         (?? :: {IList A7|(ilen _v >= 0 && ilen _v <= ilen ys) && ((ilen x20 >= 0 && ilen x20 < ilen xs) || (ilen _v >= 0 && ilen _v < ilen ys))}))) in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> ??
*******************Filling holes in ICons
                                      x10 (ICons x14 (merge
                                                        (?? :: {IList A7|ilen _v >= 0 && ilen _v <= ilen xs})
                                                        (?? :: {IList A7|(ilen _v >= 0 && ilen _v <= ilen ys) && ((ilen x20 >= 0 && ilen x20 < ilen xs) || (ilen _v >= 0 && ilen _v < ilen ys))})))
Looking for succinct type {IList |  | a, |  | }
Trying ICons
Trying INil
Trying x15
Trying x11
Trying merge
Trying xs
Trying ys
Current queue size 137
Checking ICons x10 (ICons x14
                      (ICons (?? :: A7)
                         (?? :: IList {A7|x20 <= _v}))) in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> ??
*******************Filling holes in ICons
                                      x10 (ICons x14 (ICons (?? :: A7)
                                                        (?? :: IList {A7|x20 <= _v})))
Looking for succinct type a
Trying x10
Trying x14
Current queue size 138
Checking ICons x10 (ICons x10
                      (merge
                         (?? :: {IList A7|ilen _v >= 0 && ilen _v <= ilen xs})
                         (?? :: {IList A7|(ilen _v >= 0 && ilen _v <= ilen ys) && ((ilen x20 >= 0 && ilen x20 < ilen xs) || (ilen _v >= 0 && ilen _v < ilen ys))}))) in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> ??
*******************Filling holes in ICons
                                      x10 (ICons x10 (merge
                                                        (?? :: {IList A7|ilen _v >= 0 && ilen _v <= ilen xs})
                                                        (?? :: {IList A7|(ilen _v >= 0 && ilen _v <= ilen ys) && ((ilen x20 >= 0 && ilen x20 < ilen xs) || (ilen _v >= 0 && ilen _v < ilen ys))})))
Looking for succinct type {IList |  | a, |  | }
Trying ICons
Trying INil
Trying x15
Trying x11
Trying merge
Trying xs
Trying ys
Current queue size 144
Checking ICons x10 (ICons x10
                      (ICons (?? :: A7)
                         (?? :: IList {A7|x20 <= _v}))) in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> ??
*******************Filling holes in ICons
                                      x10 (ICons x10 (ICons (?? :: A7)
                                                        (?? :: IList {A7|x20 <= _v})))
Looking for succinct type a
Trying x10
Trying x14
Current queue size 145
Checking ICons x14 (merge (merge
                             (merge ys
                                (?? :: {IList A8|(ilen _v >= 0 && ilen _v <= ilen ys) && ((ilen ys >= 0 && ilen ys < ilen xs) || (ilen _v >= 0 && ilen _v < ilen ys))}))
                             (?? :: LET x20:(LET x23:({IList A8|(ilen _v >= 0 && ilen _v <= ilen ys) && ((ilen ys >= 0 && ilen ys < ilen xs) || (ilen _v >= 0 && ilen _v < ilen ys))}) IN {IList A8|ilen _v == ilen ys + ilen x23 && ielems _v == ielems ys + ielems x23}) IN {IList A7|(ilen _v >= 0 && ilen _v <= ilen ys) && ((ilen x20 >= 0 && ilen x20 < ilen xs) || (ilen _v >= 0 && ilen _v < ilen ys))}))
                      (?? :: LET x18:(LET x21:(LET x20:(LET x23:({IList A8|(ilen _v >= 0 && ilen _v <= ilen ys) && ((ilen ys >= 0 && ilen ys < ilen xs) || (ilen _v >= 0 && ilen _v < ilen ys))}) IN {IList A8|ilen _v == ilen ys + ilen x23 && ielems _v == ielems ys + ielems x23}) IN {IList A7|(ilen _v >= 0 && ilen _v <= ilen ys) && ((ilen x20 >= 0 && ilen x20 < ilen xs) || (ilen _v >= 0 && ilen _v < ilen ys))}) IN LET x20:(LET x23:({IList A8|(ilen _v >= 0 && ilen _v <= ilen ys) && ((ilen ys >= 0 && ilen ys < ilen xs) || (ilen _v >= 0 && ilen _v < ilen ys))}) IN {IList A8|ilen _v == ilen ys + ilen x23 && ielems _v == ielems ys + ielems x23}) IN {IList A7|ilen _v == ilen x20 + ilen x21 && ielems _v == ielems x20 + ielems x21}) IN {IList A6|(ilen _v >= 0 && ilen _v <= ilen ys) && ((ilen x18 >= 0 && ilen x18 < ilen xs) || (ilen _v >= 0 && ilen _v < ilen ys))})) in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> ??
TYPE ERROR: Cannot find sufficiently strong refinements
Current queue size 144
Checking ICons x14 (merge (merge
                             (merge xs
                                (?? :: {IList A8|(ilen _v >= 0 && ilen _v <= ilen ys) && ((ilen xs >= 0 && ilen xs < ilen xs) || (ilen _v >= 0 && ilen _v < ilen ys))}))
                             (?? :: LET x20:(LET x23:({IList A8|(ilen _v >= 0 && ilen _v <= ilen ys) && ((ilen xs >= 0 && ilen xs < ilen xs) || (ilen _v >= 0 && ilen _v < ilen ys))}) IN {IList A8|ilen _v == ilen xs + ilen x23 && ielems _v == ielems xs + ielems x23}) IN {IList A7|(ilen _v >= 0 && ilen _v <= ilen ys) && ((ilen x20 >= 0 && ilen x20 < ilen xs) || (ilen _v >= 0 && ilen _v < ilen ys))}))
                      (?? :: LET x18:(LET x21:(LET x20:(LET x23:({IList A8|(ilen _v >= 0 && ilen _v <= ilen ys) && ((ilen xs >= 0 && ilen xs < ilen xs) || (ilen _v >= 0 && ilen _v < ilen ys))}) IN {IList A8|ilen _v == ilen xs + ilen x23 && ielems _v == ielems xs + ielems x23}) IN {IList A7|(ilen _v >= 0 && ilen _v <= ilen ys) && ((ilen x20 >= 0 && ilen x20 < ilen xs) || (ilen _v >= 0 && ilen _v < ilen ys))}) IN LET x20:(LET x23:({IList A8|(ilen _v >= 0 && ilen _v <= ilen ys) && ((ilen xs >= 0 && ilen xs < ilen xs) || (ilen _v >= 0 && ilen _v < ilen ys))}) IN {IList A8|ilen _v == ilen xs + ilen x23 && ielems _v == ielems xs + ielems x23}) IN {IList A7|ilen _v == ilen x20 + ilen x21 && ielems _v == ielems x20 + ielems x21}) IN {IList A6|(ilen _v >= 0 && ilen _v <= ilen ys) && ((ilen x18 >= 0 && ilen x18 < ilen xs) || (ilen _v >= 0 && ilen _v < ilen ys))})) in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> ??
TYPE ERROR: Cannot find sufficiently strong refinements
Current queue size 143
Checking ICons x14 (merge (merge
                             (merge (merge
                                       (?? :: {IList A9|ilen _v >= 0 && ilen _v <= ilen xs})
                                       (?? :: {IList A9|(ilen _v >= 0 && ilen _v <= ilen ys) && ((ilen x24 >= 0 && ilen x24 < ilen xs) || (ilen _v >= 0 && ilen _v < ilen ys))}))
                                (?? :: LET x22:({IList A9|ilen _v == ilen x24 + ilen x25 && ielems _v == ielems x24 + ielems x25}) IN {IList A8|(ilen _v >= 0 && ilen _v <= ilen ys) && ((ilen x22 >= 0 && ilen x22 < ilen xs) || (ilen _v >= 0 && ilen _v < ilen ys))}))
                             (?? :: LET x20:(LET x23:(LET x22:({IList A9|ilen _v == ilen x24 + ilen x25 && ielems _v == ielems x24 + ielems x25}) IN {IList A8|(ilen _v >= 0 && ilen _v <= ilen ys) && ((ilen x22 >= 0 && ilen x22 < ilen xs) || (ilen _v >= 0 && ilen _v < ilen ys))}) IN LET x22:({IList A9|ilen _v == ilen x24 + ilen x25 && ielems _v == ielems x24 + ielems x25}) IN {IList A8|ilen _v == ilen x22 + ilen x23 && ielems _v == ielems x22 + ielems x23}) IN {IList A7|(ilen _v >= 0 && ilen _v <= ilen ys) && ((ilen x20 >= 0 && ilen x20 < ilen xs) || (ilen _v >= 0 && ilen _v < ilen ys))}))
                      (?? :: LET x18:(LET x21:(LET x20:(LET x23:(LET x22:({IList A9|ilen _v == ilen x24 + ilen x25 && ielems _v == ielems x24 + ielems x25}) IN {IList A8|(ilen _v >= 0 && ilen _v <= ilen ys) && ((ilen x22 >= 0 && ilen x22 < ilen xs) || (ilen _v >= 0 && ilen _v < ilen ys))}) IN LET x22:({IList A9|ilen _v == ilen x24 + ilen x25 && ielems _v == ielems x24 + ielems x25}) IN {IList A8|ilen _v == ilen x22 + ilen x23 && ielems _v == ielems x22 + ielems x23}) IN {IList A7|(ilen _v >= 0 && ilen _v <= ilen ys) && ((ilen x20 >= 0 && ilen x20 < ilen xs) || (ilen _v >= 0 && ilen _v < ilen ys))}) IN LET x20:(LET x23:(LET x22:({IList A9|ilen _v == ilen x24 + ilen x25 && ielems _v == ielems x24 + ielems x25}) IN {IList A8|(ilen _v >= 0 && ilen _v <= ilen ys) && ((ilen x22 >= 0 && ilen x22 < ilen xs) || (ilen _v >= 0 && ilen _v < ilen ys))}) IN LET x22:({IList A9|ilen _v == ilen x24 + ilen x25 && ielems _v == ielems x24 + ielems x25}) IN {IList A8|ilen _v == ilen x22 + ilen x23 && ielems _v == ielems x22 + ielems x23}) IN {IList A7|ilen _v == ilen x20 + ilen x21 && ielems _v == ielems x20 + ielems x21}) IN {IList A6|(ilen _v >= 0 && ilen _v <= ilen ys) && ((ilen x18 >= 0 && ilen x18 < ilen xs) || (ilen _v >= 0 && ilen _v < ilen ys))})) in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> ??
*******************Filling holes in ICons
                                      x14 (merge (merge (merge (merge
                                                                  (?? :: {IList A9|ilen _v >= 0 && ilen _v <= ilen xs})
                                                                  (?? :: {IList A9|(ilen _v >= 0 && ilen _v <= ilen ys) && ((ilen x24 >= 0 && ilen x24 < ilen xs) || (ilen _v >= 0 && ilen _v < ilen ys))}))
                                                           (?? :: LET x22:({IList A9|ilen _v == ilen x24 + ilen x25 && ielems _v == ielems x24 + ielems x25}) IN {IList A8|(ilen _v >= 0 && ilen _v <= ilen ys) && ((ilen x22 >= 0 && ilen x22 < ilen xs) || (ilen _v >= 0 && ilen _v < ilen ys))}))
                                                    (?? :: LET x20:(LET x23:(LET x22:({IList A9|ilen _v == ilen x24 + ilen x25 && ielems _v == ielems x24 + ielems x25}) IN {IList A8|(ilen _v >= 0 && ilen _v <= ilen ys) && ((ilen x22 >= 0 && ilen x22 < ilen xs) || (ilen _v >= 0 && ilen _v < ilen ys))}) IN LET x22:({IList A9|ilen _v == ilen x24 + ilen x25 && ielems _v == ielems x24 + ielems x25}) IN {IList A8|ilen _v == ilen x22 + ilen x23 && ielems _v == ielems x22 + ielems x23}) IN {IList A7|(ilen _v >= 0 && ilen _v <= ilen ys) && ((ilen x20 >= 0 && ilen x20 < ilen xs) || (ilen _v >= 0 && ilen _v < ilen ys))}))
                                             (?? :: LET x18:(LET x21:(LET x20:(LET x23:(LET x22:({IList A9|ilen _v == ilen x24 + ilen x25 && ielems _v == ielems x24 + ielems x25}) IN {IList A8|(ilen _v >= 0 && ilen _v <= ilen ys) && ((ilen x22 >= 0 && ilen x22 < ilen xs) || (ilen _v >= 0 && ilen _v < ilen ys))}) IN LET x22:({IList A9|ilen _v == ilen x24 + ilen x25 && ielems _v == ielems x24 + ielems x25}) IN {IList A8|ilen _v == ilen x22 + ilen x23 && ielems _v == ielems x22 + ielems x23}) IN {IList A7|(ilen _v >= 0 && ilen _v <= ilen ys) && ((ilen x20 >= 0 && ilen x20 < ilen xs) || (ilen _v >= 0 && ilen _v < ilen ys))}) IN LET x20:(LET x23:(LET x22:({IList A9|ilen _v == ilen x24 + ilen x25 && ielems _v == ielems x24 + ielems x25}) IN {IList A8|(ilen _v >= 0 && ilen _v <= ilen ys) && ((ilen x22 >= 0 && ilen x22 < ilen xs) || (ilen _v >= 0 && ilen _v < ilen ys))}) IN LET x22:({IList A9|ilen _v == ilen x24 + ilen x25 && ielems _v == ielems x24 + ielems x25}) IN {IList A8|ilen _v == ilen x22 + ilen x23 && ielems _v == ielems x22 + ielems x23}) IN {IList A7|ilen _v == ilen x20 + ilen x21 && ielems _v == ielems x20 + ielems x21}) IN {IList A6|(ilen _v >= 0 && ilen _v <= ilen ys) && ((ilen x18 >= 0 && ilen x18 < ilen xs) || (ilen _v >= 0 && ilen _v < ilen ys))}))
Looking for succinct type {IList |  | a, |  | }
Trying ICons
Trying INil
Trying x15
Trying x11
Trying merge
Trying xs
Trying ys
Current queue size 149
Checking ICons x14 (merge (merge
                             (merge x11
                                (?? :: {IList A8|(ilen _v >= 0 && ilen _v <= ilen ys) && ((ilen x11 >= 0 && ilen x11 < ilen xs) || (ilen _v >= 0 && ilen _v < ilen ys))}))
                             (?? :: LET x20:(LET x23:({IList A8|(ilen _v >= 0 && ilen _v <= ilen ys) && ((ilen x11 >= 0 && ilen x11 < ilen xs) || (ilen _v >= 0 && ilen _v < ilen ys))}) IN {IList A8|ilen _v == ilen x11 + ilen x23 && ielems _v == ielems x11 + ielems x23}) IN {IList A7|(ilen _v >= 0 && ilen _v <= ilen ys) && ((ilen x20 >= 0 && ilen x20 < ilen xs) || (ilen _v >= 0 && ilen _v < ilen ys))}))
                      (?? :: LET x18:(LET x21:(LET x20:(LET x23:({IList A8|(ilen _v >= 0 && ilen _v <= ilen ys) && ((ilen x11 >= 0 && ilen x11 < ilen xs) || (ilen _v >= 0 && ilen _v < ilen ys))}) IN {IList A8|ilen _v == ilen x11 + ilen x23 && ielems _v == ielems x11 + ielems x23}) IN {IList A7|(ilen _v >= 0 && ilen _v <= ilen ys) && ((ilen x20 >= 0 && ilen x20 < ilen xs) || (ilen _v >= 0 && ilen _v < ilen ys))}) IN LET x20:(LET x23:({IList A8|(ilen _v >= 0 && ilen _v <= ilen ys) && ((ilen x11 >= 0 && ilen x11 < ilen xs) || (ilen _v >= 0 && ilen _v < ilen ys))}) IN {IList A8|ilen _v == ilen x11 + ilen x23 && ielems _v == ielems x11 + ielems x23}) IN {IList A7|ilen _v == ilen x20 + ilen x21 && ielems _v == ielems x20 + ielems x21}) IN {IList A6|(ilen _v >= 0 && ilen _v <= ilen ys) && ((ilen x18 >= 0 && ilen x18 < ilen xs) || (ilen _v >= 0 && ilen _v < ilen ys))})) in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> ??
TYPE ERROR: Cannot find sufficiently strong refinements
Current queue size 148
Checking ICons x14 (merge (merge
                             (merge x15
                                (?? :: {IList A8|(ilen _v >= 0 && ilen _v <= ilen ys) && ((ilen x15 >= 0 && ilen x15 < ilen xs) || (ilen _v >= 0 && ilen _v < ilen ys))}))
                             (?? :: LET x20:(LET x23:({IList A8|(ilen _v >= 0 && ilen _v <= ilen ys) && ((ilen x15 >= 0 && ilen x15 < ilen xs) || (ilen _v >= 0 && ilen _v < ilen ys))}) IN {IList A8|ilen _v == ilen x15 + ilen x23 && ielems _v == ielems x15 + ielems x23}) IN {IList A7|(ilen _v >= 0 && ilen _v <= ilen ys) && ((ilen x20 >= 0 && ilen x20 < ilen xs) || (ilen _v >= 0 && ilen _v < ilen ys))}))
                      (?? :: LET x18:(LET x21:(LET x20:(LET x23:({IList A8|(ilen _v >= 0 && ilen _v <= ilen ys) && ((ilen x15 >= 0 && ilen x15 < ilen xs) || (ilen _v >= 0 && ilen _v < ilen ys))}) IN {IList A8|ilen _v == ilen x15 + ilen x23 && ielems _v == ielems x15 + ielems x23}) IN {IList A7|(ilen _v >= 0 && ilen _v <= ilen ys) && ((ilen x20 >= 0 && ilen x20 < ilen xs) || (ilen _v >= 0 && ilen _v < ilen ys))}) IN LET x20:(LET x23:({IList A8|(ilen _v >= 0 && ilen _v <= ilen ys) && ((ilen x15 >= 0 && ilen x15 < ilen xs) || (ilen _v >= 0 && ilen _v < ilen ys))}) IN {IList A8|ilen _v == ilen x15 + ilen x23 && ielems _v == ielems x15 + ielems x23}) IN {IList A7|ilen _v == ilen x20 + ilen x21 && ielems _v == ielems x20 + ielems x21}) IN {IList A6|(ilen _v >= 0 && ilen _v <= ilen ys) && ((ilen x18 >= 0 && ilen x18 < ilen xs) || (ilen _v >= 0 && ilen _v < ilen ys))})) in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> ??
*******************Filling holes in ICons
                                      x14 (merge (merge (merge x15
                                                           (?? :: {IList A8|(ilen _v >= 0 && ilen _v <= ilen ys) && ((ilen x15 >= 0 && ilen x15 < ilen xs) || (ilen _v >= 0 && ilen _v < ilen ys))}))
                                                    (?? :: LET x20:(LET x23:({IList A8|(ilen _v >= 0 && ilen _v <= ilen ys) && ((ilen x15 >= 0 && ilen x15 < ilen xs) || (ilen _v >= 0 && ilen _v < ilen ys))}) IN {IList A8|ilen _v == ilen x15 + ilen x23 && ielems _v == ielems x15 + ielems x23}) IN {IList A7|(ilen _v >= 0 && ilen _v <= ilen ys) && ((ilen x20 >= 0 && ilen x20 < ilen xs) || (ilen _v >= 0 && ilen _v < ilen ys))}))
                                             (?? :: LET x18:(LET x21:(LET x20:(LET x23:({IList A8|(ilen _v >= 0 && ilen _v <= ilen ys) && ((ilen x15 >= 0 && ilen x15 < ilen xs) || (ilen _v >= 0 && ilen _v < ilen ys))}) IN {IList A8|ilen _v == ilen x15 + ilen x23 && ielems _v == ielems x15 + ielems x23}) IN {IList A7|(ilen _v >= 0 && ilen _v <= ilen ys) && ((ilen x20 >= 0 && ilen x20 < ilen xs) || (ilen _v >= 0 && ilen _v < ilen ys))}) IN LET x20:(LET x23:({IList A8|(ilen _v >= 0 && ilen _v <= ilen ys) && ((ilen x15 >= 0 && ilen x15 < ilen xs) || (ilen _v >= 0 && ilen _v < ilen ys))}) IN {IList A8|ilen _v == ilen x15 + ilen x23 && ielems _v == ielems x15 + ielems x23}) IN {IList A7|ilen _v == ilen x20 + ilen x21 && ielems _v == ielems x20 + ielems x21}) IN {IList A6|(ilen _v >= 0 && ilen _v <= ilen ys) && ((ilen x18 >= 0 && ilen x18 < ilen xs) || (ilen _v >= 0 && ilen _v < ilen ys))}))
Looking for succinct type {IList |  | a, |  | }
Trying ICons
Trying INil
Trying x15
Trying x11
Trying merge
Trying xs
Trying ys
Current queue size 154
Checking ICons x14 (merge (merge
                             (merge INil
                                (?? :: {IList A8|(ilen _v >= 0 && ilen _v <= ilen ys) && ((ilen (INil) >= 0 && ilen (INil) < ilen xs) || (ilen _v >= 0 && ilen _v < ilen ys))}))
                             (?? :: LET x20:(LET x23:({IList A8|(ilen _v >= 0 && ilen _v <= ilen ys) && ((ilen (INil) >= 0 && ilen (INil) < ilen xs) || (ilen _v >= 0 && ilen _v < ilen ys))}) IN {IList A8|ilen _v == ilen (INil) + ilen x23 && ielems _v == ielems (INil) + ielems x23}) IN {IList A7|(ilen _v >= 0 && ilen _v <= ilen ys) && ((ilen x20 >= 0 && ilen x20 < ilen xs) || (ilen _v >= 0 && ilen _v < ilen ys))}))
                      (?? :: LET x18:(LET x21:(LET x20:(LET x23:({IList A8|(ilen _v >= 0 && ilen _v <= ilen ys) && ((ilen (INil) >= 0 && ilen (INil) < ilen xs) || (ilen _v >= 0 && ilen _v < ilen ys))}) IN {IList A8|ilen _v == ilen (INil) + ilen x23 && ielems _v == ielems (INil) + ielems x23}) IN {IList A7|(ilen _v >= 0 && ilen _v <= ilen ys) && ((ilen x20 >= 0 && ilen x20 < ilen xs) || (ilen _v >= 0 && ilen _v < ilen ys))}) IN LET x20:(LET x23:({IList A8|(ilen _v >= 0 && ilen _v <= ilen ys) && ((ilen (INil) >= 0 && ilen (INil) < ilen xs) || (ilen _v >= 0 && ilen _v < ilen ys))}) IN {IList A8|ilen _v == ilen (INil) + ilen x23 && ielems _v == ielems (INil) + ielems x23}) IN {IList A7|ilen _v == ilen x20 + ilen x21 && ielems _v == ielems x20 + ielems x21}) IN {IList A6|(ilen _v >= 0 && ilen _v <= ilen ys) && ((ilen x18 >= 0 && ilen x18 < ilen xs) || (ilen _v >= 0 && ilen _v < ilen ys))})) in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> ??
*******************Filling holes in ICons
                                      x14 (merge (merge (merge INil
                                                           (?? :: {IList A8|(ilen _v >= 0 && ilen _v <= ilen ys) && ((ilen (INil) >= 0 && ilen (INil) < ilen xs) || (ilen _v >= 0 && ilen _v < ilen ys))}))
                                                    (?? :: LET x20:(LET x23:({IList A8|(ilen _v >= 0 && ilen _v <= ilen ys) && ((ilen (INil) >= 0 && ilen (INil) < ilen xs) || (ilen _v >= 0 && ilen _v < ilen ys))}) IN {IList A8|ilen _v == ilen (INil) + ilen x23 && ielems _v == ielems (INil) + ielems x23}) IN {IList A7|(ilen _v >= 0 && ilen _v <= ilen ys) && ((ilen x20 >= 0 && ilen x20 < ilen xs) || (ilen _v >= 0 && ilen _v < ilen ys))}))
                                             (?? :: LET x18:(LET x21:(LET x20:(LET x23:({IList A8|(ilen _v >= 0 && ilen _v <= ilen ys) && ((ilen (INil) >= 0 && ilen (INil) < ilen xs) || (ilen _v >= 0 && ilen _v < ilen ys))}) IN {IList A8|ilen _v == ilen (INil) + ilen x23 && ielems _v == ielems (INil) + ielems x23}) IN {IList A7|(ilen _v >= 0 && ilen _v <= ilen ys) && ((ilen x20 >= 0 && ilen x20 < ilen xs) || (ilen _v >= 0 && ilen _v < ilen ys))}) IN LET x20:(LET x23:({IList A8|(ilen _v >= 0 && ilen _v <= ilen ys) && ((ilen (INil) >= 0 && ilen (INil) < ilen xs) || (ilen _v >= 0 && ilen _v < ilen ys))}) IN {IList A8|ilen _v == ilen (INil) + ilen x23 && ielems _v == ielems (INil) + ielems x23}) IN {IList A7|ilen _v == ilen x20 + ilen x21 && ielems _v == ielems x20 + ielems x21}) IN {IList A6|(ilen _v >= 0 && ilen _v <= ilen ys) && ((ilen x18 >= 0 && ilen x18 < ilen xs) || (ilen _v >= 0 && ilen _v < ilen ys))}))
Looking for succinct type {IList |  | a, |  | }
Trying ICons
Trying INil
Trying x15
Trying x11
Trying merge
Trying xs
Trying ys
Current queue size 160
Checking ICons x14 (merge (merge
                             (merge (ICons (?? :: A9)
                                       (?? :: IList {A9|x24 <= _v}))
                                (?? :: LET x22:({IList A9|_v == (ICons x24 x25)}) IN {IList A8|(ilen _v >= 0 && ilen _v <= ilen ys) && ((ilen x22 >= 0 && ilen x22 < ilen xs) || (ilen _v >= 0 && ilen _v < ilen ys))}))
                             (?? :: LET x20:(LET x23:(LET x22:({IList A9|_v == (ICons x24 x25)}) IN {IList A8|(ilen _v >= 0 && ilen _v <= ilen ys) && ((ilen x22 >= 0 && ilen x22 < ilen xs) || (ilen _v >= 0 && ilen _v < ilen ys))}) IN LET x22:({IList A9|_v == (ICons x24 x25)}) IN {IList A8|ilen _v == ilen x22 + ilen x23 && ielems _v == ielems x22 + ielems x23}) IN {IList A7|(ilen _v >= 0 && ilen _v <= ilen ys) && ((ilen x20 >= 0 && ilen x20 < ilen xs) || (ilen _v >= 0 && ilen _v < ilen ys))}))
                      (?? :: LET x18:(LET x21:(LET x20:(LET x23:(LET x22:({IList A9|_v == (ICons x24 x25)}) IN {IList A8|(ilen _v >= 0 && ilen _v <= ilen ys) && ((ilen x22 >= 0 && ilen x22 < ilen xs) || (ilen _v >= 0 && ilen _v < ilen ys))}) IN LET x22:({IList A9|_v == (ICons x24 x25)}) IN {IList A8|ilen _v == ilen x22 + ilen x23 && ielems _v == ielems x22 + ielems x23}) IN {IList A7|(ilen _v >= 0 && ilen _v <= ilen ys) && ((ilen x20 >= 0 && ilen x20 < ilen xs) || (ilen _v >= 0 && ilen _v < ilen ys))}) IN LET x20:(LET x23:(LET x22:({IList A9|_v == (ICons x24 x25)}) IN {IList A8|(ilen _v >= 0 && ilen _v <= ilen ys) && ((ilen x22 >= 0 && ilen x22 < ilen xs) || (ilen _v >= 0 && ilen _v < ilen ys))}) IN LET x22:({IList A9|_v == (ICons x24 x25)}) IN {IList A8|ilen _v == ilen x22 + ilen x23 && ielems _v == ielems x22 + ielems x23}) IN {IList A7|ilen _v == ilen x20 + ilen x21 && ielems _v == ielems x20 + ielems x21}) IN {IList A6|(ilen _v >= 0 && ilen _v <= ilen ys) && ((ilen x18 >= 0 && ilen x18 < ilen xs) || (ilen _v >= 0 && ilen _v < ilen ys))})) in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> ??
*******************Filling holes in ICons
                                      x14 (merge (merge (merge (ICons
                                                                  (?? :: A9)
                                                                  (?? :: IList {A9|x24 <= _v}))
                                                           (?? :: LET x22:({IList A9|_v == (ICons x24 x25)}) IN {IList A8|(ilen _v >= 0 && ilen _v <= ilen ys) && ((ilen x22 >= 0 && ilen x22 < ilen xs) || (ilen _v >= 0 && ilen _v < ilen ys))}))
                                                    (?? :: LET x20:(LET x23:(LET x22:({IList A9|_v == (ICons x24 x25)}) IN {IList A8|(ilen _v >= 0 && ilen _v <= ilen ys) && ((ilen x22 >= 0 && ilen x22 < ilen xs) || (ilen _v >= 0 && ilen _v < ilen ys))}) IN LET x22:({IList A9|_v == (ICons x24 x25)}) IN {IList A8|ilen _v == ilen x22 + ilen x23 && ielems _v == ielems x22 + ielems x23}) IN {IList A7|(ilen _v >= 0 && ilen _v <= ilen ys) && ((ilen x20 >= 0 && ilen x20 < ilen xs) || (ilen _v >= 0 && ilen _v < ilen ys))}))
                                             (?? :: LET x18:(LET x21:(LET x20:(LET x23:(LET x22:({IList A9|_v == (ICons x24 x25)}) IN {IList A8|(ilen _v >= 0 && ilen _v <= ilen ys) && ((ilen x22 >= 0 && ilen x22 < ilen xs) || (ilen _v >= 0 && ilen _v < ilen ys))}) IN LET x22:({IList A9|_v == (ICons x24 x25)}) IN {IList A8|ilen _v == ilen x22 + ilen x23 && ielems _v == ielems x22 + ielems x23}) IN {IList A7|(ilen _v >= 0 && ilen _v <= ilen ys) && ((ilen x20 >= 0 && ilen x20 < ilen xs) || (ilen _v >= 0 && ilen _v < ilen ys))}) IN LET x20:(LET x23:(LET x22:({IList A9|_v == (ICons x24 x25)}) IN {IList A8|(ilen _v >= 0 && ilen _v <= ilen ys) && ((ilen x22 >= 0 && ilen x22 < ilen xs) || (ilen _v >= 0 && ilen _v < ilen ys))}) IN LET x22:({IList A9|_v == (ICons x24 x25)}) IN {IList A8|ilen _v == ilen x22 + ilen x23 && ielems _v == ielems x22 + ielems x23}) IN {IList A7|ilen _v == ilen x20 + ilen x21 && ielems _v == ielems x20 + ielems x21}) IN {IList A6|(ilen _v >= 0 && ilen _v <= ilen ys) && ((ilen x18 >= 0 && ilen x18 < ilen xs) || (ilen _v >= 0 && ilen _v < ilen ys))}))
Looking for succinct type a
Trying x10
Trying x14
Current queue size 161
Checking ICons x14 (merge (merge
                             x15 ys)
                      (?? :: LET x18:({IList A7|ilen _v == ilen x15 + ilen ys && ielems _v == ielems x15 + ielems ys}) IN {IList A6|(ilen _v >= 0 && ilen _v <= ilen ys) && ((ilen x18 >= 0 && ilen x18 < ilen xs) || (ilen _v >= 0 && ilen _v < ilen ys))})) in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> ??
TYPE ERROR: Cannot find sufficiently strong refinements
Current queue size 160
Checking ICons x14 (merge (merge
                             x15 xs)
                      (?? :: LET x18:({IList A7|ilen _v == ilen x15 + ilen xs && ielems _v == ielems x15 + ielems xs}) IN {IList A6|(ilen _v >= 0 && ilen _v <= ilen ys) && ((ilen x18 >= 0 && ilen x18 < ilen xs) || (ilen _v >= 0 && ilen _v < ilen ys))})) in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> ??
TYPE ERROR: Cannot find sufficiently strong refinements
Current queue size 159
Checking ICons x14 (merge (merge
                             x15 (merge
                                    (?? :: {IList A8|ilen _v >= 0 && ilen _v <= ilen xs})
                                    (?? :: {IList A8|(ilen _v >= 0 && ilen _v <= ilen ys) && ((ilen x22 >= 0 && ilen x22 < ilen xs) || (ilen _v >= 0 && ilen _v < ilen ys))})))
                      (?? :: LET x18:(LET x21:({IList A8|ilen _v == ilen x22 + ilen x23 && ielems _v == ielems x22 + ielems x23}) IN {IList A7|ilen _v == ilen x15 + ilen x21 && ielems _v == ielems x15 + ielems x21}) IN {IList A6|(ilen _v >= 0 && ilen _v <= ilen ys) && ((ilen x18 >= 0 && ilen x18 < ilen xs) || (ilen _v >= 0 && ilen _v < ilen ys))})) in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> ??
*******************Filling holes in ICons
                                      x14 (merge (merge x15 (merge
                                                               (?? :: {IList A8|ilen _v >= 0 && ilen _v <= ilen xs})
                                                               (?? :: {IList A8|(ilen _v >= 0 && ilen _v <= ilen ys) && ((ilen x22 >= 0 && ilen x22 < ilen xs) || (ilen _v >= 0 && ilen _v < ilen ys))})))
                                             (?? :: LET x18:(LET x21:({IList A8|ilen _v == ilen x22 + ilen x23 && ielems _v == ielems x22 + ielems x23}) IN {IList A7|ilen _v == ilen x15 + ilen x21 && ielems _v == ielems x15 + ielems x21}) IN {IList A6|(ilen _v >= 0 && ilen _v <= ilen ys) && ((ilen x18 >= 0 && ilen x18 < ilen xs) || (ilen _v >= 0 && ilen _v < ilen ys))}))
Looking for succinct type {IList |  | a, |  | }
Trying ICons
Trying INil
Trying x15
Trying x11
Trying merge
Trying xs
Trying ys
Current queue size 165
Checking ICons x14 (merge (merge
                             x15 x11)
                      (?? :: LET x18:({IList A7|ilen _v == ilen x15 + ilen x11 && ielems _v == ielems x15 + ielems x11}) IN {IList A6|(ilen _v >= 0 && ilen _v <= ilen ys) && ((ilen x18 >= 0 && ilen x18 < ilen xs) || (ilen _v >= 0 && ilen _v < ilen ys))})) in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> ??
*******************Filling holes in ICons
                                      x14 (merge (merge x15 x11)
                                             (?? :: LET x18:({IList A7|ilen _v == ilen x15 + ilen x11 && ielems _v == ielems x15 + ielems x11}) IN {IList A6|(ilen _v >= 0 && ilen _v <= ilen ys) && ((ilen x18 >= 0 && ilen x18 < ilen xs) || (ilen _v >= 0 && ilen _v < ilen ys))}))
Looking for succinct type {IList |  | a, |  | }
Trying ICons
Trying INil
Trying x15
Trying x11
Trying merge
Trying xs
Trying ys
Current queue size 171
Checking ICons x14 (merge (merge
                             x15 x11) INil) in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> ??
TYPE ERROR: Cannot match shape 'IList (A8)'
with shape '(IList (a) -> IList (a))'
Current queue size 170
Checking ICons x14 (merge (merge
                             x15 x11) x15) in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> ??
TYPE ERROR: Cannot match shape 'IList (a)'
with shape '(IList (a) -> IList (a))'
Current queue size 169
Checking ICons x14 (merge (merge
                             x15 x11) x11) in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> ??
TYPE ERROR: Cannot match shape 'IList (a)'
with shape '(IList (a) -> IList (a))'
Current queue size 168
Checking ICons x14 (merge (merge
                             x15 x11) xs) in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> ??
TYPE ERROR: Cannot match shape 'IList (a)'
with shape '(IList (a) -> IList (a))'
Current queue size 167
Checking ICons x14 (merge (merge
                             x15 x11) ys) in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> ??
TYPE ERROR: Cannot match shape 'IList (a)'
with shape '(IList (a) -> IList (a))'
Current queue size 166
Checking ICons x14 (merge (merge
                             x15 x15)
                      (?? :: LET x18:({IList A7|ilen _v == ilen x15 + ilen x15 && ielems _v == ielems x15 + ielems x15}) IN {IList A6|(ilen _v >= 0 && ilen _v <= ilen ys) && ((ilen x18 >= 0 && ilen x18 < ilen xs) || (ilen _v >= 0 && ilen _v < ilen ys))})) in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> ??
TYPE ERROR: Cannot find sufficiently strong refinements
Current queue size 165
Checking ICons x14 (merge (merge
                             x15 INil)
                      (?? :: LET x18:({IList A7|ilen _v == ilen x15 + ilen (INil) && ielems _v == ielems x15 + ielems (INil)}) IN {IList A6|(ilen _v >= 0 && ilen _v <= ilen ys) && ((ilen x18 >= 0 && ilen x18 < ilen xs) || (ilen _v >= 0 && ilen _v < ilen ys))})) in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> ??
*******************Filling holes in ICons
                                      x14 (merge (merge x15 INil)
                                             (?? :: LET x18:({IList A7|ilen _v == ilen x15 + ilen (INil) && ielems _v == ielems x15 + ielems (INil)}) IN {IList A6|(ilen _v >= 0 && ilen _v <= ilen ys) && ((ilen x18 >= 0 && ilen x18 < ilen xs) || (ilen _v >= 0 && ilen _v < ilen ys))}))
Looking for succinct type {IList |  | a, |  | }
Trying ICons
Trying INil
Trying x15
Trying x11
Trying merge
Trying xs
Trying ys
Current queue size 171
Checking ICons x14 (merge (merge
                             x15 INil) INil) in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> ??
TYPE ERROR: Cannot match shape 'IList (A9)'
with shape '(IList (a) -> IList (a))'
Current queue size 170
Checking ICons x14 (merge (merge
                             x15 INil) x15) in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> ??
TYPE ERROR: Cannot match shape 'IList (a)'
with shape '(IList (a) -> IList (a))'
Current queue size 169
Checking ICons x14 (merge (merge
                             x15 INil) x11) in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> ??
TYPE ERROR: Cannot match shape 'IList (a)'
with shape '(IList (a) -> IList (a))'
Current queue size 168
Checking ICons x14 (merge (merge
                             x15 INil) xs) in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> ??
TYPE ERROR: Cannot match shape 'IList (a)'
with shape '(IList (a) -> IList (a))'
Current queue size 167
Checking ICons x14 (merge (merge
                             x15 INil) ys) in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> ??
TYPE ERROR: Cannot match shape 'IList (a)'
with shape '(IList (a) -> IList (a))'
Current queue size 166
Checking ICons x14 (merge (merge
                             x15 (ICons (?? :: A8)
                                    (?? :: IList {A8|x22 <= _v})))
                      (?? :: LET x18:(LET x21:({IList A8|_v == (ICons x22 x23)}) IN {IList A7|ilen _v == ilen x15 + ilen x21 && ielems _v == ielems x15 + ielems x21}) IN {IList A6|(ilen _v >= 0 && ilen _v <= ilen ys) && ((ilen x18 >= 0 && ilen x18 < ilen xs) || (ilen _v >= 0 && ilen _v < ilen ys))})) in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> ??
*******************Filling holes in ICons
                                      x14 (merge (merge x15 (ICons
                                                               (?? :: A8)
                                                               (?? :: IList {A8|x22 <= _v})))
                                             (?? :: LET x18:(LET x21:({IList A8|_v == (ICons x22 x23)}) IN {IList A7|ilen _v == ilen x15 + ilen x21 && ielems _v == ielems x15 + ielems x21}) IN {IList A6|(ilen _v >= 0 && ilen _v <= ilen ys) && ((ilen x18 >= 0 && ilen x18 < ilen xs) || (ilen _v >= 0 && ilen _v < ilen ys))}))
Looking for succinct type a
Trying x10
Trying x14
Current queue size 167
Checking ICons x14 (merge (merge
                             INil ys)
                      (?? :: LET x18:({IList A7|ilen _v == ilen (INil) + ilen ys && ielems _v == ielems (INil) + ielems ys}) IN {IList A6|(ilen _v >= 0 && ilen _v <= ilen ys) && ((ilen x18 >= 0 && ilen x18 < ilen xs) || (ilen _v >= 0 && ilen _v < ilen ys))})) in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> ??
TYPE ERROR: Cannot find sufficiently strong refinements
Current queue size 166
Checking ICons x14 (merge (merge
                             INil xs)
                      (?? :: LET x18:({IList A7|ilen _v == ilen (INil) + ilen xs && ielems _v == ielems (INil) + ielems xs}) IN {IList A6|(ilen _v >= 0 && ilen _v <= ilen ys) && ((ilen x18 >= 0 && ilen x18 < ilen xs) || (ilen _v >= 0 && ilen _v < ilen ys))})) in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> ??
TYPE ERROR: Cannot find sufficiently strong refinements
Current queue size 165
Checking ICons x14 (merge (merge
                             INil (merge
                                     (?? :: {IList A9|ilen _v >= 0 && ilen _v <= ilen xs})
                                     (?? :: {IList A9|(ilen _v >= 0 && ilen _v <= ilen ys) && ((ilen x22 >= 0 && ilen x22 < ilen xs) || (ilen _v >= 0 && ilen _v < ilen ys))})))
                      (?? :: LET x18:(LET x21:({IList A9|ilen _v == ilen x22 + ilen x23 && ielems _v == ielems x22 + ielems x23}) IN {IList A7|ilen _v == ilen (INil) + ilen x21 && ielems _v == ielems (INil) + ielems x21}) IN {IList A6|(ilen _v >= 0 && ilen _v <= ilen ys) && ((ilen x18 >= 0 && ilen x18 < ilen xs) || (ilen _v >= 0 && ilen _v < ilen ys))})) in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> ??
*******************Filling holes in ICons
                                      x14 (merge (merge INil (merge
                                                                (?? :: {IList A9|ilen _v >= 0 && ilen _v <= ilen xs})
                                                                (?? :: {IList A9|(ilen _v >= 0 && ilen _v <= ilen ys) && ((ilen x22 >= 0 && ilen x22 < ilen xs) || (ilen _v >= 0 && ilen _v < ilen ys))})))
                                             (?? :: LET x18:(LET x21:({IList A9|ilen _v == ilen x22 + ilen x23 && ielems _v == ielems x22 + ielems x23}) IN {IList A7|ilen _v == ilen (INil) + ilen x21 && ielems _v == ielems (INil) + ielems x21}) IN {IList A6|(ilen _v >= 0 && ilen _v <= ilen ys) && ((ilen x18 >= 0 && ilen x18 < ilen xs) || (ilen _v >= 0 && ilen _v < ilen ys))}))
Looking for succinct type {IList |  | a, |  | }
Trying ICons
Trying INil
Trying x15
Trying x11
Trying merge
Trying xs
Trying ys
Current queue size 171
Checking ICons x14 (merge (merge
                             INil x11)
                      (?? :: LET x18:({IList A7|ilen _v == ilen (INil) + ilen x11 && ielems _v == ielems (INil) + ielems x11}) IN {IList A6|(ilen _v >= 0 && ilen _v <= ilen ys) && ((ilen x18 >= 0 && ilen x18 < ilen xs) || (ilen _v >= 0 && ilen _v < ilen ys))})) in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> ??
*******************Filling holes in ICons
                                      x14 (merge (merge INil x11)
                                             (?? :: LET x18:({IList A7|ilen _v == ilen (INil) + ilen x11 && ielems _v == ielems (INil) + ielems x11}) IN {IList A6|(ilen _v >= 0 && ilen _v <= ilen ys) && ((ilen x18 >= 0 && ilen x18 < ilen xs) || (ilen _v >= 0 && ilen _v < ilen ys))}))
Looking for succinct type {IList |  | a, |  | }
Trying ICons
Trying INil
Trying x15
Trying x11
Trying merge
Trying xs
Trying ys
Current queue size 177
Checking ICons x14 (merge (merge
                             INil x11) INil) in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> ??
TYPE ERROR: Cannot match shape 'IList (A9)'
with shape '(IList (a) -> IList (a))'
Current queue size 176
Checking ICons x14 (merge (merge
                             INil x11) x15) in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> ??
TYPE ERROR: Cannot match shape 'IList (a)'
with shape '(IList (a) -> IList (a))'
Current queue size 175
Checking ICons x14 (merge (merge
                             INil x11) x11) in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> ??
TYPE ERROR: Cannot match shape 'IList (a)'
with shape '(IList (a) -> IList (a))'
Current queue size 174
Checking ICons x14 (merge (merge
                             INil x11) xs) in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> ??
TYPE ERROR: Cannot match shape 'IList (a)'
with shape '(IList (a) -> IList (a))'
Current queue size 173
Checking ICons x14 (merge (merge
                             INil x11) ys) in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> ??
TYPE ERROR: Cannot match shape 'IList (a)'
with shape '(IList (a) -> IList (a))'
Current queue size 172
Checking ICons x14 (merge (merge
                             INil x15)
                      (?? :: LET x18:({IList A7|ilen _v == ilen (INil) + ilen x15 && ielems _v == ielems (INil) + ielems x15}) IN {IList A6|(ilen _v >= 0 && ilen _v <= ilen ys) && ((ilen x18 >= 0 && ilen x18 < ilen xs) || (ilen _v >= 0 && ilen _v < ilen ys))})) in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> ??
TYPE ERROR: Cannot find sufficiently strong refinements
Current queue size 171
Checking ICons x14 (merge (merge
                             INil INil)
                      (?? :: LET x18:({IList A7|ilen _v == ilen (INil) + ilen (INil) && ielems _v == ielems (INil) + ielems (INil)}) IN {IList A6|(ilen _v >= 0 && ilen _v <= ilen ys) && ((ilen x18 >= 0 && ilen x18 < ilen xs) || (ilen _v >= 0 && ilen _v < ilen ys))})) in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> ??
*******************Filling holes in ICons
                                      x14 (merge (merge INil INil)
                                             (?? :: LET x18:({IList A7|ilen _v == ilen (INil) + ilen (INil) && ielems _v == ielems (INil) + ielems (INil)}) IN {IList A6|(ilen _v >= 0 && ilen _v <= ilen ys) && ((ilen x18 >= 0 && ilen x18 < ilen xs) || (ilen _v >= 0 && ilen _v < ilen ys))}))
Looking for succinct type {IList |  | a, |  | }
Trying ICons
Trying INil
Trying x15
Trying x11
Trying merge
Trying xs
Trying ys
Current queue size 177
Checking ICons x14 (merge (merge
                             INil INil) INil) in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> ??
TYPE ERROR: Cannot match shape 'IList (A10)'
with shape '(IList (a) -> IList (a))'
Current queue size 176
Checking ICons x14 (merge (merge
                             INil INil) x15) in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> ??
TYPE ERROR: Cannot match shape 'IList (a)'
with shape '(IList (a) -> IList (a))'
Current queue size 175
Checking ICons x14 (merge (merge
                             INil INil) x11) in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> ??
TYPE ERROR: Cannot match shape 'IList (a)'
with shape '(IList (a) -> IList (a))'
Current queue size 174
Checking ICons x14 (merge (merge
                             INil INil) xs) in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> ??
TYPE ERROR: Cannot match shape 'IList (a)'
with shape '(IList (a) -> IList (a))'
Current queue size 173
Checking ICons x14 (merge (merge
                             INil INil) ys) in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> ??
TYPE ERROR: Cannot match shape 'IList (a)'
with shape '(IList (a) -> IList (a))'
Current queue size 172
Checking ICons x14 (merge (merge
                             INil (ICons (?? :: A9)
                                     (?? :: IList {A9|x22 <= _v})))
                      (?? :: LET x18:(LET x21:({IList A9|_v == (ICons x22 x23)}) IN {IList A7|ilen _v == ilen (INil) + ilen x21 && ielems _v == ielems (INil) + ielems x21}) IN {IList A6|(ilen _v >= 0 && ilen _v <= ilen ys) && ((ilen x18 >= 0 && ilen x18 < ilen xs) || (ilen _v >= 0 && ilen _v < ilen ys))})) in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> ??
*******************Filling holes in ICons
                                      x14 (merge (merge INil (ICons
                                                                (?? :: A9)
                                                                (?? :: IList {A9|x22 <= _v})))
                                             (?? :: LET x18:(LET x21:({IList A9|_v == (ICons x22 x23)}) IN {IList A7|ilen _v == ilen (INil) + ilen x21 && ielems _v == ielems (INil) + ielems x21}) IN {IList A6|(ilen _v >= 0 && ilen _v <= ilen ys) && ((ilen x18 >= 0 && ilen x18 < ilen xs) || (ilen _v >= 0 && ilen _v < ilen ys))}))
Looking for succinct type a
Trying x10
Trying x14
Current queue size 173
Checking ICons x14 (merge (merge
                             (ICons x14
                                (?? :: IList {A8|x14 <= _v}))
                             (?? :: LET x20:(LET x23:(IList {A8|x14 <= _v}) IN {IList A8|_v == (ICons x14 x23)}) IN {IList A7|(ilen _v >= 0 && ilen _v <= ilen ys) && ((ilen x20 >= 0 && ilen x20 < ilen xs) || (ilen _v >= 0 && ilen _v < ilen ys))}))
                      (?? :: LET x18:(LET x21:(LET x20:(LET x23:(IList {A8|x14 <= _v}) IN {IList A8|_v == (ICons x14 x23)}) IN {IList A7|(ilen _v >= 0 && ilen _v <= ilen ys) && ((ilen x20 >= 0 && ilen x20 < ilen xs) || (ilen _v >= 0 && ilen _v < ilen ys))}) IN LET x20:(LET x23:(IList {A8|x14 <= _v}) IN {IList A8|_v == (ICons x14 x23)}) IN {IList A7|ilen _v == ilen x20 + ilen x21 && ielems _v == ielems x20 + ielems x21}) IN {IList A6|(ilen _v >= 0 && ilen _v <= ilen ys) && ((ilen x18 >= 0 && ilen x18 < ilen xs) || (ilen _v >= 0 && ilen _v < ilen ys))})) in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> ??
*******************Filling holes in ICons
                                      x14 (merge (merge (ICons x14
                                                           (?? :: IList {A8|x14 <= _v}))
                                                    (?? :: LET x20:(LET x23:(IList {A8|x14 <= _v}) IN {IList A8|_v == (ICons x14 x23)}) IN {IList A7|(ilen _v >= 0 && ilen _v <= ilen ys) && ((ilen x20 >= 0 && ilen x20 < ilen xs) || (ilen _v >= 0 && ilen _v < ilen ys))}))
                                             (?? :: LET x18:(LET x21:(LET x20:(LET x23:(IList {A8|x14 <= _v}) IN {IList A8|_v == (ICons x14 x23)}) IN {IList A7|(ilen _v >= 0 && ilen _v <= ilen ys) && ((ilen x20 >= 0 && ilen x20 < ilen xs) || (ilen _v >= 0 && ilen _v < ilen ys))}) IN LET x20:(LET x23:(IList {A8|x14 <= _v}) IN {IList A8|_v == (ICons x14 x23)}) IN {IList A7|ilen _v == ilen x20 + ilen x21 && ielems _v == ielems x20 + ielems x21}) IN {IList A6|(ilen _v >= 0 && ilen _v <= ilen ys) && ((ilen x18 >= 0 && ilen x18 < ilen xs) || (ilen _v >= 0 && ilen _v < ilen ys))}))
Looking for succinct type {IList |  | a, |  | }
Trying ICons
Trying INil
Trying x15
Trying x11
Trying merge
Trying xs
Trying ys
Current queue size 179
Checking ICons x14 (merge (merge
                             (ICons x10
                                (?? :: IList {A8|x10 <= _v}))
                             (?? :: LET x20:(LET x23:(IList {A8|x10 <= _v}) IN {IList A8|_v == (ICons x10 x23)}) IN {IList A7|(ilen _v >= 0 && ilen _v <= ilen ys) && ((ilen x20 >= 0 && ilen x20 < ilen xs) || (ilen _v >= 0 && ilen _v < ilen ys))}))
                      (?? :: LET x18:(LET x21:(LET x20:(LET x23:(IList {A8|x10 <= _v}) IN {IList A8|_v == (ICons x10 x23)}) IN {IList A7|(ilen _v >= 0 && ilen _v <= ilen ys) && ((ilen x20 >= 0 && ilen x20 < ilen xs) || (ilen _v >= 0 && ilen _v < ilen ys))}) IN LET x20:(LET x23:(IList {A8|x10 <= _v}) IN {IList A8|_v == (ICons x10 x23)}) IN {IList A7|ilen _v == ilen x20 + ilen x21 && ielems _v == ielems x20 + ielems x21}) IN {IList A6|(ilen _v >= 0 && ilen _v <= ilen ys) && ((ilen x18 >= 0 && ilen x18 < ilen xs) || (ilen _v >= 0 && ilen _v < ilen ys))})) in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> ??
*******************Filling holes in ICons
                                      x14 (merge (merge (ICons x10
                                                           (?? :: IList {A8|x10 <= _v}))
                                                    (?? :: LET x20:(LET x23:(IList {A8|x10 <= _v}) IN {IList A8|_v == (ICons x10 x23)}) IN {IList A7|(ilen _v >= 0 && ilen _v <= ilen ys) && ((ilen x20 >= 0 && ilen x20 < ilen xs) || (ilen _v >= 0 && ilen _v < ilen ys))}))
                                             (?? :: LET x18:(LET x21:(LET x20:(LET x23:(IList {A8|x10 <= _v}) IN {IList A8|_v == (ICons x10 x23)}) IN {IList A7|(ilen _v >= 0 && ilen _v <= ilen ys) && ((ilen x20 >= 0 && ilen x20 < ilen xs) || (ilen _v >= 0 && ilen _v < ilen ys))}) IN LET x20:(LET x23:(IList {A8|x10 <= _v}) IN {IList A8|_v == (ICons x10 x23)}) IN {IList A7|ilen _v == ilen x20 + ilen x21 && ielems _v == ielems x20 + ielems x21}) IN {IList A6|(ilen _v >= 0 && ilen _v <= ilen ys) && ((ilen x18 >= 0 && ilen x18 < ilen xs) || (ilen _v >= 0 && ilen _v < ilen ys))}))
Looking for succinct type {IList |  | a, |  | }
Trying ICons
Trying INil
Trying x15
Trying x11
Trying merge
Trying xs
Trying ys
Current queue size 185
Checking ICons x14 (merge x15
                      (merge ys
                         (?? :: {IList A7|(ilen _v >= 0 && ilen _v <= ilen ys) && ((ilen ys >= 0 && ilen ys < ilen xs) || (ilen _v >= 0 && ilen _v < ilen ys))}))) in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> ??
TYPE ERROR: Cannot find sufficiently strong refinements
Current queue size 184
Checking ICons x14 (merge x15
                      (merge xs
                         (?? :: {IList A7|(ilen _v >= 0 && ilen _v <= ilen ys) && ((ilen xs >= 0 && ilen xs < ilen xs) || (ilen _v >= 0 && ilen _v < ilen ys))}))) in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> ??
TYPE ERROR: Cannot find sufficiently strong refinements
Current queue size 183
Checking ICons x14 (merge x15
                      (merge (merge
                                (?? :: {IList A8|ilen _v >= 0 && ilen _v <= ilen xs})
                                (?? :: {IList A8|(ilen _v >= 0 && ilen _v <= ilen ys) && ((ilen x22 >= 0 && ilen x22 < ilen xs) || (ilen _v >= 0 && ilen _v < ilen ys))}))
                         (?? :: LET x20:({IList A8|ilen _v == ilen x22 + ilen x23 && ielems _v == ielems x22 + ielems x23}) IN {IList A7|(ilen _v >= 0 && ilen _v <= ilen ys) && ((ilen x20 >= 0 && ilen x20 < ilen xs) || (ilen _v >= 0 && ilen _v < ilen ys))}))) in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> ??
*******************Filling holes in ICons
                                      x14 (merge x15 (merge (merge
                                                               (?? :: {IList A8|ilen _v >= 0 && ilen _v <= ilen xs})
                                                               (?? :: {IList A8|(ilen _v >= 0 && ilen _v <= ilen ys) && ((ilen x22 >= 0 && ilen x22 < ilen xs) || (ilen _v >= 0 && ilen _v < ilen ys))}))
                                                        (?? :: LET x20:({IList A8|ilen _v == ilen x22 + ilen x23 && ielems _v == ielems x22 + ielems x23}) IN {IList A7|(ilen _v >= 0 && ilen _v <= ilen ys) && ((ilen x20 >= 0 && ilen x20 < ilen xs) || (ilen _v >= 0 && ilen _v < ilen ys))})))
Looking for succinct type {IList |  | a, |  | }
Trying ICons
Trying INil
Trying x15
Trying x11
Trying merge
Trying xs
Trying ys
Current queue size 189
Checking ICons x14 (merge x15
                      (merge x11
                         (?? :: {IList A7|(ilen _v >= 0 && ilen _v <= ilen ys) && ((ilen x11 >= 0 && ilen x11 < ilen xs) || (ilen _v >= 0 && ilen _v < ilen ys))}))) in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> ??
TYPE ERROR: Cannot find sufficiently strong refinements
Current queue size 188
Checking ICons x14 (merge x15
                      (merge x15
                         (?? :: {IList A7|(ilen _v >= 0 && ilen _v <= ilen ys) && ((ilen x15 >= 0 && ilen x15 < ilen xs) || (ilen _v >= 0 && ilen _v < ilen ys))}))) in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> ??
*******************Filling holes in ICons
                                      x14 (merge x15 (merge x15
                                                        (?? :: {IList A7|(ilen _v >= 0 && ilen _v <= ilen ys) && ((ilen x15 >= 0 && ilen x15 < ilen xs) || (ilen _v >= 0 && ilen _v < ilen ys))})))
Looking for succinct type {IList |  | a, |  | }
Trying ICons
Trying INil
Trying x15
Trying x11
Trying merge
Trying xs
Trying ys
Current queue size 194
Checking ICons x14 (merge x15
                      (merge x15 INil)) in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> ??
Checking program ICons x14
                   (merge x15 (merge x15 INil))
Checking ICons x14 (merge x15
                      (merge x15
                         INil)) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> ??
TYPE ERROR: Cannot find sufficiently strong refinements
when checking ICons x14 (merge
                           x15 (merge x15 INil)) ::
{IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys}
in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> ICons x14
                             (merge x15 (merge x15 INil))
Current queue size 193
Checking ICons x14 (merge x15
                      (merge x15 x15)) in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> ??
TYPE ERROR: Cannot find sufficiently strong refinements
Current queue size 192
Checking ICons x14 (merge x15
                      (merge x15 x11)) in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> ??
Checking program ICons x14
                   (merge x15 (merge x15 x11))
Checking ICons x14 (merge x15
                      (merge x15
                         x11)) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> ??
TYPE ERROR: Cannot find sufficiently strong refinements
when checking ICons x14 (merge
                           x15 (merge x15 x11)) ::
{IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys}
in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> ICons x14
                             (merge x15 (merge x15 x11))
Current queue size 191
Checking ICons x14 (merge x15
                      (merge x15 xs)) in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> ??
TYPE ERROR: Cannot find sufficiently strong refinements
Current queue size 190
Checking ICons x14 (merge x15
                      (merge x15 ys)) in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> ??
TYPE ERROR: Cannot find sufficiently strong refinements
Current queue size 189
Checking ICons x14 (merge x15
                      (merge INil
                         (?? :: {IList A7|(ilen _v >= 0 && ilen _v <= ilen ys) && ((ilen (INil) >= 0 && ilen (INil) < ilen xs) || (ilen _v >= 0 && ilen _v < ilen ys))}))) in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> ??
*******************Filling holes in ICons
                                      x14 (merge x15 (merge INil
                                                        (?? :: {IList A7|(ilen _v >= 0 && ilen _v <= ilen ys) && ((ilen (INil) >= 0 && ilen (INil) < ilen xs) || (ilen _v >= 0 && ilen _v < ilen ys))})))
Looking for succinct type {IList |  | a, |  | }
Trying ICons
Trying INil
Trying x15
Trying x11
Trying merge
Trying xs
Trying ys
Current queue size 195
Checking ICons x14 (merge x15
                      (merge INil INil)) in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> ??
Checking program ICons x14
                   (merge x15 (merge INil INil))
Checking ICons x14 (merge x15
                      (merge INil
                         INil)) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> ??
TYPE ERROR: Cannot find sufficiently strong refinements
when checking ICons x14 (merge
                           x15 (merge INil INil)) ::
{IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys}
in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> ICons x14
                             (merge x15 (merge INil INil))
Current queue size 194
Checking ICons x14 (merge x15
                      (merge INil x15)) in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> ??
TYPE ERROR: Cannot find sufficiently strong refinements
Current queue size 193
Checking ICons x14 (merge x15
                      (merge INil x11)) in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> ??
Checking program ICons x14
                   (merge x15 (merge INil x11))
Checking ICons x14 (merge x15
                      (merge INil
                         x11)) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> ??
TYPE ERROR: Cannot find sufficiently strong refinements
when checking ICons x14 (merge
                           x15 (merge INil x11)) ::
{IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys}
in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> ICons x14
                             (merge x15 (merge INil x11))
Current queue size 192
Checking ICons x14 (merge x15
                      (merge INil xs)) in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> ??
TYPE ERROR: Cannot find sufficiently strong refinements
Current queue size 191
Checking ICons x14 (merge x15
                      (merge INil ys)) in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> ??
TYPE ERROR: Cannot find sufficiently strong refinements
Current queue size 190
Checking ICons x14 (merge x15
                      (merge (ICons (?? :: A8)
                                (?? :: IList {A8|x22 <= _v}))
                         (?? :: LET x20:({IList A8|_v == (ICons x22 x23)}) IN {IList A7|(ilen _v >= 0 && ilen _v <= ilen ys) && ((ilen x20 >= 0 && ilen x20 < ilen xs) || (ilen _v >= 0 && ilen _v < ilen ys))}))) in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> ??
*******************Filling holes in ICons
                                      x14 (merge x15 (merge (ICons
                                                               (?? :: A8)
                                                               (?? :: IList {A8|x22 <= _v}))
                                                        (?? :: LET x20:({IList A8|_v == (ICons x22 x23)}) IN {IList A7|(ilen _v >= 0 && ilen _v <= ilen ys) && ((ilen x20 >= 0 && ilen x20 < ilen xs) || (ilen _v >= 0 && ilen _v < ilen ys))})))
Looking for succinct type a
Trying x10
Trying x14
Current queue size 191
Checking ICons x14 (merge x15
                      (ICons x14
                         (?? :: IList {A7|x14 <= _v}))) in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> ??
*******************Filling holes in ICons
                                      x14 (merge x15 (ICons x14
                                                        (?? :: IList {A7|x14 <= _v})))
Looking for succinct type {IList |  | a, |  | }
Trying ICons
Trying INil
Trying x15
Trying x11
Trying merge
Trying xs
Trying ys
Current queue size 197
Checking ICons x14 (merge x15
                      (ICons x14 INil)) in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> ??
Checking program ICons x14
                   (merge x15 (ICons x14 INil))
Checking ICons x14 (merge x15
                      (ICons x14
                         INil)) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> ??
TYPE ERROR: Cannot find sufficiently strong refinements
when checking ICons x14 (merge
                           x15 (ICons x14 INil)) ::
{IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys}
in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> ICons x14
                             (merge x15 (ICons x14 INil))
Current queue size 196
Checking ICons x14 (merge x15
                      (ICons x14 x15)) in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> ??
Checking program ICons x14
                   (merge x15 (ICons x14 x15))
Checking ICons x14 (merge x15
                      (ICons x14
                         x15)) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> ??
TYPE ERROR: Cannot find sufficiently strong refinements
when checking ICons x14 (merge
                           x15 (ICons x14 x15)) ::
{IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys}
in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> ICons x14
                             (merge x15 (ICons x14 x15))
Current queue size 195
Checking ICons x14 (merge x15
                      (ICons x14 x11)) in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> ??
Checking program ICons x14
                   (merge x15 (ICons x14 x11))
Checking ICons x14 (merge x15
                      (ICons x14
                         x11)) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> ??
Checking ICons x14 (merge x15
                      (ICons x14
                         xs)) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ??
TYPE ERROR: Cannot find sufficiently strong refinements
when checking ICons x14 (merge
                           x15 (ICons x14 xs)) ::
{IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys}
in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ICons x14 (merge x15 (ICons
                                           x14 xs))
Checking ICons x14 (merge x15
                      (ICons x14
                         ys)) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ??
TYPE ERROR: Cannot find sufficiently strong refinements
when checking ICons x14 (merge
                           x15 (ICons x14 ys)) ::
{IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys}
in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ICons x14 (merge x15 (ICons
                                           x14 ys))
Checking ICons x14 (merge x15
                      (ICons x10
                         ??)) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ??
Checking ICons x14 (merge INil
                      (merge ys
                         ??)) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ??
TYPE ERROR: Cannot find sufficiently strong refinements
when checking ICons x14 (merge
                           INil (merge ys ??)) ::
{IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys}
in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ICons x14 (merge INil
                                (merge ys ??))
Checking ICons x14 (merge INil
                      (merge xs
                         ??)) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ??
TYPE ERROR: Cannot find sufficiently strong refinements
when checking ICons x14 (merge
                           INil (merge xs ??)) ::
{IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys}
in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ICons x14 (merge INil
                                (merge xs ??))
Checking ICons x14 (merge INil
                      (merge (merge ?? ??)
                         ??)) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ??
Checking ICons x14 (merge INil
                      (merge x11
                         ??)) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ??
TYPE ERROR: Cannot find sufficiently strong refinements
when checking ICons x14 (merge
                           INil (merge x11 ??)) ::
{IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys}
in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ICons x14 (merge INil
                                (merge x11 ??))
Checking ICons x14 (merge INil
                      (merge x15
                         ??)) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ??
Checking ICons x14 (merge INil
                      (merge INil
                         ??)) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ??
Checking ICons x14 (merge INil
                      (merge (ICons ?? ??)
                         ??)) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ??
Checking ICons x14 (merge INil
                      (ICons x14
                         ??)) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ??
Checking ICons x14 (merge INil
                      (ICons x10
                         ??)) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ??
Checking ICons x14 (merge (ICons
                             x14 ys)
                      ??) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ??
TYPE ERROR: Cannot find sufficiently strong refinements
when checking ICons x14 (merge
                           (ICons x14 ys) ??) ::
{IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys}
in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ICons x14 (merge (ICons x14
                                       ys) ??)
Checking ICons x14 (merge (ICons
                             x14 xs)
                      ??) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ??
TYPE ERROR: Cannot find sufficiently strong refinements
when checking ICons x14 (merge
                           (ICons x14 xs) ??) ::
{IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys}
in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ICons x14 (merge (ICons x14
                                       xs) ??)
Checking ICons x14 (merge (ICons
                             x14 (merge ?? ??))
                      ??) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ??
Checking ICons x14 (merge (ICons
                             x14 x11)
                      ??) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ??
TYPE ERROR: Cannot find sufficiently strong refinements
when checking ICons x14 (merge
                           (ICons x14 x11) ??) ::
{IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys}
in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ICons x14 (merge (ICons x14
                                       x11) ??)
Checking ICons x14 (merge (ICons
                             x14 x15)
                      ??) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ??
Checking ICons x14 (merge (ICons
                             x14 INil)
                      ??) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ??
Checking ICons x14 (merge (ICons
                             x14 (ICons ?? ??))
                      ??) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ??
Checking ICons x14 (merge (ICons
                             x10 ys)
                      ??) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ??
TYPE ERROR: Cannot find sufficiently strong refinements
when checking ICons x14 (merge
                           (ICons x10 ys) ??) ::
{IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys}
in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ICons x14 (merge (ICons x10
                                       ys) ??)
Checking ICons x14 (merge (ICons
                             x10 xs)
                      ??) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ??
TYPE ERROR: Cannot find sufficiently strong refinements
when checking ICons x14 (merge
                           (ICons x10 xs) ??) ::
{IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys}
in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ICons x14 (merge (ICons x10
                                       xs) ??)
Checking ICons x14 (merge (ICons
                             x10 (merge ?? ??))
                      ??) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ??
Checking ICons x14 (merge (ICons
                             x10 x11)
                      ??) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ??
TYPE ERROR: Cannot find sufficiently strong refinements
when checking ICons x14 (merge
                           (ICons x10 x11) ??) ::
{IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys}
in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ICons x14 (merge (ICons x10
                                       x11) ??)
Checking ICons x14 (merge (ICons
                             x10 x15)
                      ??) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ??
TYPE ERROR: Cannot find sufficiently strong refinements
when checking ICons x14 (merge
                           (ICons x10 x15) ??) ::
{IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys}
in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ICons x14 (merge (ICons x10
                                       x15) ??)
Checking ICons x14 (merge (ICons
                             x10 INil)
                      ??) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ??
Checking ICons x14 (merge (ICons
                             x10 (ICons ?? ??))
                      ??) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ??
Checking ICons x14 (ICons x14
                      (merge ys
                         ??)) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ??
TYPE ERROR: Cannot find sufficiently strong refinements
when checking ICons x14 (ICons
                           x14 (merge ys ??)) ::
{IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys}
in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ICons x14 (ICons x14 (merge
                                           ys ??))
Checking ICons x14 (ICons x14
                      (merge xs
                         ??)) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ??
TYPE ERROR: Cannot find sufficiently strong refinements
when checking ICons x14 (ICons
                           x14 (merge xs ??)) ::
{IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys}
in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ICons x14 (ICons x14 (merge
                                           xs ??))
Checking ICons x14 (ICons x14
                      (merge (merge ?? ??)
                         ??)) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ??
Checking ICons x14 (ICons x14
                      (merge x11
                         ??)) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ??
TYPE ERROR: Cannot find sufficiently strong refinements
when checking ICons x14 (ICons
                           x14 (merge x11 ??)) ::
{IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys}
in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ICons x14 (ICons x14 (merge
                                           x11 ??))
Checking ICons x14 (ICons x14
                      (merge x15
                         ??)) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ??
Checking ICons x14 (ICons x14
                      (merge INil
                         ??)) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ??
Checking ICons x14 (ICons x14
                      (merge (ICons ?? ??)
                         ??)) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ??
Checking ICons x14 (ICons x14
                      (ICons x14
                         ??)) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ??
Checking ICons x14 (ICons x14
                      (ICons x10
                         ??)) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ??
Checking ICons x14 (ICons x10
                      (merge ys
                         ??)) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ??
TYPE ERROR: Cannot find sufficiently strong refinements
when checking ICons x14 (ICons
                           x10 (merge ys ??)) ::
{IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys}
in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ICons x14 (ICons x10 (merge
                                           ys ??))
Checking ICons x14 (ICons x10
                      (merge xs
                         ??)) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ??
TYPE ERROR: Cannot find sufficiently strong refinements
when checking ICons x14 (ICons
                           x10 (merge xs ??)) ::
{IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys}
in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ICons x14 (ICons x10 (merge
                                           xs ??))
Checking ICons x14 (ICons x10
                      (merge (merge ?? ??)
                         ??)) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ??
Checking ICons x14 (ICons x10
                      (merge x11
                         ??)) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ??
TYPE ERROR: Cannot find sufficiently strong refinements
when checking ICons x14 (ICons
                           x10 (merge x11 ??)) ::
{IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys}
in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ICons x14 (ICons x10 (merge
                                           x11 ??))
Checking ICons x14 (ICons x10
                      (merge x15
                         ??)) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ??
TYPE ERROR: Cannot find sufficiently strong refinements
when checking ICons x14 (ICons
                           x10 (merge x15 ??)) ::
{IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys}
in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ICons x14 (ICons x10 (merge
                                           x15 ??))
Checking ICons x14 (ICons x10
                      (merge INil
                         ??)) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ??
Checking ICons x14 (ICons x10
                      (merge (ICons ?? ??)
                         ??)) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ??
Checking ICons x14 (ICons x10
                      (ICons x14
                         ??)) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ??
TYPE ERROR: Cannot find sufficiently strong refinements
when checking ICons x14 (ICons
                           x10 (ICons x14 ??)) ::
{IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys}
in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ICons x14 (ICons x10 (ICons
                                           x14 ??))
Checking ICons x14 (ICons x10
                      (ICons x10
                         ??)) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ??
Checking ICons x10 (merge (merge
                             (merge ys ??) ??)
                      ??) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ??
TYPE ERROR: Cannot find sufficiently strong refinements
when checking ICons x10 (merge
                           (merge (merge ys ??) ??) ??) ::
{IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys}
in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ICons x10 (merge (merge
                                       (merge ys ??) ??) ??)
Checking ICons x10 (merge (merge
                             (merge xs ??) ??)
                      ??) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ??
TYPE ERROR: Cannot find sufficiently strong refinements
when checking ICons x10 (merge
                           (merge (merge xs ??) ??) ??) ::
{IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys}
in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ICons x10 (merge (merge
                                       (merge xs ??) ??) ??)
Checking ICons x10 (merge (merge
                             (merge (merge ?? ??) ??) ??)
                      ??) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ??
Checking ICons x10 (merge (merge
                             (merge x11 ??) ??)
                      ??) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ??
TYPE ERROR: Cannot find sufficiently strong refinements
when checking ICons x10 (merge
                           (merge (merge x11 ??) ??) ??) ::
{IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys}
in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ICons x10 (merge (merge
                                       (merge x11 ??) ??) ??)
Checking ICons x10 (merge (merge
                             (merge x15 ??) ??)
                      ??) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ??
Checking ICons x10 (merge (merge
                             (merge INil ??) ??)
                      ??) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ??
Checking ICons x10 (merge (merge
                             (merge (ICons ?? ??) ??) ??)
                      ??) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ??
Checking ICons x10 (merge (merge
                             x15 ys)
                      ??) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ??
TYPE ERROR: Cannot find sufficiently strong refinements
when checking ICons x10 (merge
                           (merge x15 ys) ??) ::
{IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys}
in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ICons x10 (merge (merge x15
                                       ys) ??)
Checking ICons x10 (merge (merge
                             x15 xs)
                      ??) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ??
TYPE ERROR: Cannot find sufficiently strong refinements
when checking ICons x10 (merge
                           (merge x15 xs) ??) ::
{IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys}
in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ICons x10 (merge (merge x15
                                       xs) ??)
Checking ICons x10 (merge (merge
                             x15 (merge ?? ??))
                      ??) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ??
Checking ICons x10 (merge (merge
                             x15 x11)
                      ??) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ??
TYPE ERROR: Cannot find sufficiently strong refinements
when checking ICons x10 (merge
                           (merge x15 x11) ??) ::
{IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys}
in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ICons x10 (merge (merge x15
                                       x11) ??)
Checking ICons x10 (merge (merge
                             x15 x15)
                      ??) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ??
TYPE ERROR: Cannot find sufficiently strong refinements
when checking ICons x10 (merge
                           (merge x15 x15) ??) ::
{IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys}
in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ICons x10 (merge (merge x15
                                       x15) ??)
Checking ICons x10 (merge (merge
                             x15 INil)
                      ??) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ??
Checking ICons x10 (merge (merge
                             x15 (ICons ?? ??))
                      ??) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ??
Checking ICons x10 (merge (merge
                             INil ys)
                      ??) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ??
TYPE ERROR: Cannot find sufficiently strong refinements
when checking ICons x10 (merge
                           (merge INil ys) ??) ::
{IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys}
in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ICons x10 (merge (merge
                                       INil ys) ??)
Checking ICons x10 (merge (merge
                             INil xs)
                      ??) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ??
TYPE ERROR: Cannot find sufficiently strong refinements
when checking ICons x10 (merge
                           (merge INil xs) ??) ::
{IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys}
in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ICons x10 (merge (merge
                                       INil xs) ??)
Checking ICons x10 (merge (merge
                             INil (merge ?? ??))
                      ??) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ??
Checking ICons x10 (merge (merge
                             INil x11)
                      ??) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ??
TYPE ERROR: Cannot find sufficiently strong refinements
when checking ICons x10 (merge
                           (merge INil x11) ??) ::
{IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys}
in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ICons x10 (merge (merge
                                       INil x11) ??)
Checking ICons x10 (merge (merge
                             INil x15)
                      ??) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ??
TYPE ERROR: Cannot find sufficiently strong refinements
when checking ICons x10 (merge
                           (merge INil x15) ??) ::
{IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys}
in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ICons x10 (merge (merge
                                       INil x15) ??)
Checking ICons x10 (merge (merge
                             INil INil)
                      ??) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ??
Checking ICons x10 (merge (merge
                             INil (ICons ?? ??))
                      ??) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ??
Checking ICons x10 (merge (merge
                             (ICons x14 ??) ??)
                      ??) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ??
Checking ICons x10 (merge (merge
                             (ICons x10 ??) ??)
                      ??) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ??
Checking ICons x10 (merge x15
                      (merge ys
                         ??)) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ??
TYPE ERROR: Cannot find sufficiently strong refinements
when checking ICons x10 (merge
                           x15 (merge ys ??)) ::
{IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys}
in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ICons x10 (merge x15 (merge
                                           ys ??))
Checking ICons x10 (merge x15
                      (merge xs
                         ??)) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ??
TYPE ERROR: Cannot find sufficiently strong refinements
when checking ICons x10 (merge
                           x15 (merge xs ??)) ::
{IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys}
in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ICons x10 (merge x15 (merge
                                           xs ??))
Checking ICons x10 (merge x15
                      (merge (merge ?? ??)
                         ??)) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ??
Checking ICons x10 (merge x15
                      (merge x11
                         ??)) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ??
TYPE ERROR: Cannot find sufficiently strong refinements
when checking ICons x10 (merge
                           x15 (merge x11 ??)) ::
{IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys}
in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ICons x10 (merge x15 (merge
                                           x11 ??))
Checking ICons x10 (merge x15
                      (merge x15
                         ??)) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ??
Checking ICons x10 (merge x15
                      (merge INil
                         ??)) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ??
Checking ICons x10 (merge x15
                      (merge (ICons ?? ??)
                         ??)) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ??
Checking ICons x10 (merge x15
                      (ICons x14
                         ??)) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ??
Checking ICons x10 (merge x15
                      (ICons x10
                         ??)) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ??
Checking ICons x10 (merge INil
                      (merge ys
                         ??)) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ??
TYPE ERROR: Cannot find sufficiently strong refinements
when checking ICons x10 (merge
                           INil (merge ys ??)) ::
{IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys}
in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ICons x10 (merge INil
                                (merge ys ??))
Checking ICons x10 (merge INil
                      (merge xs
                         ??)) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ??
TYPE ERROR: Cannot find sufficiently strong refinements
when checking ICons x10 (merge
                           INil (merge xs ??)) ::
{IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys}
in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ICons x10 (merge INil
                                (merge xs ??))
Checking ICons x10 (merge INil
                      (merge (merge ?? ??)
                         ??)) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ??
Checking ICons x10 (merge INil
                      (merge x11
                         ??)) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ??
TYPE ERROR: Cannot find sufficiently strong refinements
when checking ICons x10 (merge
                           INil (merge x11 ??)) ::
{IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys}
in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ICons x10 (merge INil
                                (merge x11 ??))
Checking ICons x10 (merge INil
                      (merge x15
                         ??)) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ??
Checking ICons x10 (merge INil
                      (merge INil
                         ??)) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ??
Checking ICons x10 (merge INil
                      (merge (ICons ?? ??)
                         ??)) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ??
Checking ICons x10 (merge INil
                      (ICons x14
                         ??)) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ??
Checking ICons x10 (merge INil
                      (ICons x10
                         ??)) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ??
Checking ICons x10 (merge (ICons
                             x14 ys)
                      ??) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ??
TYPE ERROR: Cannot find sufficiently strong refinements
when checking ICons x10 (merge
                           (ICons x14 ys) ??) ::
{IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys}
in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ICons x10 (merge (ICons x14
                                       ys) ??)
Checking ICons x10 (merge (ICons
                             x14 xs)
                      ??) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ??
TYPE ERROR: Cannot find sufficiently strong refinements
when checking ICons x10 (merge
                           (ICons x14 xs) ??) ::
{IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys}
in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ICons x10 (merge (ICons x14
                                       xs) ??)
Checking ICons x10 (merge (ICons
                             x14 (merge ?? ??))
                      ??) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ??
Checking ICons x10 (merge (ICons
                             x14 x11)
                      ??) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ??
TYPE ERROR: Cannot find sufficiently strong refinements
when checking ICons x10 (merge
                           (ICons x14 x11) ??) ::
{IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys}
in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ICons x10 (merge (ICons x14
                                       x11) ??)
Checking ICons x10 (merge (ICons
                             x14 x15)
                      ??) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ??
Checking ICons x10 (merge (ICons
                             x14 INil)
                      ??) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ??
Checking ICons x10 (merge (ICons
                             x14 (ICons ?? ??))
                      ??) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ??
Checking ICons x10 (merge (ICons
                             x10 ys)
                      ??) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ??
TYPE ERROR: Cannot find sufficiently strong refinements
when checking ICons x10 (merge
                           (ICons x10 ys) ??) ::
{IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys}
in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ICons x10 (merge (ICons x10
                                       ys) ??)
Checking ICons x10 (merge (ICons
                             x10 xs)
                      ??) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ??
TYPE ERROR: Cannot find sufficiently strong refinements
when checking ICons x10 (merge
                           (ICons x10 xs) ??) ::
{IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys}
in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ICons x10 (merge (ICons x10
                                       xs) ??)
Checking ICons x10 (merge (ICons
                             x10 (merge ?? ??))
                      ??) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ??
Checking ICons x10 (merge (ICons
                             x10 x11)
                      ??) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ??
TYPE ERROR: Cannot find sufficiently strong refinements
when checking ICons x10 (merge
                           (ICons x10 x11) ??) ::
{IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys}
in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ICons x10 (merge (ICons x10
                                       x11) ??)
Checking ICons x10 (merge (ICons
                             x10 x15)
                      ??) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ??
Checking ICons x10 (merge (ICons
                             x10 INil)
                      ??) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ??
Checking ICons x10 (merge (ICons
                             x10 (ICons ?? ??))
                      ??) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ??
Checking ICons x10 (ICons x14
                      (merge ys
                         ??)) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ??
TYPE ERROR: Cannot find sufficiently strong refinements
when checking ICons x10 (ICons
                           x14 (merge ys ??)) ::
{IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys}
in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ICons x10 (ICons x14 (merge
                                           ys ??))
Checking ICons x10 (ICons x14
                      (merge xs
                         ??)) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ??
TYPE ERROR: Cannot find sufficiently strong refinements
when checking ICons x10 (ICons
                           x14 (merge xs ??)) ::
{IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys}
in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ICons x10 (ICons x14 (merge
                                           xs ??))
Checking ICons x10 (ICons x14
                      (merge (merge ?? ??)
                         ??)) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ??
Checking ICons x10 (ICons x14
                      (merge x11
                         ??)) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ??
TYPE ERROR: Cannot find sufficiently strong refinements
when checking ICons x10 (ICons
                           x14 (merge x11 ??)) ::
{IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys}
in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ICons x10 (ICons x14 (merge
                                           x11 ??))
Checking ICons x10 (ICons x14
                      (merge x15
                         ??)) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ??
Checking ICons x10 (ICons x14
                      (merge INil
                         ??)) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ??
Checking ICons x10 (ICons x14
                      (merge (ICons ?? ??)
                         ??)) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ??
Checking ICons x10 (ICons x14
                      (ICons x14
                         ??)) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ??
Checking ICons x10 (ICons x14
                      (ICons x10
                         ??)) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ??
TYPE ERROR: Cannot find sufficiently strong refinements
when checking ICons x10 (ICons
                           x14 (ICons x10 ??)) ::
{IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys}
in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ICons x10 (ICons x14 (ICons
                                           x10 ??))
Checking ICons x10 (ICons x10
                      (merge ys
                         ??)) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ??
TYPE ERROR: Cannot find sufficiently strong refinements
when checking ICons x10 (ICons
                           x10 (merge ys ??)) ::
{IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys}
in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ICons x10 (ICons x10 (merge
                                           ys ??))
Checking ICons x10 (ICons x10
                      (merge xs
                         ??)) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ??
TYPE ERROR: Cannot find sufficiently strong refinements
when checking ICons x10 (ICons
                           x10 (merge xs ??)) ::
{IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys}
in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ICons x10 (ICons x10 (merge
                                           xs ??))
Checking ICons x10 (ICons x10
                      (merge (merge ?? ??)
                         ??)) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ??
Checking ICons x10 (ICons x10
                      (merge x11
                         ??)) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ??
TYPE ERROR: Cannot find sufficiently strong refinements
when checking ICons x10 (ICons
                           x10 (merge x11 ??)) ::
{IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys}
in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ICons x10 (ICons x10 (merge
                                           x11 ??))
Checking ICons x10 (ICons x10
                      (merge x15
                         ??)) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ??
Checking ICons x10 (ICons x10
                      (merge INil
                         ??)) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ??
Checking ICons x10 (ICons x10
                      (merge (ICons ?? ??)
                         ??)) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ??
Checking ICons x10 (ICons x10
                      (ICons x14
                         ??)) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ??
Checking ICons x10 (ICons x10
                      (ICons x10
                         ??)) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ??
Checking ICons x14 (merge (merge
                             (merge (merge ys ??) ??) ??)
                      ??) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ??
TYPE ERROR: Cannot find sufficiently strong refinements
when checking ICons x14 (merge
                           (merge (merge (merge ys ??) ??)
                              ??) ??) ::
{IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys}
in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ICons x14 (merge (merge
                                       (merge (merge ys ??) ??) ??) ??)
Checking ICons x14 (merge (merge
                             (merge (merge xs ??) ??) ??)
                      ??) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ??
TYPE ERROR: Cannot find sufficiently strong refinements
when checking ICons x14 (merge
                           (merge (merge (merge xs ??) ??)
                              ??) ??) ::
{IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys}
in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ICons x14 (merge (merge
                                       (merge (merge xs ??) ??) ??) ??)
Checking ICons x14 (merge (merge
                             (merge (merge (merge ?? ??) ??)
                                ??) ??)
                      ??) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ??
Checking ICons x14 (merge (merge
                             (merge (merge x11 ??) ??) ??)
                      ??) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ??
TYPE ERROR: Cannot find sufficiently strong refinements
when checking ICons x14 (merge
                           (merge (merge (merge x11 ??) ??)
                              ??) ??) ::
{IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys}
in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ICons x14 (merge (merge
                                       (merge (merge x11 ??) ??) ??)
                                ??)
Checking ICons x14 (merge (merge
                             (merge (merge x15 ??) ??) ??)
                      ??) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ??
Checking ICons x14 (merge (merge
                             (merge (merge INil ??) ??) ??)
                      ??) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ??
Checking ICons x14 (merge (merge
                             (merge (merge (ICons ?? ??) ??)
                                ??) ??)
                      ??) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ??
Checking ICons x14 (merge (merge
                             (merge x15 ys) ??)
                      ??) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ??
TYPE ERROR: Cannot find sufficiently strong refinements
when checking ICons x14 (merge
                           (merge (merge x15 ys) ??) ??) ::
{IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys}
in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ICons x14 (merge (merge
                                       (merge x15 ys) ??) ??)
Checking ICons x14 (merge (merge
                             (merge x15 xs) ??)
                      ??) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ??
TYPE ERROR: Cannot find sufficiently strong refinements
when checking ICons x14 (merge
                           (merge (merge x15 xs) ??) ??) ::
{IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys}
in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ICons x14 (merge (merge
                                       (merge x15 xs) ??) ??)
Checking ICons x14 (merge (merge
                             (merge x15 (merge ?? ??)) ??)
                      ??) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ??
Checking ICons x14 (merge (merge
                             (merge x15 x11) ??)
                      ??) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ??
TYPE ERROR: Cannot find sufficiently strong refinements
when checking ICons x14 (merge
                           (merge (merge x15 x11) ??) ??)
::
{IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys}
in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ICons x14 (merge (merge
                                       (merge x15 x11) ??) ??)
Checking ICons x14 (merge (merge
                             (merge x15 x15) ??)
                      ??) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ??
TYPE ERROR: Cannot find sufficiently strong refinements
when checking ICons x14 (merge
                           (merge (merge x15 x15) ??) ??)
::
{IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys}
in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ICons x14 (merge (merge
                                       (merge x15 x15) ??) ??)
Checking ICons x14 (merge (merge
                             (merge x15 INil) ??)
                      ??) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ??
Checking ICons x14 (merge (merge
                             (merge x15 (ICons ?? ??)) ??)
                      ??) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ??
Checking ICons x14 (merge (merge
                             (merge INil ys) ??)
                      ??) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ??
TYPE ERROR: Cannot find sufficiently strong refinements
when checking ICons x14 (merge
                           (merge (merge INil ys) ??) ??)
::
{IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys}
in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ICons x14 (merge (merge
                                       (merge INil ys) ??) ??)
Checking ICons x14 (merge (merge
                             (merge INil xs) ??)
                      ??) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ??
TYPE ERROR: Cannot find sufficiently strong refinements
when checking ICons x14 (merge
                           (merge (merge INil xs) ??) ??)
::
{IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys}
in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ICons x14 (merge (merge
                                       (merge INil xs) ??) ??)
Checking ICons x14 (merge (merge
                             (merge INil (merge ?? ??)) ??)
                      ??) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ??
Checking ICons x14 (merge (merge
                             (merge INil x11) ??)
                      ??) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ??
TYPE ERROR: Cannot find sufficiently strong refinements
when checking ICons x14 (merge
                           (merge (merge INil x11) ??) ??)
::
{IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys}
in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ICons x14 (merge (merge
                                       (merge INil x11) ??) ??)
Checking ICons x14 (merge (merge
                             (merge INil x15) ??)
                      ??) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ??
TYPE ERROR: Cannot find sufficiently strong refinements
when checking ICons x14 (merge
                           (merge (merge INil x15) ??) ??)
::
{IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys}
in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ICons x14 (merge (merge
                                       (merge INil x15) ??) ??)
Checking ICons x14 (merge (merge
                             (merge INil INil) ??)
                      ??) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ??
Checking ICons x14 (merge (merge
                             (merge INil (ICons ?? ??)) ??)
                      ??) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ??
Checking ICons x14 (merge (merge
                             (merge (ICons x14 ??) ??) ??)
                      ??) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ??
Checking ICons x14 (merge (merge
                             (merge (ICons x10 ??) ??) ??)
                      ??) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ??
Checking ICons x14 (merge (merge
                             x15 (merge ys ??))
                      ??) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ??
TYPE ERROR: Cannot find sufficiently strong refinements
when checking ICons x14 (merge
                           (merge x15 (merge ys ??)) ??) ::
{IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys}
in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ICons x14 (merge (merge x15
                                       (merge ys ??)) ??)
Checking ICons x14 (merge (merge
                             x15 (merge xs ??))
                      ??) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ??
TYPE ERROR: Cannot find sufficiently strong refinements
when checking ICons x14 (merge
                           (merge x15 (merge xs ??)) ??) ::
{IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys}
in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ICons x14 (merge (merge x15
                                       (merge xs ??)) ??)
Checking ICons x14 (merge (merge
                             x15 (merge (merge ?? ??) ??))
                      ??) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ??
Checking ICons x14 (merge (merge
                             x15 (merge x11 ??))
                      ??) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ??
TYPE ERROR: Cannot find sufficiently strong refinements
when checking ICons x14 (merge
                           (merge x15 (merge x11 ??)) ??)
::
{IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys}
in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ICons x14 (merge (merge x15
                                       (merge x11 ??)) ??)
Checking ICons x14 (merge (merge
                             x15 (merge x15 ??))
                      ??) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ??
Checking ICons x14 (merge (merge
                             x15 (merge INil ??))
                      ??) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ??
Checking ICons x14 (merge (merge
                             x15 (merge (ICons ?? ??) ??))
                      ??) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ??
Checking ICons x14 (merge (merge
                             x15 x11) (merge ??
                                         ??)) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ??
TYPE ERROR: Cannot match shape 'IList (A8)'
with shape '(IList (a) -> IList (a))'
when checking ICons x14 (merge
                           (merge x15 x11) (merge ?? ??))
::
{IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys}
in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ICons x14 (merge (merge x15
                                       x11) (merge ?? ??))
Checking ICons x14 (merge (merge
                             x15 x11) (ICons ??
                                         ??)) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ??
TYPE ERROR: Cannot match shape 'IList (A8)'
with shape '(IList (a) -> IList (a))'
when checking ICons x14 (merge
                           (merge x15 x11) (ICons ?? ??))
::
{IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys}
in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ICons x14 (merge (merge x15
                                       x11) (ICons ?? ??))
Checking ICons x14 (merge (merge
                             x15 INil) (merge ??
                                          ??)) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ??
TYPE ERROR: Cannot match shape 'IList (A9)'
with shape '(IList (a) -> IList (a))'
when checking ICons x14 (merge
                           (merge x15 INil) (merge ?? ??))
::
{IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys}
in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ICons x14 (merge (merge x15
                                       INil) (merge ?? ??))
Checking ICons x14 (merge (merge
                             x15 INil) (ICons ??
                                          ??)) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ??
TYPE ERROR: Cannot match shape 'IList (A9)'
with shape '(IList (a) -> IList (a))'
when checking ICons x14 (merge
                           (merge x15 INil) (ICons ?? ??))
::
{IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys}
in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ICons x14 (merge (merge x15
                                       INil) (ICons ?? ??))
Checking ICons x14 (merge (merge
                             x15 (ICons x14 ??))
                      ??) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ??
Checking ICons x14 (merge (merge
                             x15 (ICons x10 ??))
                      ??) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ??
Checking ICons x14 (merge (merge
                             INil (merge ys ??))
                      ??) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ??
TYPE ERROR: Cannot find sufficiently strong refinements
when checking ICons x14 (merge
                           (merge INil (merge ys ??)) ??)
::
{IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys}
in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ICons x14 (merge (merge
                                       INil (merge ys ??)) ??)
Checking ICons x14 (merge (merge
                             INil (merge xs ??))
                      ??) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ??
TYPE ERROR: Cannot find sufficiently strong refinements
when checking ICons x14 (merge
                           (merge INil (merge xs ??)) ??)
::
{IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys}
in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ICons x14 (merge (merge
                                       INil (merge xs ??)) ??)
Checking ICons x14 (merge (merge
                             INil (merge (merge ?? ??) ??))
                      ??) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ??
Checking ICons x14 (merge (merge
                             INil (merge x11 ??))
                      ??) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ??
TYPE ERROR: Cannot find sufficiently strong refinements
when checking ICons x14 (merge
                           (merge INil (merge x11 ??)) ??)
::
{IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys}
in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ICons x14 (merge (merge
                                       INil (merge x11 ??)) ??)
Checking ICons x14 (merge (merge
                             INil (merge x15 ??))
                      ??) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ??
Checking ICons x14 (merge (merge
                             INil (merge INil ??))
                      ??) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ??
Checking ICons x14 (merge (merge
                             INil (merge (ICons ?? ??) ??))
                      ??) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ??
Checking ICons x14 (merge (merge
                             INil x11) (merge ??
                                          ??)) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ??
TYPE ERROR: Cannot match shape 'IList (A9)'
with shape '(IList (a) -> IList (a))'
when checking ICons x14 (merge
                           (merge INil x11) (merge ?? ??))
::
{IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys}
in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ICons x14 (merge (merge
                                       INil x11) (merge ?? ??))
Checking ICons x14 (merge (merge
                             INil x11) (ICons ??
                                          ??)) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ??
TYPE ERROR: Cannot match shape 'IList (A9)'
with shape '(IList (a) -> IList (a))'
when checking ICons x14 (merge
                           (merge INil x11) (ICons ?? ??))
::
{IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys}
in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ICons x14 (merge (merge
                                       INil x11) (ICons ?? ??))
Checking ICons x14 (merge (merge
                             INil INil) (merge ??
                                           ??)) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ??
TYPE ERROR: Cannot match shape 'IList (A10)'
with shape '(IList (a) -> IList (a))'
when checking ICons x14 (merge
                           (merge INil INil) (merge ?? ??))
::
{IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys}
in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ICons x14 (merge (merge
                                       INil INil) (merge ?? ??))
Checking ICons x14 (merge (merge
                             INil INil) (ICons ??
                                           ??)) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ??
TYPE ERROR: Cannot match shape 'IList (A10)'
with shape '(IList (a) -> IList (a))'
when checking ICons x14 (merge
                           (merge INil INil) (ICons ?? ??))
::
{IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys}
in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ICons x14 (merge (merge
                                       INil INil) (ICons ?? ??))
Checking ICons x14 (merge (merge
                             INil (ICons x14 ??))
                      ??) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ??
Checking ICons x14 (merge (merge
                             INil (ICons x10 ??))
                      ??) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ??
Checking ICons x14 (merge (merge
                             (ICons x14 ys) ??)
                      ??) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ??
TYPE ERROR: Cannot find sufficiently strong refinements
when checking ICons x14 (merge
                           (merge (ICons x14 ys) ??) ??) ::
{IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys}
in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ICons x14 (merge (merge
                                       (ICons x14 ys) ??) ??)
Checking ICons x14 (merge (merge
                             (ICons x14 xs) ??)
                      ??) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ??
TYPE ERROR: Cannot find sufficiently strong refinements
when checking ICons x14 (merge
                           (merge (ICons x14 xs) ??) ??) ::
{IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys}
in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ICons x14 (merge (merge
                                       (ICons x14 xs) ??) ??)
Checking ICons x14 (merge (merge
                             (ICons x14 (merge ?? ??)) ??)
                      ??) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ??
Checking ICons x14 (merge (merge
                             (ICons x14 x11) ??)
                      ??) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ??
TYPE ERROR: Cannot find sufficiently strong refinements
when checking ICons x14 (merge
                           (merge (ICons x14 x11) ??) ??)
::
{IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys}
in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ICons x14 (merge (merge
                                       (ICons x14 x11) ??) ??)
Checking ICons x14 (merge (merge
                             (ICons x14 x15) ??)
                      ??) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ??
Checking ICons x14 (merge (merge
                             (ICons x14 INil) ??)
                      ??) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ??
Checking ICons x14 (merge (merge
                             (ICons x14 (ICons ?? ??)) ??)
                      ??) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ??
Checking ICons x14 (merge (merge
                             (ICons x10 ys) ??)
                      ??) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ??
TYPE ERROR: Cannot find sufficiently strong refinements
when checking ICons x14 (merge
                           (merge (ICons x10 ys) ??) ??) ::
{IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys}
in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ICons x14 (merge (merge
                                       (ICons x10 ys) ??) ??)
Checking ICons x14 (merge (merge
                             (ICons x10 xs) ??)
                      ??) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ??
TYPE ERROR: Cannot find sufficiently strong refinements
when checking ICons x14 (merge
                           (merge (ICons x10 xs) ??) ??) ::
{IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys}
in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ICons x14 (merge (merge
                                       (ICons x10 xs) ??) ??)
Checking ICons x14 (merge (merge
                             (ICons x10 (merge ?? ??)) ??)
                      ??) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ??
Checking ICons x14 (merge (merge
                             (ICons x10 x11) ??)
                      ??) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ??
TYPE ERROR: Cannot find sufficiently strong refinements
when checking ICons x14 (merge
                           (merge (ICons x10 x11) ??) ??)
::
{IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys}
in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ICons x14 (merge (merge
                                       (ICons x10 x11) ??) ??)
Checking ICons x14 (merge (merge
                             (ICons x10 x15) ??)
                      ??) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ??
TYPE ERROR: Cannot find sufficiently strong refinements
when checking ICons x14 (merge
                           (merge (ICons x10 x15) ??) ??)
::
{IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys}
in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ICons x14 (merge (merge
                                       (ICons x10 x15) ??) ??)
Checking ICons x14 (merge (merge
                             (ICons x10 INil) ??)
                      ??) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ??
Checking ICons x14 (merge (merge
                             (ICons x10 (ICons ?? ??)) ??)
                      ??) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ??
Checking ICons x14 (merge x15
                      (merge (merge ys ??)
                         ??)) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ??
TYPE ERROR: Cannot find sufficiently strong refinements
when checking ICons x14 (merge
                           x15 (merge (merge ys ??) ??)) ::
{IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys}
in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ICons x14 (merge x15 (merge
                                           (merge ys ??) ??))
Checking ICons x14 (merge x15
                      (merge (merge xs ??)
                         ??)) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ??
TYPE ERROR: Cannot find sufficiently strong refinements
when checking ICons x14 (merge
                           x15 (merge (merge xs ??) ??)) ::
{IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys}
in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ICons x14 (merge x15 (merge
                                           (merge xs ??) ??))
Checking ICons x14 (merge x15
                      (merge (merge (merge ?? ??) ??)
                         ??)) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ??
Checking ICons x14 (merge x15
                      (merge (merge x11 ??)
                         ??)) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ??
TYPE ERROR: Cannot find sufficiently strong refinements
when checking ICons x14 (merge
                           x15 (merge (merge x11 ??) ??))
::
{IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys}
in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ICons x14 (merge x15 (merge
                                           (merge x11 ??) ??))
Checking ICons x14 (merge x15
                      (merge (merge x15 ??)
                         ??)) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ??
Checking ICons x14 (merge x15
                      (merge (merge INil ??)
                         ??)) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ??
Checking ICons x14 (merge x15
                      (merge (merge (ICons ?? ??) ??)
                         ??)) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ??
Checking ICons x14 (merge x15
                      (merge x15 (merge ??
                                    ??))) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ??
Checking ICons x14 (merge x15
                      (merge x15 (ICons ??
                                    ??))) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ??
Checking ICons x14 (merge x15
                      (merge INil (merge ??
                                     ??))) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ??
Checking ICons x14 (merge x15
                      (merge INil (ICons ??
                                     ??))) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ??
Checking ICons x14 (merge x15
                      (merge (ICons x14 ??)
                         ??)) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ??
Checking ICons x14 (merge x15
                      (merge (ICons x10 ??)
                         ??)) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ??
Checking ICons x14 (merge x15
                      (ICons x14 (merge ??
                                    ??))) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ??
Checking ICons x14 (merge x15
                      (ICons x14 (ICons ??
                                    ??))) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ??
Current queue size 109
Checking ICons x14 (merge x15
                      (ICons x10
                         (?? :: IList {A7|x10 <= _v}))) in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ??
*******************Filling holes in ICons
                                      x14 (merge x15 (ICons x10
                                                        (?? :: IList {A7|x10 <= _v})))
Looking for succinct type {IList |  | a, |  | }
Trying ICons
Trying INil
Trying x15
Trying x11
Trying merge
Trying xs
Trying ys
Current queue size 115
Checking ICons x14 (merge x15
                      (ICons x10 INil)) in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ??
Checking program ICons x14
                   (merge x15 (ICons x10 INil))
Checking ICons x14 (merge x15
                      (ICons x10
                         INil)) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ??
TYPE ERROR: Cannot find sufficiently strong refinements
when checking ICons x14 (merge
                           x15 (ICons x10 INil)) ::
{IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys}
in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ICons x14 (merge x15 (ICons
                                           x10 INil))
Current queue size 114
Checking ICons x14 (merge x15
                      (ICons x10 x15)) in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ??
TYPE ERROR: Cannot find sufficiently strong refinements
Current queue size 113
Checking ICons x14 (merge x15
                      (ICons x10 x11)) in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ??
Checking program ICons x14
                   (merge x15 (ICons x10 x11))
Checking ICons x14 (merge x15
                      (ICons x10
                         x11)) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else ??
Checking ICons x14 (merge x15
                      (ICons x10
                         xs)) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else 
                if x14 <= x10
                  then ICons x14 (merge x15 (ICons
                                               x10 x11))
                  else ??
TYPE ERROR: Cannot find sufficiently strong refinements
when checking ICons x14 (merge
                           x15 (ICons x10 xs)) ::
{IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys}
in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else 
                if x14 <= x10
                  then ICons x14 (merge x15 (ICons
                                               x10 x11))
                  else ICons x14 (merge x15 (ICons
                                               x10 xs))
Checking ICons x14 (merge x15
                      (ICons x10
                         ys)) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else 
                if x14 <= x10
                  then ICons x14 (merge x15 (ICons
                                               x10 x11))
                  else ??
TYPE ERROR: Cannot find sufficiently strong refinements
when checking ICons x14 (merge
                           x15 (ICons x10 ys)) ::
{IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys}
in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else 
                if x14 <= x10
                  then ICons x14 (merge x15 (ICons
                                               x10 x11))
                  else ICons x14 (merge x15 (ICons
                                               x10 ys))
Checking ICons x14 (merge INil
                      (merge (merge ?? ??)
                         ??)) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else 
                if x14 <= x10
                  then ICons x14 (merge x15 (ICons
                                               x10 x11))
                  else ??
Checking ICons x14 (merge INil
                      (merge x15
                         ??)) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else 
                if x14 <= x10
                  then ICons x14 (merge x15 (ICons
                                               x10 x11))
                  else ??
Checking ICons x14 (merge INil
                      (merge INil
                         ??)) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else 
                if x14 <= x10
                  then ICons x14 (merge x15 (ICons
                                               x10 x11))
                  else ??
Checking ICons x14 (merge INil
                      (merge (ICons ?? ??)
                         ??)) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else 
                if x14 <= x10
                  then ICons x14 (merge x15 (ICons
                                               x10 x11))
                  else ??
Checking ICons x14 (merge INil
                      (ICons x14
                         ??)) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else 
                if x14 <= x10
                  then ICons x14 (merge x15 (ICons
                                               x10 x11))
                  else ??
Checking ICons x14 (merge INil
                      (ICons x10
                         ??)) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else 
                if x14 <= x10
                  then ICons x14 (merge x15 (ICons
                                               x10 x11))
                  else ??
TYPE ERROR: Cannot find sufficiently strong refinements
when checking ICons x14 (merge
                           INil (ICons x10 ??)) ::
{IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys}
in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else 
                if x14 <= x10
                  then ICons x14 (merge x15 (ICons
                                               x10 x11))
                  else ICons x14 (merge INil
                                    (ICons x10 ??))
Checking ICons x14 (merge (ICons
                             x14 (merge ?? ??))
                      ??) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else 
                if x14 <= x10
                  then ICons x14 (merge x15 (ICons
                                               x10 x11))
                  else ??
Checking ICons x14 (merge (ICons
                             x14 x15)
                      ??) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else 
                if x14 <= x10
                  then ICons x14 (merge x15 (ICons
                                               x10 x11))
                  else ??
Checking ICons x14 (merge (ICons
                             x14 INil)
                      ??) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else 
                if x14 <= x10
                  then ICons x14 (merge x15 (ICons
                                               x10 x11))
                  else ??
Checking ICons x14 (merge (ICons
                             x14 (ICons ?? ??))
                      ??) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else 
                if x14 <= x10
                  then ICons x14 (merge x15 (ICons
                                               x10 x11))
                  else ??
Checking ICons x14 (merge (ICons
                             x10 (merge ?? ??))
                      ??) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else 
                if x14 <= x10
                  then ICons x14 (merge x15 (ICons
                                               x10 x11))
                  else ??
TYPE ERROR: Cannot find sufficiently strong refinements
when checking ICons x14 (merge
                           (ICons x10 (merge ?? ??)) ??) ::
{IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys}
in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else 
                if x14 <= x10
                  then ICons x14 (merge x15 (ICons
                                               x10 x11))
                  else ICons x14 (merge (ICons x10
                                           (merge ?? ??)) ??)
Checking ICons x14 (merge (ICons
                             x10 INil)
                      ??) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else 
                if x14 <= x10
                  then ICons x14 (merge x15 (ICons
                                               x10 x11))
                  else ??
TYPE ERROR: Cannot find sufficiently strong refinements
when checking ICons x14 (merge
                           (ICons x10 INil) ??) ::
{IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys}
in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else 
                if x14 <= x10
                  then ICons x14 (merge x15 (ICons
                                               x10 x11))
                  else ICons x14 (merge (ICons x10
                                           INil) ??)
Checking ICons x14 (merge (ICons
                             x10 (ICons ?? ??))
                      ??) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else 
                if x14 <= x10
                  then ICons x14 (merge x15 (ICons
                                               x10 x11))
                  else ??
TYPE ERROR: Cannot find sufficiently strong refinements
when checking ICons x14 (merge
                           (ICons x10 (ICons ?? ??)) ??) ::
{IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys}
in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else 
                if x14 <= x10
                  then ICons x14 (merge x15 (ICons
                                               x10 x11))
                  else ICons x14 (merge (ICons x10
                                           (ICons ?? ??)) ??)
Checking ICons x14 (ICons x14
                      (merge (merge ?? ??)
                         ??)) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else 
                if x14 <= x10
                  then ICons x14 (merge x15 (ICons
                                               x10 x11))
                  else ??
Checking ICons x14 (ICons x14
                      (merge x15
                         ??)) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else 
                if x14 <= x10
                  then ICons x14 (merge x15 (ICons
                                               x10 x11))
                  else ??
Checking ICons x14 (ICons x14
                      (merge INil
                         ??)) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else 
                if x14 <= x10
                  then ICons x14 (merge x15 (ICons
                                               x10 x11))
                  else ??
Checking ICons x14 (ICons x14
                      (merge (ICons ?? ??)
                         ??)) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else 
                if x14 <= x10
                  then ICons x14 (merge x15 (ICons
                                               x10 x11))
                  else ??
Checking ICons x14 (ICons x14
                      (ICons x14
                         ??)) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else 
                if x14 <= x10
                  then ICons x14 (merge x15 (ICons
                                               x10 x11))
                  else ??
Checking ICons x14 (ICons x14
                      (ICons x10
                         ??)) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else 
                if x14 <= x10
                  then ICons x14 (merge x15 (ICons
                                               x10 x11))
                  else ??
TYPE ERROR: Cannot find sufficiently strong refinements
when checking ICons x14 (ICons
                           x14 (ICons x10 ??)) ::
{IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys}
in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else 
                if x14 <= x10
                  then ICons x14 (merge x15 (ICons
                                               x10 x11))
                  else ICons x14 (ICons x14 (ICons
                                               x10 ??))
Checking ICons x14 (ICons x10
                      (merge (merge ?? ??)
                         ??)) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else 
                if x14 <= x10
                  then ICons x14 (merge x15 (ICons
                                               x10 x11))
                  else ??
TYPE ERROR: Cannot find sufficiently strong refinements
when checking ICons x14 (ICons
                           x10 (merge (merge ?? ??) ??)) ::
{IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys}
in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else 
                if x14 <= x10
                  then ICons x14 (merge x15 (ICons
                                               x10 x11))
                  else ICons x14 (ICons x10 (merge
                                               (merge ?? ??) ??))
Checking ICons x14 (ICons x10
                      (merge INil
                         ??)) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else 
                if x14 <= x10
                  then ICons x14 (merge x15 (ICons
                                               x10 x11))
                  else ??
TYPE ERROR: Cannot find sufficiently strong refinements
when checking ICons x14 (ICons
                           x10 (merge INil ??)) ::
{IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys}
in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else 
                if x14 <= x10
                  then ICons x14 (merge x15 (ICons
                                               x10 x11))
                  else ICons x14 (ICons x10 (merge
                                               INil ??))
Checking ICons x14 (ICons x10
                      (merge (ICons ?? ??)
                         ??)) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else 
                if x14 <= x10
                  then ICons x14 (merge x15 (ICons
                                               x10 x11))
                  else ??
TYPE ERROR: Cannot find sufficiently strong refinements
when checking ICons x14 (ICons
                           x10 (merge (ICons ?? ??) ??)) ::
{IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys}
in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else 
                if x14 <= x10
                  then ICons x14 (merge x15 (ICons
                                               x10 x11))
                  else ICons x14 (ICons x10 (merge
                                               (ICons ?? ??) ??))
Checking ICons x14 (ICons x10
                      (ICons x10
                         ??)) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else 
                if x14 <= x10
                  then ICons x14 (merge x15 (ICons
                                               x10 x11))
                  else ??
TYPE ERROR: Cannot find sufficiently strong refinements
when checking ICons x14 (ICons
                           x10 (ICons x10 ??)) ::
{IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys}
in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else 
                if x14 <= x10
                  then ICons x14 (merge x15 (ICons
                                               x10 x11))
                  else ICons x14 (ICons x10 (ICons
                                               x10 ??))
Checking ICons x10 (merge (merge
                             (merge (merge ?? ??) ??) ??)
                      ??) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else 
                if x14 <= x10
                  then ICons x14 (merge x15 (ICons
                                               x10 x11))
                  else ??
TYPE ERROR: Cannot find sufficiently strong refinements
when checking ICons x10 (merge
                           (merge (merge (merge ?? ??) ??)
                              ??) ??) ::
{IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys}
in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else 
                if x14 <= x10
                  then ICons x14 (merge x15 (ICons
                                               x10 x11))
                  else ICons x10 (merge (merge
                                           (merge (merge ?? ??) ??) ??) ??)
Checking ICons x10 (merge (merge
                             (merge x15 ??) ??)
                      ??) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else 
                if x14 <= x10
                  then ICons x14 (merge x15 (ICons
                                               x10 x11))
                  else ??
TYPE ERROR: Cannot find sufficiently strong refinements
when checking ICons x10 (merge
                           (merge (merge x15 ??) ??) ??) ::
{IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys}
in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else 
                if x14 <= x10
                  then ICons x14 (merge x15 (ICons
                                               x10 x11))
                  else ICons x10 (merge (merge
                                           (merge x15 ??) ??) ??)
Checking ICons x10 (merge (merge
                             (merge INil ??) ??)
                      ??) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else 
                if x14 <= x10
                  then ICons x14 (merge x15 (ICons
                                               x10 x11))
                  else ??
TYPE ERROR: Cannot find sufficiently strong refinements
when checking ICons x10 (merge
                           (merge (merge INil ??) ??) ??)
::
{IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys}
in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else 
                if x14 <= x10
                  then ICons x14 (merge x15 (ICons
                                               x10 x11))
                  else ICons x10 (merge (merge
                                           (merge INil ??) ??) ??)
Checking ICons x10 (merge (merge
                             (merge (ICons ?? ??) ??) ??)
                      ??) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else 
                if x14 <= x10
                  then ICons x14 (merge x15 (ICons
                                               x10 x11))
                  else ??
TYPE ERROR: Cannot find sufficiently strong refinements
when checking ICons x10 (merge
                           (merge (merge (ICons ?? ??) ??)
                              ??) ??) ::
{IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys}
in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else 
                if x14 <= x10
                  then ICons x14 (merge x15 (ICons
                                               x10 x11))
                  else ICons x10 (merge (merge
                                           (merge (ICons ?? ??) ??) ??) ??)
Checking ICons x10 (merge (merge
                             x15 (merge ?? ??))
                      ??) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else 
                if x14 <= x10
                  then ICons x14 (merge x15 (ICons
                                               x10 x11))
                  else ??
Checking ICons x10 (merge (merge
                             x15 INil)
                      ??) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else 
                if x14 <= x10
                  then ICons x14 (merge x15 (ICons
                                               x10 x11))
                  else ??
Checking ICons x10 (merge (merge
                             x15 (ICons ?? ??))
                      ??) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else 
                if x14 <= x10
                  then ICons x14 (merge x15 (ICons
                                               x10 x11))
                  else ??
Checking ICons x10 (merge (merge
                             INil (merge ?? ??))
                      ??) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else 
                if x14 <= x10
                  then ICons x14 (merge x15 (ICons
                                               x10 x11))
                  else ??
TYPE ERROR: Cannot find sufficiently strong refinements
when checking ICons x10 (merge
                           (merge INil (merge ?? ??)) ??)
::
{IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys}
in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else 
                if x14 <= x10
                  then ICons x14 (merge x15 (ICons
                                               x10 x11))
                  else ICons x10 (merge (merge
                                           INil (merge ?? ??)) ??)
Checking ICons x10 (merge (merge
                             INil INil)
                      ??) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else 
                if x14 <= x10
                  then ICons x14 (merge x15 (ICons
                                               x10 x11))
                  else ??
TYPE ERROR: Cannot find sufficiently strong refinements
when checking ICons x10 (merge
                           (merge INil INil) ??) ::
{IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys}
in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else 
                if x14 <= x10
                  then ICons x14 (merge x15 (ICons
                                               x10 x11))
                  else ICons x10 (merge (merge
                                           INil INil) ??)
Checking ICons x10 (merge (merge
                             INil (ICons ?? ??))
                      ??) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else 
                if x14 <= x10
                  then ICons x14 (merge x15 (ICons
                                               x10 x11))
                  else ??
TYPE ERROR: Cannot find sufficiently strong refinements
when checking ICons x10 (merge
                           (merge INil (ICons ?? ??)) ??)
::
{IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys}
in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else 
                if x14 <= x10
                  then ICons x14 (merge x15 (ICons
                                               x10 x11))
                  else ICons x10 (merge (merge
                                           INil (ICons ?? ??)) ??)
Checking ICons x10 (merge (merge
                             (ICons x14 ??) ??)
                      ??) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else 
                if x14 <= x10
                  then ICons x14 (merge x15 (ICons
                                               x10 x11))
                  else ??
TYPE ERROR: Cannot find sufficiently strong refinements
when checking ICons x10 (merge
                           (merge (ICons x14 ??) ??) ??) ::
{IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys}
in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else 
                if x14 <= x10
                  then ICons x14 (merge x15 (ICons
                                               x10 x11))
                  else ICons x10 (merge (merge
                                           (ICons x14 ??) ??) ??)
Checking ICons x10 (merge (merge
                             (ICons x10 ??) ??)
                      ??) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else 
                if x14 <= x10
                  then ICons x14 (merge x15 (ICons
                                               x10 x11))
                  else ??
TYPE ERROR: Cannot find sufficiently strong refinements
when checking ICons x10 (merge
                           (merge (ICons x10 ??) ??) ??) ::
{IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys}
in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else 
                if x14 <= x10
                  then ICons x14 (merge x15 (ICons
                                               x10 x11))
                  else ICons x10 (merge (merge
                                           (ICons x10 ??) ??) ??)
Checking ICons x10 (merge x15
                      (merge (merge ?? ??)
                         ??)) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else 
                if x14 <= x10
                  then ICons x14 (merge x15 (ICons
                                               x10 x11))
                  else ??
Checking ICons x10 (merge x15
                      (merge x15
                         ??)) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else 
                if x14 <= x10
                  then ICons x14 (merge x15 (ICons
                                               x10 x11))
                  else ??
Checking ICons x10 (merge x15
                      (merge INil
                         ??)) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else 
                if x14 <= x10
                  then ICons x14 (merge x15 (ICons
                                               x10 x11))
                  else ??
Checking ICons x10 (merge x15
                      (merge (ICons ?? ??)
                         ??)) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else 
                if x14 <= x10
                  then ICons x14 (merge x15 (ICons
                                               x10 x11))
                  else ??
Checking ICons x10 (merge x15
                      (ICons x14
                         ??)) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else 
                if x14 <= x10
                  then ICons x14 (merge x15 (ICons
                                               x10 x11))
                  else ??
Checking ICons x10 (merge x15
                      (ICons x10
                         ??)) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else 
                if x14 <= x10
                  then ICons x14 (merge x15 (ICons
                                               x10 x11))
                  else ??
Checking ICons x10 (merge INil
                      (merge (merge ?? ??)
                         ??)) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else 
                if x14 <= x10
                  then ICons x14 (merge x15 (ICons
                                               x10 x11))
                  else ??
TYPE ERROR: Cannot find sufficiently strong refinements
when checking ICons x10 (merge
                           INil (merge (merge ?? ??) ??))
::
{IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys}
in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else 
                if x14 <= x10
                  then ICons x14 (merge x15 (ICons
                                               x10 x11))
                  else ICons x10 (merge INil
                                    (merge (merge ?? ??) ??))
Checking ICons x10 (merge INil
                      (merge x15
                         ??)) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else 
                if x14 <= x10
                  then ICons x14 (merge x15 (ICons
                                               x10 x11))
                  else ??
TYPE ERROR: Cannot find sufficiently strong refinements
when checking ICons x10 (merge
                           INil (merge x15 ??)) ::
{IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys}
in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else 
                if x14 <= x10
                  then ICons x14 (merge x15 (ICons
                                               x10 x11))
                  else ICons x10 (merge INil
                                    (merge x15 ??))
Checking ICons x10 (merge INil
                      (merge INil
                         ??)) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else 
                if x14 <= x10
                  then ICons x14 (merge x15 (ICons
                                               x10 x11))
                  else ??
TYPE ERROR: Cannot find sufficiently strong refinements
when checking ICons x10 (merge
                           INil (merge INil ??)) ::
{IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys}
in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else 
                if x14 <= x10
                  then ICons x14 (merge x15 (ICons
                                               x10 x11))
                  else ICons x10 (merge INil
                                    (merge INil ??))
Checking ICons x10 (merge INil
                      (merge (ICons ?? ??)
                         ??)) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else 
                if x14 <= x10
                  then ICons x14 (merge x15 (ICons
                                               x10 x11))
                  else ??
TYPE ERROR: Cannot find sufficiently strong refinements
when checking ICons x10 (merge
                           INil (merge (ICons ?? ??) ??))
::
{IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys}
in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else 
                if x14 <= x10
                  then ICons x14 (merge x15 (ICons
                                               x10 x11))
                  else ICons x10 (merge INil
                                    (merge (ICons ?? ??) ??))
Checking ICons x10 (merge INil
                      (ICons x14
                         ??)) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else 
                if x14 <= x10
                  then ICons x14 (merge x15 (ICons
                                               x10 x11))
                  else ??
TYPE ERROR: Cannot find sufficiently strong refinements
when checking ICons x10 (merge
                           INil (ICons x14 ??)) ::
{IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys}
in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else 
                if x14 <= x10
                  then ICons x14 (merge x15 (ICons
                                               x10 x11))
                  else ICons x10 (merge INil
                                    (ICons x14 ??))
Checking ICons x10 (merge INil
                      (ICons x10
                         ??)) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else 
                if x14 <= x10
                  then ICons x14 (merge x15 (ICons
                                               x10 x11))
                  else ??
TYPE ERROR: Cannot find sufficiently strong refinements
when checking ICons x10 (merge
                           INil (ICons x10 ??)) ::
{IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys}
in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else 
                if x14 <= x10
                  then ICons x14 (merge x15 (ICons
                                               x10 x11))
                  else ICons x10 (merge INil
                                    (ICons x10 ??))
Checking ICons x10 (merge (ICons
                             x14 (merge ?? ??))
                      ??) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else 
                if x14 <= x10
                  then ICons x14 (merge x15 (ICons
                                               x10 x11))
                  else ??
Checking ICons x10 (merge (ICons
                             x14 x15)
                      ??) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else 
                if x14 <= x10
                  then ICons x14 (merge x15 (ICons
                                               x10 x11))
                  else ??
Checking ICons x10 (merge (ICons
                             x14 INil)
                      ??) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else 
                if x14 <= x10
                  then ICons x14 (merge x15 (ICons
                                               x10 x11))
                  else ??
Checking ICons x10 (merge (ICons
                             x14 (ICons ?? ??))
                      ??) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else 
                if x14 <= x10
                  then ICons x14 (merge x15 (ICons
                                               x10 x11))
                  else ??
Checking ICons x10 (merge (ICons
                             x10 (merge ?? ??))
                      ??) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else 
                if x14 <= x10
                  then ICons x14 (merge x15 (ICons
                                               x10 x11))
                  else ??
Checking ICons x10 (merge (ICons
                             x10 x15)
                      ??) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else 
                if x14 <= x10
                  then ICons x14 (merge x15 (ICons
                                               x10 x11))
                  else ??
Checking ICons x10 (merge (ICons
                             x10 INil)
                      ??) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else 
                if x14 <= x10
                  then ICons x14 (merge x15 (ICons
                                               x10 x11))
                  else ??
Checking ICons x10 (merge (ICons
                             x10 (ICons ?? ??))
                      ??) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else 
                if x14 <= x10
                  then ICons x14 (merge x15 (ICons
                                               x10 x11))
                  else ??
Checking ICons x10 (ICons x14
                      (merge (merge ?? ??)
                         ??)) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else 
                if x14 <= x10
                  then ICons x14 (merge x15 (ICons
                                               x10 x11))
                  else ??
Checking ICons x10 (ICons x14
                      (merge x15
                         ??)) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else 
                if x14 <= x10
                  then ICons x14 (merge x15 (ICons
                                               x10 x11))
                  else ??
Checking ICons x10 (ICons x14
                      (merge INil
                         ??)) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else 
                if x14 <= x10
                  then ICons x14 (merge x15 (ICons
                                               x10 x11))
                  else ??
Checking ICons x10 (ICons x14
                      (merge (ICons ?? ??)
                         ??)) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else 
                if x14 <= x10
                  then ICons x14 (merge x15 (ICons
                                               x10 x11))
                  else ??
Checking ICons x10 (ICons x14
                      (ICons x14
                         ??)) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else 
                if x14 <= x10
                  then ICons x14 (merge x15 (ICons
                                               x10 x11))
                  else ??
Checking ICons x10 (ICons x10
                      (merge (merge ?? ??)
                         ??)) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else 
                if x14 <= x10
                  then ICons x14 (merge x15 (ICons
                                               x10 x11))
                  else ??
Checking ICons x10 (ICons x10
                      (merge x15
                         ??)) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else 
                if x14 <= x10
                  then ICons x14 (merge x15 (ICons
                                               x10 x11))
                  else ??
Checking ICons x10 (ICons x10
                      (merge INil
                         ??)) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else 
                if x14 <= x10
                  then ICons x14 (merge x15 (ICons
                                               x10 x11))
                  else ??
Checking ICons x10 (ICons x10
                      (merge (ICons ?? ??)
                         ??)) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else 
                if x14 <= x10
                  then ICons x14 (merge x15 (ICons
                                               x10 x11))
                  else ??
Checking ICons x10 (ICons x10
                      (ICons x14
                         ??)) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else 
                if x14 <= x10
                  then ICons x14 (merge x15 (ICons
                                               x10 x11))
                  else ??
Checking ICons x10 (ICons x10
                      (ICons x10
                         ??)) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else 
                if x14 <= x10
                  then ICons x14 (merge x15 (ICons
                                               x10 x11))
                  else ??
Checking ICons x14 (merge (merge
                             (merge (merge (merge ?? ??) ??)
                                ??) ??)
                      ??) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else 
                if x14 <= x10
                  then ICons x14 (merge x15 (ICons
                                               x10 x11))
                  else ??
Checking ICons x14 (merge (merge
                             (merge (merge x15 ??) ??) ??)
                      ??) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else 
                if x14 <= x10
                  then ICons x14 (merge x15 (ICons
                                               x10 x11))
                  else ??
Checking ICons x14 (merge (merge
                             (merge (merge INil ??) ??) ??)
                      ??) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else 
                if x14 <= x10
                  then ICons x14 (merge x15 (ICons
                                               x10 x11))
                  else ??
Checking ICons x14 (merge (merge
                             (merge (merge (ICons ?? ??) ??)
                                ??) ??)
                      ??) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else 
                if x14 <= x10
                  then ICons x14 (merge x15 (ICons
                                               x10 x11))
                  else ??
Checking ICons x14 (merge (merge
                             (merge x15 (merge ?? ??)) ??)
                      ??) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else 
                if x14 <= x10
                  then ICons x14 (merge x15 (ICons
                                               x10 x11))
                  else ??
Checking ICons x14 (merge (merge
                             (merge x15 INil) ??)
                      ??) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else 
                if x14 <= x10
                  then ICons x14 (merge x15 (ICons
                                               x10 x11))
                  else ??
Checking ICons x14 (merge (merge
                             (merge x15 (ICons ?? ??)) ??)
                      ??) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else 
                if x14 <= x10
                  then ICons x14 (merge x15 (ICons
                                               x10 x11))
                  else ??
Checking ICons x14 (merge (merge
                             (merge INil (merge ?? ??)) ??)
                      ??) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else 
                if x14 <= x10
                  then ICons x14 (merge x15 (ICons
                                               x10 x11))
                  else ??
Checking ICons x14 (merge (merge
                             (merge INil INil) ??)
                      ??) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else 
                if x14 <= x10
                  then ICons x14 (merge x15 (ICons
                                               x10 x11))
                  else ??
Checking ICons x14 (merge (merge
                             (merge INil (ICons ?? ??)) ??)
                      ??) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else 
                if x14 <= x10
                  then ICons x14 (merge x15 (ICons
                                               x10 x11))
                  else ??
Checking ICons x14 (merge (merge
                             (merge (ICons x14 ??) ??) ??)
                      ??) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else 
                if x14 <= x10
                  then ICons x14 (merge x15 (ICons
                                               x10 x11))
                  else ??
Checking ICons x14 (merge (merge
                             (merge (ICons x10 ??) ??) ??)
                      ??) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else 
                if x14 <= x10
                  then ICons x14 (merge x15 (ICons
                                               x10 x11))
                  else ??
TYPE ERROR: Cannot find sufficiently strong refinements
when checking ICons x14 (merge
                           (merge (merge (ICons x10 ??) ??)
                              ??) ??) ::
{IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys}
in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else 
                if x14 <= x10
                  then ICons x14 (merge x15 (ICons
                                               x10 x11))
                  else ICons x14 (merge (merge
                                           (merge (ICons x10 ??) ??) ??)
                                    ??)
Checking ICons x14 (merge (merge
                             x15 (merge (merge ?? ??) ??))
                      ??) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else 
                if x14 <= x10
                  then ICons x14 (merge x15 (ICons
                                               x10 x11))
                  else ??
Checking ICons x14 (merge (merge
                             x15 (merge x15 ??))
                      ??) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else 
                if x14 <= x10
                  then ICons x14 (merge x15 (ICons
                                               x10 x11))
                  else ??
Checking ICons x14 (merge (merge
                             x15 (merge INil ??))
                      ??) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else 
                if x14 <= x10
                  then ICons x14 (merge x15 (ICons
                                               x10 x11))
                  else ??
Checking ICons x14 (merge (merge
                             x15 (merge (ICons ?? ??) ??))
                      ??) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else 
                if x14 <= x10
                  then ICons x14 (merge x15 (ICons
                                               x10 x11))
                  else ??
Checking ICons x14 (merge (merge
                             x15 (ICons x14 ??))
                      ??) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else 
                if x14 <= x10
                  then ICons x14 (merge x15 (ICons
                                               x10 x11))
                  else ??
Checking ICons x14 (merge (merge
                             x15 (ICons x10 ??))
                      ??) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else 
                if x14 <= x10
                  then ICons x14 (merge x15 (ICons
                                               x10 x11))
                  else ??
TYPE ERROR: Cannot find sufficiently strong refinements
when checking ICons x14 (merge
                           (merge x15 (ICons x10 ??)) ??)
::
{IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys}
in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else 
                if x14 <= x10
                  then ICons x14 (merge x15 (ICons
                                               x10 x11))
                  else ICons x14 (merge (merge x15
                                           (ICons x10 ??)) ??)
Checking ICons x14 (merge (merge
                             INil (merge (merge ?? ??) ??))
                      ??) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else 
                if x14 <= x10
                  then ICons x14 (merge x15 (ICons
                                               x10 x11))
                  else ??
Checking ICons x14 (merge (merge
                             INil (merge x15 ??))
                      ??) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else 
                if x14 <= x10
                  then ICons x14 (merge x15 (ICons
                                               x10 x11))
                  else ??
Checking ICons x14 (merge (merge
                             INil (merge INil ??))
                      ??) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else 
                if x14 <= x10
                  then ICons x14 (merge x15 (ICons
                                               x10 x11))
                  else ??
Checking ICons x14 (merge (merge
                             INil (merge (ICons ?? ??) ??))
                      ??) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else 
                if x14 <= x10
                  then ICons x14 (merge x15 (ICons
                                               x10 x11))
                  else ??
Checking ICons x14 (merge (merge
                             INil (ICons x14 ??))
                      ??) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else 
                if x14 <= x10
                  then ICons x14 (merge x15 (ICons
                                               x10 x11))
                  else ??
Checking ICons x14 (merge (merge
                             INil (ICons x10 ??))
                      ??) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else 
                if x14 <= x10
                  then ICons x14 (merge x15 (ICons
                                               x10 x11))
                  else ??
TYPE ERROR: Cannot find sufficiently strong refinements
when checking ICons x14 (merge
                           (merge INil (ICons x10 ??)) ??)
::
{IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys}
in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else 
                if x14 <= x10
                  then ICons x14 (merge x15 (ICons
                                               x10 x11))
                  else ICons x14 (merge (merge
                                           INil (ICons x10 ??)) ??)
Checking ICons x14 (merge (merge
                             (ICons x14 (merge ?? ??)) ??)
                      ??) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else 
                if x14 <= x10
                  then ICons x14 (merge x15 (ICons
                                               x10 x11))
                  else ??
Checking ICons x14 (merge (merge
                             (ICons x14 x15) ??)
                      ??) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else 
                if x14 <= x10
                  then ICons x14 (merge x15 (ICons
                                               x10 x11))
                  else ??
Checking ICons x14 (merge (merge
                             (ICons x14 INil) ??)
                      ??) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else 
                if x14 <= x10
                  then ICons x14 (merge x15 (ICons
                                               x10 x11))
                  else ??
Checking ICons x14 (merge (merge
                             (ICons x14 (ICons ?? ??)) ??)
                      ??) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else 
                if x14 <= x10
                  then ICons x14 (merge x15 (ICons
                                               x10 x11))
                  else ??
Checking ICons x14 (merge (merge
                             (ICons x10 (merge ?? ??)) ??)
                      ??) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else 
                if x14 <= x10
                  then ICons x14 (merge x15 (ICons
                                               x10 x11))
                  else ??
TYPE ERROR: Cannot find sufficiently strong refinements
when checking ICons x14 (merge
                           (merge (ICons x10 (merge ?? ??))
                              ??) ??) ::
{IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys}
in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else 
                if x14 <= x10
                  then ICons x14 (merge x15 (ICons
                                               x10 x11))
                  else ICons x14 (merge (merge
                                           (ICons x10 (merge ?? ??)) ??)
                                    ??)
Checking ICons x14 (merge (merge
                             (ICons x10 INil) ??)
                      ??) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else 
                if x14 <= x10
                  then ICons x14 (merge x15 (ICons
                                               x10 x11))
                  else ??
TYPE ERROR: Cannot find sufficiently strong refinements
when checking ICons x14 (merge
                           (merge (ICons x10 INil) ??) ??)
::
{IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys}
in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else 
                if x14 <= x10
                  then ICons x14 (merge x15 (ICons
                                               x10 x11))
                  else ICons x14 (merge (merge
                                           (ICons x10 INil) ??) ??)
Checking ICons x14 (merge (merge
                             (ICons x10 (ICons ?? ??)) ??)
                      ??) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else 
                if x14 <= x10
                  then ICons x14 (merge x15 (ICons
                                               x10 x11))
                  else ??
TYPE ERROR: Cannot find sufficiently strong refinements
when checking ICons x14 (merge
                           (merge (ICons x10 (ICons ?? ??))
                              ??) ??) ::
{IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys}
in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else 
                if x14 <= x10
                  then ICons x14 (merge x15 (ICons
                                               x10 x11))
                  else ICons x14 (merge (merge
                                           (ICons x10 (ICons ?? ??)) ??)
                                    ??)
Checking ICons x14 (merge x15
                      (merge (merge (merge ?? ??) ??)
                         ??)) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else 
                if x14 <= x10
                  then ICons x14 (merge x15 (ICons
                                               x10 x11))
                  else ??
Checking ICons x14 (merge x15
                      (merge (merge x15 ??)
                         ??)) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else 
                if x14 <= x10
                  then ICons x14 (merge x15 (ICons
                                               x10 x11))
                  else ??
Checking ICons x14 (merge x15
                      (merge (merge INil ??)
                         ??)) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else 
                if x14 <= x10
                  then ICons x14 (merge x15 (ICons
                                               x10 x11))
                  else ??
Checking ICons x14 (merge x15
                      (merge (merge (ICons ?? ??) ??)
                         ??)) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else 
                if x14 <= x10
                  then ICons x14 (merge x15 (ICons
                                               x10 x11))
                  else ??
Checking ICons x14 (merge x15
                      (merge x15 (merge ??
                                    ??))) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else 
                if x14 <= x10
                  then ICons x14 (merge x15 (ICons
                                               x10 x11))
                  else ??
Checking ICons x14 (merge x15
                      (merge x15 (ICons ??
                                    ??))) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else 
                if x14 <= x10
                  then ICons x14 (merge x15 (ICons
                                               x10 x11))
                  else ??
Checking ICons x14 (merge x15
                      (merge INil (merge ??
                                     ??))) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else 
                if x14 <= x10
                  then ICons x14 (merge x15 (ICons
                                               x10 x11))
                  else ??
Checking ICons x14 (merge x15
                      (merge INil (ICons ??
                                     ??))) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else 
                if x14 <= x10
                  then ICons x14 (merge x15 (ICons
                                               x10 x11))
                  else ??
Checking ICons x14 (merge x15
                      (merge (ICons x14 ??)
                         ??)) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else 
                if x14 <= x10
                  then ICons x14 (merge x15 (ICons
                                               x10 x11))
                  else ??
Checking ICons x14 (merge x15
                      (merge (ICons x10 ??)
                         ??)) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else 
                if x14 <= x10
                  then ICons x14 (merge x15 (ICons
                                               x10 x11))
                  else ??
TYPE ERROR: Cannot find sufficiently strong refinements
when checking ICons x14 (merge
                           x15 (merge (ICons x10 ??) ??))
::
{IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys}
in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else 
                if x14 <= x10
                  then ICons x14 (merge x15 (ICons
                                               x10 x11))
                  else ICons x14 (merge x15 (merge
                                               (ICons x10 ??) ??))
Checking ICons x14 (merge x15
                      (ICons x14 (merge ??
                                    ??))) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else 
                if x14 <= x10
                  then ICons x14 (merge x15 (ICons
                                               x10 x11))
                  else ??
Checking ICons x14 (merge x15
                      (ICons x14 (ICons ??
                                    ??))) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else 
                if x14 <= x10
                  then ICons x14 (merge x15 (ICons
                                               x10 x11))
                  else ??
Checking ICons x14 (merge x15
                      (ICons x10 (merge ??
                                    ??))) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else 
                if x14 <= x10
                  then ICons x14 (merge x15 (ICons
                                               x10 x11))
                  else ??
TYPE ERROR: Cannot find sufficiently strong refinements
when checking ICons x14 (merge
                           x15 (ICons x10 (merge ?? ??)))
::
{IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys}
in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else 
                if x14 <= x10
                  then ICons x14 (merge x15 (ICons
                                               x10 x11))
                  else ICons x14 (merge x15 (ICons
                                               x10 (merge ?? ??)))
Checking ICons x14 (merge x15
                      (ICons x10 (ICons ??
                                    ??))) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else 
                if x14 <= x10
                  then ICons x14 (merge x15 (ICons
                                               x10 x11))
                  else ??
TYPE ERROR: Cannot find sufficiently strong refinements
when checking ICons x14 (merge
                           x15 (ICons x10 (ICons ?? ??)))
::
{IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys}
in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else 
                if x14 <= x10
                  then ICons x14 (merge x15 (ICons
                                               x10 x11))
                  else ICons x14 (merge x15 (ICons
                                               x10 (ICons ?? ??)))
Current queue size 77
Checking ICons x14 (merge INil
                      (merge (merge
                                (?? :: {IList A9|ilen _v >= 0 && ilen _v <= ilen xs})
                                (?? :: {IList A9|(ilen _v >= 0 && ilen _v <= ilen ys) && ((ilen x22 >= 0 && ilen x22 < ilen xs) || (ilen _v >= 0 && ilen _v < ilen ys))}))
                         (?? :: LET x20:({IList A9|ilen _v == ilen x22 + ilen x23 && ielems _v == ielems x22 + ielems x23}) IN {IList A8|(ilen _v >= 0 && ilen _v <= ilen ys) && ((ilen x20 >= 0 && ilen x20 < ilen xs) || (ilen _v >= 0 && ilen _v < ilen ys))}))) in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else 
                if x14 <= x10
                  then ICons x14 (merge x15 (ICons
                                               x10 x11))
                  else ??
*******************Filling holes in ICons
                                      x14 (merge INil (merge (merge
                                                                (?? :: {IList A9|ilen _v >= 0 && ilen _v <= ilen xs})
                                                                (?? :: {IList A9|(ilen _v >= 0 && ilen _v <= ilen ys) && ((ilen x22 >= 0 && ilen x22 < ilen xs) || (ilen _v >= 0 && ilen _v < ilen ys))}))
                                                         (?? :: LET x20:({IList A9|ilen _v == ilen x22 + ilen x23 && ielems _v == ielems x22 + ielems x23}) IN {IList A8|(ilen _v >= 0 && ilen _v <= ilen ys) && ((ilen x20 >= 0 && ilen x20 < ilen xs) || (ilen _v >= 0 && ilen _v < ilen ys))})))
Looking for succinct type {IList |  | a, |  | }
Trying ICons
Trying INil
Trying x15
Trying x11
Trying merge
Trying xs
Trying ys
Current queue size 83
Checking ICons x14 (merge INil
                      (merge x15
                         (?? :: {IList A8|(ilen _v >= 0 && ilen _v <= ilen ys) && ((ilen x15 >= 0 && ilen x15 < ilen xs) || (ilen _v >= 0 && ilen _v < ilen ys))}))) in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else 
                if x14 <= x10
                  then ICons x14 (merge x15 (ICons
                                               x10 x11))
                  else ??
*******************Filling holes in ICons
                                      x14 (merge INil (merge x15
                                                         (?? :: {IList A8|(ilen _v >= 0 && ilen _v <= ilen ys) && ((ilen x15 >= 0 && ilen x15 < ilen xs) || (ilen _v >= 0 && ilen _v < ilen ys))})))
Looking for succinct type {IList |  | a, |  | }
Trying ICons
Trying INil
Trying x15
Trying x11
Trying merge
Trying xs
Trying ys
Current queue size 89
Checking ICons x14 (merge INil
                      (merge x15 INil)) in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else 
                if x14 <= x10
                  then ICons x14 (merge x15 (ICons
                                               x10 x11))
                  else ??
Checking program ICons x14
                   (merge INil (merge x15 INil))
Checking ICons x14 (merge INil
                      (merge x15
                         INil)) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else 
                if x14 <= x10
                  then ICons x14 (merge x15 (ICons
                                               x10 x11))
                  else ??
TYPE ERROR: Cannot find sufficiently strong refinements
when checking ICons x14 (merge
                           INil (merge x15 INil)) ::
{IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys}
in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else 
                if x14 <= x10
                  then ICons x14 (merge x15 (ICons
                                               x10 x11))
                  else ICons x14 (merge INil
                                    (merge x15 INil))
Current queue size 88
Checking ICons x14 (merge INil
                      (merge x15 x15)) in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else 
                if x14 <= x10
                  then ICons x14 (merge x15 (ICons
                                               x10 x11))
                  else ??
TYPE ERROR: Cannot find sufficiently strong refinements
Current queue size 87
Checking ICons x14 (merge INil
                      (merge x15 x11)) in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else 
                if x14 <= x10
                  then ICons x14 (merge x15 (ICons
                                               x10 x11))
                  else ??
Checking program ICons x14
                   (merge INil (merge x15 x11))
Checking ICons x14 (merge INil
                      (merge x15
                         x11)) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else 
                if x14 <= x10
                  then ICons x14 (merge x15 (ICons
                                               x10 x11))
                  else ??
TYPE ERROR: Cannot find sufficiently strong refinements
when checking ICons x14 (merge
                           INil (merge x15 x11)) ::
{IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys}
in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else 
                if x14 <= x10
                  then ICons x14 (merge x15 (ICons
                                               x10 x11))
                  else ICons x14 (merge INil
                                    (merge x15 x11))
Current queue size 86
Checking ICons x14 (merge INil
                      (merge x15 xs)) in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else 
                if x14 <= x10
                  then ICons x14 (merge x15 (ICons
                                               x10 x11))
                  else ??
TYPE ERROR: Cannot find sufficiently strong refinements
Current queue size 85
Checking ICons x14 (merge INil
                      (merge x15 ys)) in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else 
                if x14 <= x10
                  then ICons x14 (merge x15 (ICons
                                               x10 x11))
                  else ??
Checking program ICons x14
                   (merge INil (merge x15 ys))
Checking ICons x14 (merge INil
                      (merge x15
                         ys)) :: {IList a|ilen _v == ilen xs + ilen ys && ielems _v == ielems xs + ielems ys} in
\xs . \ys . 
    match ys with
      ICons x10 x11 -> 
        match xs with
          ICons x14 x15 -> 
            if (x10 <= x14) && (x14 <= x10)
              then ICons x14 (merge x15 (ICons
                                           x14 x11))
              else 
                if x14 <= x10
                  then ICons x14 (merge x15 (ICons
                                               x10 x11))
                  else ??
