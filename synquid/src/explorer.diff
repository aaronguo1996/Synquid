diff --git a/synquid/src/Synquid.hs b/synquid/src/Synquid.hs
index c790e10..721a0cd 100644
--- a/synquid/src/Synquid.hs
+++ b/synquid/src/Synquid.hs
@@ -7,7 +7,7 @@ import Synquid.Type
 import Synquid.Program
 import Synquid.Error
 import Synquid.Pretty
-import Synquid.Parser
+import Synquid.Parser (parseFromFile, parseProgram, toErrorMessage)
 import Synquid.Resolver (resolveDecls)
 import Synquid.SolverMonad
 import Synquid.HornSolver
@@ -45,7 +45,7 @@ main = do
   res <- cmdArgsRun $ mode
   case res of
     (Synthesis file libs onlyGoals
-               appMax scrutineeMax matchMax auxMax fix genPreds explicitMatch unfoldLocals partial incremental consistency memoize symmetry succinct graph
+               appMax scrutineeMax matchMax auxMax fix genPreds explicitMatch unfoldLocals partial incremental consistency memoize symmetry
                lfp bfs
                out_file out_module outFormat resolve
                print_spec print_stats log_) -> do
@@ -63,9 +63,7 @@ main = do
                     _consistencyChecking = consistency,
                     _useMemoization = memoize,
                     _symmetryReduction = symmetry,
-                    _explorerLogLevel = log_,
-                    _useSuccinct = succinct,
-                    _buildGraph = graph
+                    _explorerLogLevel = log_
                     }
                   let solverParams = defaultHornSolverParams {
                     isLeastFixpoint = lfp,
@@ -84,6 +82,27 @@ main = do
                     module_ = out_module
                   }
                   runOnFile synquidParams explorerParams solverParams codegenParams file libs
+    (Lifty file libs onlyGoals out_file out_module outFormat resolve verify print_spec print_stats log_) -> do
+                  let explorerParams = defaultExplorerParams {
+                    _explorerLogLevel = log_
+                    }
+                  let solverParams = defaultHornSolverParams {
+                    solverLogLevel = log_
+                    }
+                  let synquidParams = defaultSynquidParams {
+                    goalFilter = liftM (splitOn ",") onlyGoals,
+                    outputFormat = outFormat,
+                    resolveOnly = resolve,
+                    repairPolicies = True,
+                    verifyOnly = verify,
+                    showSpec = print_spec,
+                    showStats = print_stats
+                  }
+                  let codegenParams = defaultCodegenParams {
+                    filename = out_file,
+                    module_ = out_module
+                  }
+                  runOnFile synquidParams explorerParams solverParams codegenParams file libs                            
 
 {- Command line arguments -}
 
@@ -116,8 +135,6 @@ data CommandLineArgs
         consistency :: Bool,
         memoize :: Bool,
         symmetry :: Bool,
-        succinct :: Bool,
-        graph :: Bool,
         -- | Solver params
         lfp :: Bool,
         bfs_solver :: Bool,
@@ -129,10 +146,25 @@ data CommandLineArgs
         print_spec :: Bool,
         print_stats :: Bool,
         log_ :: Int
+      } 
+      | Lifty {
+        -- | Input
+        file :: String,
+        libs :: [String],
+        only :: Maybe String,
+        -- | Output
+        out_file :: Maybe String,
+        out_module :: Maybe String,
+        output :: OutputFormat,
+        resolve :: Bool,
+        verify :: Bool,
+        print_spec :: Bool,
+        print_stats :: Bool,
+        log_ :: Int
       }
   deriving (Data, Typeable, Show, Eq)
 
-synt = Synthesis {
+synt = Synthesis {  
   file                = ""              &= typFile &= argPos 0,
   libs                = []              &= args &= typ "FILES",
   only                = Nothing         &= typ "GOAL,..." &= help ("Only synthesize the specified functions"),
@@ -157,18 +189,31 @@ synt = Synthesis {
   output              = defaultFormat   &= help ("Output format: Plain, Ansi or Html (default: " ++ show defaultFormat ++ ")") &= typ "FORMAT",
   print_spec          = True            &= help ("Show specification of each synthesis goal (default: True)"),
   print_stats         = False           &= help ("Show specification and solution size (default: False)"),
-  log_                = 0               &= help ("Logger verboseness level (default: 0)") &= name "l",
-  succinct            = False           &= help ("Use succinct type for pruning (default: False)") &= name "succinct",
-  graph               = False           &= help ("Build succinct graph (default: False)") &= name "graph"
+  log_                = 0               &= help ("Logger verboseness level (default: 0)") &= name "l"
   } &= auto &= help "Synthesize goals specified in the input file"
     where
       defaultFormat = outputFormat defaultSynquidParams
-
-
-mode = cmdArgsMode $ synt &=
-  help "Synquid program synthesizer" &=
-  program programName &=
-  summary (programName ++ " v" ++ versionName ++ ", " ++ showGregorian releaseDate)
+      
+lifty = Lifty {  
+  file                = ""              &= typFile &= argPos 0,
+  libs                = []              &= args &= typ "FILES",
+  only                = Nothing         &= typ "GOAL,..." &= help ("Only synthesize the specified functions"),
+  resolve             = False           &= help ("Resolve only; no type checking or synthesis (default: False)"),
+  verify              = False           &= help ("Verification only mode (default: False)") &= name "v",
+  out_file            = Nothing         &= help ("Generate Haskell output file (default: none)") &= typFile &= name "o" &= opt "" &= groupname "Output",
+  out_module          = Nothing         &= help ("Name of Haskell module to generate (default: from file name)") &= typ "Name",
+  output              = defaultFormat   &= help ("Output format: Plain, Ansi or Html (default: " ++ show defaultFormat ++ ")") &= typ "FORMAT",
+  print_spec          = True            &= help ("Show specification of each synthesis goal (default: True)"),
+  print_stats         = False           &= help ("Show specification and solution size (default: False)"),
+  log_                = 0               &= help ("Logger verboseness level (default: 0)") &= name "l"
+  } &= help "Fix information leaks in the input file"
+    where
+      defaultFormat = outputFormat defaultSynquidParams
+      
+mode = cmdArgsMode $ modes [synt, lifty] &=
+  help "Synquid program synthesizer" &= 
+  program programName &= 
+  summary (programName ++ " v" ++ versionName ++ ", " ++ showGregorian releaseDate)      
 
 -- | Parameters for template exploration
 defaultExplorerParams = ExplorerParams {
@@ -189,9 +234,7 @@ defaultExplorerParams = ExplorerParams {
   _symmetryReduction = False,
   _context = id,
   _sourcePos = noPos,
-  _explorerLogLevel = 0,
-  _useSuccinct = False,
-  _buildGraph = False
+  _explorerLogLevel = 0
 }
 
 -- | Parameters for constraint solving
@@ -272,7 +315,6 @@ codegen params results = case params of
 collectLibDecls libs declsByFile =
   Map.filterWithKey (\k _ -> k `elem` libs) $ Map.fromList declsByFile
 
-
 -- | Parse and resolve file, then synthesize the specified goals
 runOnFile :: SynquidParams -> ExplorerParams -> HornSolverParams -> CodegenParams
                            -> String -> [String] -> IO ()
@@ -295,22 +337,25 @@ runOnFile synquidParams explorerParams solverParams codegenParams file libs = do
         Left parseErr -> (pdoc $ pretty $ toErrorMessage parseErr) >> pdoc empty >> exitFailure
         -- Right ast -> print $ vsep $ map pretty ast
         Right decls -> let decls' = if null rest then decls else filter (not . isSynthesisGoal) decls in -- Remove implementations from libraries
-          ((file, decls') :) <$> parseFromFiles rest
+          ((file, decls') :) <$> parseFromFiles rest    
     requested goals = case goalFilter synquidParams of
       Just filt -> filter (\goal -> gName goal `elem` filt) goals
       _ -> goals
+    
     pdoc = printDoc (outputFormat synquidParams)
     synthesizeGoal cquals tquals goal = do
-      when ((gSynthesize goal) && (showSpec synquidParams)) $ pdoc (prettySpec goal)
+      when (showSpec synquidParams) $ pdoc (prettySpec goal)
       -- print empty
       -- print $ vMapDoc pretty pretty (allSymbols $ gEnvironment goal)
       -- print $ pretty (gSpec goal)
       -- print $ vMapDoc pretty pretty (_measures $ gEnvironment goal)
-      (mProg, stats) <- synthesize explorerParams solverParams goal cquals tquals
+      (mProg, stats) <- if repairPolicies synquidParams
+                        then policyRepair (verifyOnly synquidParams) explorerParams solverParams goal cquals tquals
+                        else synthesize explorerParams solverParams goal cquals tquals
       case mProg of
         Left typeErr -> pdoc (pretty typeErr) >> pdoc empty >> exitFailure
         Right prog -> do
-          when (gSynthesize goal) $ pdoc (prettySolution goal prog)
+          pdoc (prettySolution goal prog)
           pdoc empty
           return ((goal, prog), stats)
     printStats results declsByFile = do
@@ -323,7 +368,7 @@ runOnFile synquidParams explorerParams solverParams codegenParams file libs = do
            ) decls
       let totalSizeOf = sum . map (typeNodeCount . toMonotype .unresolvedType env)
       let policySize = Map.fromList $ map (\(file, decls) -> (file, totalSizeOf $ namesOfConstants decls)) declsByFile
-      let getStatsFor ((goal, prog), stats) =
+      let getStatsFor ((goal, prog), stats) = 
              StatsRow
              (gName goal)
              (typeNodeCount $ toMonotype $ unresolvedSpec goal)
@@ -336,7 +381,7 @@ runOnFile synquidParams explorerParams solverParams codegenParams file libs = do
       pdoc $ vsep $ [
                 parens (text "Goals:" <+> pretty (length results)),
                 parens (text "Measures:" <+> pretty measureCount)] ++
-              if repairPolicies synquidParams
+              if repairPolicies synquidParams 
                 then [
                   parens (text "Policy size:" <+> (text $ show policySize)),
                   statsTable perResult]
@@ -344,4 +389,4 @@ runOnFile synquidParams explorerParams solverParams codegenParams file libs = do
                   parens (text "Spec size:" <+> pretty specSize),
                   parens (text "Solution size:" <+> pretty solutionSize)
                 ] ++
-              [empty]
+              [empty]
\ No newline at end of file
